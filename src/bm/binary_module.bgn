config.cpp.namespace = "rebgn"
config.cpp.bytes_type = "std::string"
config.cpp.sys_include = "string"

format Varint:
    prefix :u2
    match prefix:
        0 => value :u6
        1 => value :u14
        2 => value :u30
        3 => value :u62


# from ast_enum.bgn
enum BinaryOp:
    :u8
    mul = "*"
    div = "/"
    mod = "%"
    left_arithmetic_shift = "<<<"
    right_arithmetic_shift = ">>>"
    left_logical_shift = "<<"
    right_logical_shift = ">>"
    bit_and = "&"
    add = "+"
    sub = "-"
    bit_or = "|"
    bit_xor = "^"
    equal = "=="
    not_equal = "!="
    less = "<"
    less_or_eq = "<="
    grater = ">"
    grater_or_eq = ">="

    logical_and = "&&"

    logical_or = "||"

    cond_op1 = "?"
    cond_op2 = ":"

    range_exclusive = ".."
    range_inclusive = "..="

    assign = "="
    define_assign = ":="
    const_assign = "::="
    add_assign = "+="
    sub_assign = "-="
    mul_assign = "*="
    div_assign = "/="
    mod_assign = "%="
    left_logical_shift_assign = "<<="
    right_logical_shift_assign = ">>="
    left_arithmetic_shift_assign = "<<<="
    right_arithmetic_shift_assign = ">>>="
    bit_and_assign = "&="
    bit_or_assign = "|="
    bit_xor_assign = "^="

    comma = ","
    in_assign = "in"
    append_assign = "append"

enum UnaryOp:
    :u8
    logical_not = "!"
    minus_sign = "-"
    bit_not = "~" # this is for clarification; not in brgen ast node

enum Endian:
    :u8
    unspec
    big
    little
    dynamic # this is for clarification; not in brgen ast node

enum BitOrder:
    :u8
    unspec
    msb
    lsb

enum AbstractOp:
    :u8

    
    METADATA
    IMPORT
    DYNAMIC_ENDIAN
    SPECIFY_BIT_ORDER
    SPECIFY_ALIGNMENT
    SPECIFY_STORAGE_TYPE
    SPECIFY_FIXED_VALUE

    DEFINE_PROGRAM
    END_PROGRAM
    DECLARE_PROGRAM

    DEFINE_FORMAT
    END_FORMAT
    DECLARE_FORMAT

    DEFINE_FIELD
    END_FIELD
    DECLARE_FIELD
    CONDITIONAL_FIELD
    CONDITIONAL_PROPERTY
    MERGED_CONDITIONAL_FIELD

    DEFINE_PROPERTY
    END_PROPERTY
    DECLARE_PROPERTY

    DEFINE_PROPERTY_SETTER
    DEFINE_PROPERTY_GETTER

    DEFINE_PARAMETER
    END_PARAMETER
    DECLARE_PARAMETER
    
    DEFINE_FUNCTION
    END_FUNCTION
    DECLARE_FUNCTION
    
    DEFINE_ENUM
    END_ENUM
    DECLARE_ENUM
    
    DEFINE_ENUM_MEMBER
    
    DEFINE_UNION
    END_UNION
    DECLARE_UNION

    DEFINE_UNION_MEMBER
    END_UNION_MEMBER
    DECLARE_UNION_MEMBER

    DEFINE_STATE
    END_STATE
    DECLARE_STATE

    DEFINE_BIT_FIELD
    END_BIT_FIELD
    DECLARE_BIT_FIELD

    BEGIN_ENCODE_PACKED_OPERATION
    END_ENCODE_PACKED_OPERATION
    BEGIN_DECODE_PACKED_OPERATION
    END_DECODE_PACKED_OPERATION
    
    DEFINE_ENCODER

    DEFINE_DECODER
    
    ENCODE_INT
    DECODE_INT
    ENCODE_INT_VECTOR
    DECODE_INT_VECTOR
    DECODE_INT_VECTOR_UNTIL_EOF
    DECODE_INT_VECTOR_FIXED
    PEEK_INT_VECTOR
    BACKWARD_INPUT
    BACKWARD_OUTPUT
    BYTE_OFFSET
    BIT_OFFSET
    REMAIN_BYTES
    CAN_READ
    CALL_ENCODE
    CALL_DECODE

    STATIC_CAST # for enum
    BIT_CAST # for float
    CALL_CAST # for Cast ast node
    ASSIGN_CAST # on assignment

    ADDRESS_OF
    OPTIONAL_OF
    EMPTY_PTR
    EMPTY_OPTIONAL

    LOOP_INFINITE
    LOOP_CONDITION
    CONTINUE
    BREAK
    END_LOOP

    IF
    ELIF
    ELSE
    END_IF

    MATCH
    EXHAUSTIVE_MATCH
    CASE
    END_CASE
    DEFAULT_CASE
    END_MATCH

    DEFINE_VARIABLE
    DEFINE_VARIABLE_REF
    DEFINE_CONSTANT
    DECLARE_VARIABLE
    
    BINARY
    NOT_PREV_THEN
    UNARY
    ASSIGN
    PROPERTY_ASSIGN
    ASSERT
    EXPLICIT_ERROR

    ACCESS

    INDEX
    APPEND
    INC
    DEC
    NEG
    CALL
    RET
    RET_SUCCESS
    RET_PROPERTY_SETTER_OK
    RET_PROPERTY_SETTER_FAIL

    IMMEDIATE_TRUE
    IMMEDIATE_FALSE
    IMMEDIATE_INT
    IMMEDIATE_INT64
    IMMEDIATE_CHAR
    IMMEDIATE_STRING
    IMMEDIATE_TYPE

    NEW_OBJECT
    INIT_RECURSIVE_STRUCT
    CHECK_RECURSIVE_STRUCT


    SWITCH_UNION
    CHECK_UNION

    ENCODER_PARAMETER
    DECODER_PARAMETER

    STATE_VARIABLE_PARAMETER

    PROPERTY_INPUT_PARAMETER

    EVAL_EXPR

    ARRAY_SIZE
    RESERVE_SIZE

    BEGIN_ENCODE_SUB_RANGE
    END_ENCODE_SUB_RANGE
    BEGIN_DECODE_SUB_RANGE
    END_DECODE_SUB_RANGE

    FIELD_AVAILABLE

    PHI # for assignment analysis

    PROPERTY_FUNCTION # marker for property function




# context that is used on code generation
state BMContext:
    global_endian :Endian 
    global_bit_order :BitOrder
    has_dynamic_endian :bool
    has_dynamic_bit_order :bool
    inner_bit_operations :bool # inner BIT_FIELD or PACKED_OPERATION
    bit_offset :u64

format String:
    length :Varint
    data :[length.value]u8

format StringRef:
    code :Varint
    string :String

format IdentIndex:
    ident :Varint
    index :Varint


enum StorageType:
    :u8
    # terminal
    INT   
    UINT 
    FLOAT 
    STRUCT_REF
    RECURSIVE_STRUCT_REF
    BOOL

    # qualifiers
    ENUM
    ARRAY
    VECTOR
    # for union
    VARIANT

    # encoder/decoder return value
    CODER_RETURN

    # property setter return value
    PROPERTY_SETTER_RETURN

    # property
    OPTIONAL
    PTR


enum MergeMode:
    :u8
    COMMON_TYPE
    STRICT_TYPE
    STRICT_COMMON_TYPE


enum PackedOpType:
    :u8
    FIXED
    VARIABLE

enum UnionCheckAt:
    :u8
    PROPERTY_GETTER_PTR
    PROPERTY_GETTER_OPTIONAL
    ENCODER

# TODO: be recursive
format Storage:
    type :StorageType
    match type:
        StorageType.INT => size :Varint
        StorageType.UINT => size :Varint
        StorageType.FLOAT => size :Varint
        StorageType.STRUCT_REF:
            size :Varint # size of struct + 1, 0 means null
            ref :Varint
        StorageType.RECURSIVE_STRUCT_REF:
            ref :Varint
        StorageType.ENUM:
            ref :Varint
        StorageType.ARRAY:
            size :Varint
        StorageType.VARIANT:
            ref :Varint 
            size :Varint

format Storages:
    length :Varint
    storages :[length.value]Storage

format Metadata:
    name :Varint
    len_exprs :Varint
    expr_refs :[len_exprs.value]Varint

format Param:
    len_exprs :Varint
    expr_refs :[len_exprs.value]Varint
    
format PhiParam:
    condition :Varint
    assign :Varint

format PhiParams:
    length :Varint
    params :[length.value]PhiParam

format EndianExpr:
    endian :Endian
    dynamic_ref :Varint # ref to dynamic endian or null

# ident is unique identifier
# ref, left_ref, right_ref is reference to other object identifier
format Code:
    op :AbstractOp
    match op:
        AbstractOp.METADATA:
            metadata :Metadata
        AbstractOp.DEFINE_PROGRAM:
            ident :Varint
        AbstractOp.IMPORT:
            ident :Varint
            ref :Varint # ref to program
        AbstractOp.IMMEDIATE_CHAR:
            ident :Varint
            int_value :Varint  
        AbstractOp.IMMEDIATE_INT:
            ident :Varint
            int_value :Varint
        AbstractOp.SPECIFY_FIXED_VALUE:
            ref :Varint
        AbstractOp.IMMEDIATE_INT64:
            ident :Varint
            int_value64 :u64
        AbstractOp.IMMEDIATE_STRING:
            ident :Varint
        AbstractOp.IMMEDIATE_TRUE:
            ident :Varint
        AbstractOp.IMMEDIATE_FALSE:
            ident :Varint
        AbstractOp.IMMEDIATE_TYPE:
            ident :Varint
            storage :Storages
        AbstractOp.DEFINE_FORMAT:
            ident :Varint
        AbstractOp.DEFINE_STATE:
            ident :Varint
        AbstractOp.DEFINE_FIELD:
            ident :Varint
            belong :Varint # belong to format or state or union or null
        AbstractOp.DEFINE_PROPERTY:
            ident :Varint
            belong :Varint # belong to format or state or union or null
        AbstractOp.DEFINE_ENUM:
            ident :Varint
        AbstractOp.DEFINE_ENUM_MEMBER:
            ident :Varint
            left_ref :Varint # ref to init expr
            right_ref :Varint # ref to string representation or null
        AbstractOp.DEFINE_FUNCTION:
            ident :Varint
            belong :Varint # belong to format or null
        AbstractOp.DEFINE_ENCODER:
            left_ref :Varint # ref to format
            right_ref :Varint # ref to encoder
        AbstractOp.DEFINE_DECODER:
            left_ref :Varint # ref to format
            right_ref :Varint # ref to decoder
        AbstractOp.DEFINE_UNION:
            ident :Varint
            belong :Varint # ref to field
        AbstractOp.DEFINE_VARIABLE:
            ident :Varint
            ref :Varint # ref to initial expr
        AbstractOp.DEFINE_VARIABLE_REF:
            ident :Varint
            ref :Varint # ref to variable
        AbstractOp.DECLARE_VARIABLE:
            ref :Varint # ref to variable
        AbstractOp.DEFINE_PARAMETER:
            ident: Varint
            belong :Varint # belong to function
        AbstractOp.DEFINE_UNION_MEMBER:
            ident :Varint
            belong :Varint # belong to union
        AbstractOp.SPECIFY_STORAGE_TYPE:
            storage :Storages
        AbstractOp.FIELD_AVAILABLE:
            ident :Varint
            left_ref :Varint # ref to base expr (field or member access)
            right_ref :Varint # ref to condition (this need special handling when code generation)
        AbstractOp.BINARY:
            ident :Varint
            bop :BinaryOp
            left_ref :Varint
            right_ref :Varint
        AbstractOp.NOT_PREV_THEN:
            ident :Varint
            left_ref :Varint # ref to previous expr
            right_ref :Varint # ref to then expr
        AbstractOp.UNARY:
            ident :Varint
            uop :UnaryOp
            ref :Varint
        AbstractOp.LOOP_CONDITION:
            ref :Varint # ref to expr
        AbstractOp.ACCESS:
            ident :Varint
            left_ref :Varint
            right_ref :Varint
        AbstractOp.INDEX:
            ident :Varint
            left_ref :Varint
            right_ref :Varint
        AbstractOp.ASSIGN:
            ident :Varint # for assignment analysis
            ref :Varint # ref to previous definition, assignment or phi
            left_ref :Varint # ref to variable
            right_ref :Varint # ref to expr
        AbstractOp.PHI:
            ident :Varint
            ref :Varint # ref to original variable
            phi_params :PhiParams # ref to previous definitions, assignments or phis
        AbstractOp.PROPERTY_ASSIGN:
            left_ref :Varint # ref to property setter
            right_ref :Varint # ref to expr
        AbstractOp.ADDRESS_OF:
            ident :Varint
            ref :Varint
        AbstractOp.OPTIONAL_OF:
            ident :Varint
            ref :Varint
            storage :Storages
        AbstractOp.EMPTY_PTR:
            ident :Varint
        AbstractOp.EMPTY_OPTIONAL:
            ident :Varint
        AbstractOp.BACKWARD_INPUT:
            ref :Varint # bit count
        AbstractOp.BACKWARD_OUTPUT:
            ref :Varint # bit count
        AbstractOp.DYNAMIC_ENDIAN:
            ident :Varint
            ref :Varint # ref to endian expr
        AbstractOp.ENCODE_INT:
            ref :Varint
            endian :EndianExpr
            bit_size :Varint
        AbstractOp.ENCODE_INT_VECTOR:
            left_ref :Varint # ref to vector
            right_ref :Varint # ref to length
            endian :EndianExpr
            bit_size :Varint
        AbstractOp.DECODE_INT_VECTOR:
            left_ref :Varint # ref to vector
            right_ref :Varint # ref to length
            endian :EndianExpr
            bit_size :Varint
        AbstractOp.DECODE_INT_VECTOR_FIXED:
            left_ref :Varint # ref to vector
            right_ref :Varint # ref to length
            endian :EndianExpr
            bit_size :Varint
        AbstractOp.DECODE_INT_VECTOR_UNTIL_EOF:
            ref :Varint # ref to vector
            endian :EndianExpr
            bit_size :Varint
        AbstractOp.PEEK_INT_VECTOR:
            left_ref :Varint # ref to vector
            right_ref :Varint # ref to length
            endian :EndianExpr
            bit_size :Varint
        AbstractOp.DECODE_INT:
            ref :Varint
            endian :EndianExpr
            bit_size :Varint
        AbstractOp.BIT_CAST:
            ident: Varint
            storage :Storages
            ref :Varint # ref to object
        AbstractOp.CALL_CAST:
            ident: Varint
            storage :Storages
            param :Param
        AbstractOp.CALL_ENCODE:
            left_ref :Varint # ref to encoder
            right_ref :Varint # ref to object
            bit_size_plus :Varint  # bit size plus 1 (0 means null)
        AbstractOp.CALL_DECODE:
            left_ref :Varint # ref to decoder
            right_ref :Varint # ref to object
            bit_size_plus :Varint  # bit size plus 1 (0 means null)
        AbstractOp.INC:
            ref :Varint
        AbstractOp.DEC:
            ref :Varint
        AbstractOp.EVAL_EXPR:
            ref :Varint
        AbstractOp.STATIC_CAST:
            ident :Varint
            storage :Storages
            ref :Varint # ref to object
        AbstractOp.ASSIGN_CAST:
            ident :Varint
            ref :Varint # ref to object
            storage :Storages # to type
            from :Storages # from type 
        AbstractOp.NEW_OBJECT:
            ident :Varint
            storage :Storages
        AbstractOp.INIT_RECURSIVE_STRUCT:
            left_ref :Varint # ref to recursive struct(format)
            right_ref :Varint # ref to object
        AbstractOp.CHECK_RECURSIVE_STRUCT:
            left_ref :Varint # ref to recursive struct(format)
            right_ref :Varint # ref to object
        AbstractOp.ASSERT:
            ref :Varint
        AbstractOp.IF:
            ref :Varint
        AbstractOp.ELIF:
            ref :Varint
        AbstractOp.DECLARE_FORMAT:
            ref :Varint
        AbstractOp.DECLARE_STATE:
            ref :Varint
        AbstractOp.DECLARE_FIELD:
            ref :Varint
        AbstractOp.DECLARE_PROPERTY:
            ref :Varint
        AbstractOp.DECLARE_PARAMETER:
            ref :Varint
        AbstractOp.DECLARE_BIT_FIELD:
            ref :Varint
        AbstractOp.DECLARE_ENUM:
            ref :Varint
        AbstractOp.DECLARE_FUNCTION:
            ref :Varint
        AbstractOp.DECLARE_UNION:
            ref :Varint
        AbstractOp.DECLARE_UNION_MEMBER:
            ref :Varint
        AbstractOp.CONDITIONAL_FIELD:
            ident :Varint
            left_ref :Varint # ref to expr
            right_ref :Varint # ref to field
            belong :Varint # belong to union field
        AbstractOp.CONDITIONAL_PROPERTY:
            ident :Varint
            left_ref :Varint # ref to expr
            right_ref :Varint # ref to merged conditional field
            belong :Varint # belong to union field
        AbstractOp.MERGED_CONDITIONAL_FIELD:
            ident :Varint
            storage :Storages
            param :Param # ref to conditional fields
            belong :Varint # belong to property
            merge_mode :MergeMode
        AbstractOp.CASE:
            ref :Varint
        AbstractOp.DECLARE_PROGRAM:
            ref :Varint
        AbstractOp.DEFINE_BIT_FIELD:
            ident :Varint
            belong :Varint # belong to format or state or union or null
        AbstractOp.APPEND:
            left_ref :Varint # ref to vector
            right_ref :Varint # ref to object
        AbstractOp.BEGIN_ENCODE_PACKED_OPERATION:
            ident :Varint
            ref :Varint # ref to bit field
            packed_op_type :PackedOpType
        AbstractOp.BEGIN_DECODE_PACKED_OPERATION:
            ident :Varint
            ref :Varint # ref to bit field
            packed_op_type :PackedOpType
        AbstractOp.SWITCH_UNION:
            ref :Varint # ref to union_member
        AbstractOp.CHECK_UNION:
            ref :Varint # ref to union_member
            check_at :UnionCheckAt
        AbstractOp.RET:
            belong :Varint # belong to function
            ref :Varint # ref to expr (maybe null)
        AbstractOp.RET_SUCCESS:
            belong :Varint # belong to function
        AbstractOp.RET_PROPERTY_SETTER_OK:
            belong :Varint # belong to property setter
        AbstractOp.RET_PROPERTY_SETTER_FAIL:
            belong :Varint # belong to property setter
        AbstractOp.MATCH:
            ref :Varint # ref to expr
        AbstractOp.EXHAUSTIVE_MATCH:
            ref :Varint # ref to expr
        AbstractOp.ENCODER_PARAMETER:
            left_ref :Varint # ref to format
            right_ref :Varint # ref to encoder function
        AbstractOp.DECODER_PARAMETER:
            left_ref :Varint # ref to format
            right_ref :Varint # ref to decoder function
        AbstractOp.PROPERTY_INPUT_PARAMETER:
            ident :Varint
            left_ref :Varint # ref to merged conditional field
            right_ref :Varint # ref to function
            storage :Storages
        AbstractOp.PROPERTY_FUNCTION:
            ref :Varint # ref to merged conditional field
        AbstractOp.DEFINE_PROPERTY_SETTER:
            left_ref :Varint # ref to merged conditional field
            right_ref :Varint # ref to function
        AbstractOp.DEFINE_PROPERTY_GETTER:
            left_ref :Varint # ref to merged conditional field
            right_ref :Varint # ref to function
        AbstractOp.STATE_VARIABLE_PARAMETER:
            ref :Varint # ref to state
        AbstractOp.EXPLICIT_ERROR:
            param :Param
        AbstractOp.CALL:
            ident :Varint
            ref :Varint # ref to function
            param :Param
        AbstractOp.BIT_OFFSET:
            ident :Varint
        AbstractOp.BYTE_OFFSET:
            ident :Varint
        AbstractOp.ARRAY_SIZE:
            ident :Varint
            ref :Varint # ref to array
        AbstractOp.RESERVE_SIZE:
            left_ref :Varint # ref to vector
            right_ref :Varint # ref to size
        AbstractOp.BEGIN_ENCODE_SUB_RANGE:
            ref :Varint # length of sub range
        AbstractOp.BEGIN_DECODE_SUB_RANGE:
            ref :Varint # length of sub range
        AbstractOp.CAN_READ:
            ident :Varint
        AbstractOp.REMAIN_BYTES:
            ident :Varint


format StringRefs:
    refs_length :Varint
    refs :[refs_length.value]StringRef

format IdentIndexs:
    refs_length :Varint
    refs :[refs_length.value]IdentIndex

format Range:
    start :u64
    end :u64

format RangePacked:
    start :Varint
    end :Varint

format Ranges:
    length :Varint
    ranges :[length.value]RangePacked

format IdentRange:
    ident :Varint
    range :RangePacked

format IdentRanges:
    length :Varint
    ranges :[length.value]IdentRange

format Loc:
    ident :Varint # ref to generated code
    file_id :Varint # files index + 1
    line :Varint # line number
    column :Varint # column number
    start :Varint # start index of source code
    end :Varint # end index of source code

format DebugInfo:
    len_files :Varint
    files :[len_files.value]String
    len_locs :Varint
    locs :[len_locs.value]Loc

format BinaryModule:
    magic: "RBGM"
    max_id :Varint
    metadata :StringRefs
    strings :StringRefs
    identifiers :StringRefs
    ident_indexes :IdentIndexs
    programs :Ranges # root ranges
    ident_ranges :IdentRanges
    has_debug_info :u1
    reserved :u7
    if has_debug_info == 1:
        debug_info :DebugInfo
    code_length :Varint
    code :[code_length.value]Code
