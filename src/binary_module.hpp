// Code generated by json2cpp2
#pragma once
#include <cstdint>
#include <vector>
#include <array>
#include <optional>
#include <variant>

#include <binary/flags.h>
#include <binary/float.h>
#include <view/iovec.h>
#include <binary/number.h>
#include <string>
namespace rebgn {
    enum class AbstractOp : std::uint8_t {
        NOP = 0,
        DEFINE_METADATA = 1,
        END_METADATA = 2,
        IMPORT = 3,
        SPECIFY_ENDIAN = 4,
        SPECIFY_BIT_ORDER = 5,
        SPECIFY_ALIGNMENT = 6,
        SPECIFY_LENGTH = 7,
        EXPLICIT_ERROR = 8,
        MAP_TYPE = 9,
        DEFINE_FORMAT = 10,
        END_FORMAT = 11,
        DEFINE_FIELD = 12,
        STORAGE_TYPE = 13,
        END_FIELD = 14,
        DEFINE_FUNCTION = 15,
        END_FUNCTION = 16,
        DEFINE_ENUM = 17,
        END_ENUM = 18,
        DEFINE_ENUM_MEMBER = 19,
        END_ENUM_MEMBER = 20,
        DEFINE_UNION = 21,
        END_UNION = 22,
        ENCODE_INT = 23,
        DECODE_INT = 24,
        ENCODE_FLOAT = 25,
        DECODE_FLOAT = 26,
        CALL_ENCODE = 27,
        CALL_DECODE = 28,
        LOOP = 29,
        END_LOOP = 30,
        IF = 31,
        ELIF = 32,
        ELSE = 33,
        END_IF = 34,
        MATCH = 35,
        CASE = 36,
        END_MATCH = 37,
        DEFINE_VARIABLE = 38,
        END_VARIABLE = 39,
        ASSIGN = 40,
        ACCESS = 41,
        ENUM_MEMBER = 42,
        INDEX = 43,
        APPEND = 44,
        ADD = 45,
        SUB = 46,
        MUL = 47,
        DIV = 48,
        MOD = 49,
        BAND = 50,
        BOR = 51,
        BXOR = 52,
        NOT = 53,
        SHL = 54,
        SHR = 55,
        INC = 56,
        DEC = 57,
        NEG = 58,
        CALL = 59,
        RET = 60,
        IMMEDIATE_BOOL = 61,
        IMMEDIATE_INT = 62,
        IMMEDIATE_STRING = 63,
    };
    enum class StorageType : std::uint8_t {
        INT = 0,
        UINT = 1,
        FLOAT = 2,
        STRUCT = 3,
        BYTE_VECTOR = 4,
        ENUM = 5,
        ARRAY = 6,
        VECTOR = 7,
    };
    struct Varint;
    struct String;
    struct Storage;
    struct Refs;
    struct StringRef;
    struct Storages;
    struct Code;
    struct BinaryModule;
    struct Varint {
        ::futils::binary::flags_t<std::uint64_t, 2, 62> flags_1_;
        bits_flag_alias_method(flags_1_, 0, prefix);
        bits_flag_alias_method(flags_1_, 1, value);
        bool encode(::futils::binary::writer& w) const;
        bool decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 0;
    };
    struct String {
        Varint length;
        std::string data;
        bool encode(::futils::binary::writer& w) const;
        bool decode(::futils::binary::reader& r);
    };
    struct Storage {
        StorageType type{};
        struct union_struct_4 {
            Varint size;
        };
        struct union_struct_5 {
            Varint size;
        };
        struct union_struct_6 {
            Varint size;
        };
        struct union_struct_7 {
            Varint ident;
        };
        struct union_struct_8 {
        };
        struct union_struct_9 {
        };
        struct union_struct_10 {
            Varint size;
        };
        struct union_struct_11 {
        };
        std::variant<std::monostate, union_struct_4, union_struct_5, union_struct_6, union_struct_7, union_struct_8, union_struct_9, union_struct_10, union_struct_11> union_variant_3;
        std::optional<Varint> ident() const;
        bool ident(Varint&& v);
        bool ident(const Varint& v);
        std::optional<Varint> size() const;
        bool size(Varint&& v);
        bool size(const Varint& v);
        bool encode(::futils::binary::writer& w) const;
        bool decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 1;
    };
    struct Refs {
        Varint refs_length;
        std::vector<Varint> refs;
        bool encode(::futils::binary::writer& w) const;
        bool decode(::futils::binary::reader& r);
    };
    struct StringRef {
        Varint code;
        String string;
        bool encode(::futils::binary::writer& w) const;
        bool decode(::futils::binary::reader& r);
    };
    struct Storages {
        Varint length;
        std::vector<Storage> storages;
        bool encode(::futils::binary::writer& w) const;
        bool decode(::futils::binary::reader& r);
    };
    struct Code {
        AbstractOp op{};
        struct union_struct_14 {
            StringRef name;
        };
        struct union_struct_15 {
            std::uint64_t int_value = 0;
        };
        struct union_struct_16 {
            Varint ident;
        };
        struct union_struct_17 {
            Varint ident;
        };
        std::variant<std::monostate, union_struct_14, union_struct_15, union_struct_16, union_struct_17> union_variant_13;
        std::optional<Varint> ident() const;
        bool ident(Varint&& v);
        bool ident(const Varint& v);
        std::optional<std::uint64_t> int_value() const;
        bool int_value(std::uint64_t&& v);
        bool int_value(const std::uint64_t& v);
        std::optional<StringRef> name() const;
        bool name(StringRef&& v);
        bool name(const StringRef& v);
        bool encode(::futils::binary::writer& w) const;
        bool decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 1;
    };
    struct BinaryModule {
        Refs strings;
        Refs identifiers;
        Varint code_length;
        std::vector<Code> code;
        bool encode(::futils::binary::writer& w) const;
        bool decode(::futils::binary::reader& r);
    };
    inline std::optional<Varint> Storage::ident() const {
        if (StorageType::INT == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::UINT == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::FLOAT == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::STRUCT == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_3)) {
                return std::nullopt;
            }
            return std::get<4>((*this).union_variant_3).ident;
        }
        return std::nullopt;
    }
    inline bool Storage::ident(const Varint& v) {
        if (StorageType::INT == (*this).type) {
            return false;
        }
        if (StorageType::UINT == (*this).type) {
            return false;
        }
        if (StorageType::FLOAT == (*this).type) {
            return false;
        }
        if (StorageType::STRUCT == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_3)) {
                union_variant_3 = union_struct_7();
            }
            std::get<4>((*this).union_variant_3).ident = v;
            return true;
        }
        return false;
    }
    inline bool Storage::ident(Varint&& v) {
        if (StorageType::INT == (*this).type) {
            return false;
        }
        if (StorageType::UINT == (*this).type) {
            return false;
        }
        if (StorageType::FLOAT == (*this).type) {
            return false;
        }
        if (StorageType::STRUCT == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_3)) {
                union_variant_3 = union_struct_7();
            }
            std::get<4>((*this).union_variant_3).ident = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Storage::size() const {
        if (StorageType::INT == (*this).type) {
            if (!std::holds_alternative<union_struct_4>(union_variant_3)) {
                return std::nullopt;
            }
            return std::get<1>((*this).union_variant_3).size;
        }
        if (StorageType::UINT == (*this).type) {
            if (!std::holds_alternative<union_struct_5>(union_variant_3)) {
                return std::nullopt;
            }
            return std::get<2>((*this).union_variant_3).size;
        }
        if (StorageType::FLOAT == (*this).type) {
            if (!std::holds_alternative<union_struct_6>(union_variant_3)) {
                return std::nullopt;
            }
            return std::get<3>((*this).union_variant_3).size;
        }
        if (StorageType::STRUCT == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::BYTE_VECTOR == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::ENUM == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::ARRAY == (*this).type) {
            if (!std::holds_alternative<union_struct_10>(union_variant_3)) {
                return std::nullopt;
            }
            return std::get<7>((*this).union_variant_3).size;
        }
        return std::nullopt;
    }
    inline bool Storage::size(const Varint& v) {
        if (StorageType::INT == (*this).type) {
            if (!std::holds_alternative<union_struct_4>(union_variant_3)) {
                union_variant_3 = union_struct_4();
            }
            std::get<1>((*this).union_variant_3).size = v;
            return true;
        }
        if (StorageType::UINT == (*this).type) {
            if (!std::holds_alternative<union_struct_5>(union_variant_3)) {
                union_variant_3 = union_struct_5();
            }
            std::get<2>((*this).union_variant_3).size = v;
            return true;
        }
        if (StorageType::FLOAT == (*this).type) {
            if (!std::holds_alternative<union_struct_6>(union_variant_3)) {
                union_variant_3 = union_struct_6();
            }
            std::get<3>((*this).union_variant_3).size = v;
            return true;
        }
        if (StorageType::STRUCT == (*this).type) {
            return false;
        }
        if (StorageType::BYTE_VECTOR == (*this).type) {
            return false;
        }
        if (StorageType::ENUM == (*this).type) {
            return false;
        }
        if (StorageType::ARRAY == (*this).type) {
            if (!std::holds_alternative<union_struct_10>(union_variant_3)) {
                union_variant_3 = union_struct_10();
            }
            std::get<7>((*this).union_variant_3).size = v;
            return true;
        }
        return false;
    }
    inline bool Storage::size(Varint&& v) {
        if (StorageType::INT == (*this).type) {
            if (!std::holds_alternative<union_struct_4>(union_variant_3)) {
                union_variant_3 = union_struct_4();
            }
            std::get<1>((*this).union_variant_3).size = std::move(v);
            return true;
        }
        if (StorageType::UINT == (*this).type) {
            if (!std::holds_alternative<union_struct_5>(union_variant_3)) {
                union_variant_3 = union_struct_5();
            }
            std::get<2>((*this).union_variant_3).size = std::move(v);
            return true;
        }
        if (StorageType::FLOAT == (*this).type) {
            if (!std::holds_alternative<union_struct_6>(union_variant_3)) {
                union_variant_3 = union_struct_6();
            }
            std::get<3>((*this).union_variant_3).size = std::move(v);
            return true;
        }
        if (StorageType::STRUCT == (*this).type) {
            return false;
        }
        if (StorageType::BYTE_VECTOR == (*this).type) {
            return false;
        }
        if (StorageType::ENUM == (*this).type) {
            return false;
        }
        if (StorageType::ARRAY == (*this).type) {
            if (!std::holds_alternative<union_struct_10>(union_variant_3)) {
                union_variant_3 = union_struct_10();
            }
            std::get<7>((*this).union_variant_3).size = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::ident() const {
        if (AbstractOp::DEFINE_METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_16>(union_variant_13)) {
                return std::nullopt;
            }
            return std::get<3>((*this).union_variant_13).ident;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_13)) {
                return std::nullopt;
            }
            return std::get<4>((*this).union_variant_13).ident;
        }
        return std::nullopt;
    }
    inline bool Code::ident(const Varint& v) {
        if (AbstractOp::DEFINE_METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_16>(union_variant_13)) {
                union_variant_13 = union_struct_16();
            }
            std::get<3>((*this).union_variant_13).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_13)) {
                union_variant_13 = union_struct_17();
            }
            std::get<4>((*this).union_variant_13).ident = v;
            return true;
        }
        return false;
    }
    inline bool Code::ident(Varint&& v) {
        if (AbstractOp::DEFINE_METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_16>(union_variant_13)) {
                union_variant_13 = union_struct_16();
            }
            std::get<3>((*this).union_variant_13).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_13)) {
                union_variant_13 = union_struct_17();
            }
            std::get<4>((*this).union_variant_13).ident = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<std::uint64_t> Code::int_value() const {
        if (AbstractOp::DEFINE_METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_15>(union_variant_13)) {
                return std::nullopt;
            }
            return std::get<2>((*this).union_variant_13).int_value;
        }
        return std::nullopt;
    }
    inline bool Code::int_value(const std::uint64_t& v) {
        if (AbstractOp::DEFINE_METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_15>(union_variant_13)) {
                union_variant_13 = union_struct_15();
            }
            std::get<2>((*this).union_variant_13).int_value = v;
            return true;
        }
        return false;
    }
    inline bool Code::int_value(std::uint64_t&& v) {
        if (AbstractOp::DEFINE_METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_15>(union_variant_13)) {
                union_variant_13 = union_struct_15();
            }
            std::get<2>((*this).union_variant_13).int_value = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<StringRef> Code::name() const {
        if (AbstractOp::DEFINE_METADATA == (*this).op) {
            if (!std::holds_alternative<union_struct_14>(union_variant_13)) {
                return std::nullopt;
            }
            return std::get<1>((*this).union_variant_13).name;
        }
        return std::nullopt;
    }
    inline bool Code::name(const StringRef& v) {
        if (AbstractOp::DEFINE_METADATA == (*this).op) {
            if (!std::holds_alternative<union_struct_14>(union_variant_13)) {
                union_variant_13 = union_struct_14();
            }
            std::get<1>((*this).union_variant_13).name = v;
            return true;
        }
        return false;
    }
    inline bool Code::name(StringRef&& v) {
        if (AbstractOp::DEFINE_METADATA == (*this).op) {
            if (!std::holds_alternative<union_struct_14>(union_variant_13)) {
                union_variant_13 = union_struct_14();
            }
            std::get<1>((*this).union_variant_13).name = std::move(v);
            return true;
        }
        return false;
    }
    inline bool Varint::encode(::futils::binary::writer& w) const {
        if ((*this).prefix() == 0) {
            std::uint8_t tmp18 = 0;
            tmp18 = (*this).value();
            tmp18 |= std::uint8_t(0) << 6;
            if (!::futils::binary::write_num(w, tmp18, true)) {
                return false;
            }
        }
        else if ((*this).prefix() == 1) {
            std::uint16_t tmp18 = 0;
            tmp18 = (*this).value();
            tmp18 |= std::uint16_t(1) << 14;
            if (!::futils::binary::write_num(w, tmp18, true)) {
                return false;
            }
        }
        else if ((*this).prefix() == 2) {
            std::uint32_t tmp18 = 0;
            tmp18 = (*this).value();
            tmp18 |= std::uint32_t(2) << 30;
            if (!::futils::binary::write_num(w, tmp18, true)) {
                return false;
            }
        }
        else if ((*this).prefix() == 3) {
            std::uint64_t tmp18 = 0;
            tmp18 = (*this).value();
            tmp18 |= std::uint64_t(3) << 62;
            if (!::futils::binary::write_num(w, tmp18, true)) {
                return false;
            }
        }
        return true;
    }
    inline bool Varint::decode(::futils::binary::reader& r) {
        if (!r.load_stream(1)) {
            return false;
        }
        std::uint8_t tmp19 = (r.top() >> 6) & 0x3;
        (*this).prefix(tmp19);
        if ((*this).prefix() == 0) {
            std::uint8_t tmp20 = 0;
            if (!::futils::binary::read_num(r, tmp20, true)) {
                return false;
            }
            tmp20 &= ~(std::uint8_t(0x3) << 6);
            (*this).value(tmp20);
        }
        else if ((*this).prefix() == 1) {
            std::uint16_t tmp21 = 0;
            if (!::futils::binary::read_num(r, tmp21, true)) {
                return false;
            }
            tmp21 &= ~(std::uint16_t(0x3) << 14);
            (*this).value(tmp21);
        }
        else if ((*this).prefix() == 2) {
            std::uint32_t tmp22 = 0;
            if (!::futils::binary::read_num(r, tmp22, true)) {
                return false;
            }
            tmp22 &= ~(std::uint32_t(0x3) << 30);
            (*this).value(tmp22);
        }
        else if ((*this).prefix() == 3) {
            std::uint64_t tmp23 = 0;
            if (!::futils::binary::read_num(r, tmp23, true)) {
                return false;
            }
            tmp23 &= ~(std::uint64_t(0x3) << 62);
            (*this).value(tmp23);
        }
        return true;
    }
    inline bool String::encode(::futils::binary::writer& w) const {
        if (!(*this).length.encode(w)) {
            return false;
        }
        auto tmp_24_ = (*this).length.value();
        if (tmp_24_ != (*this).data.size()) {
            return false;
        }
        if (!w.write((*this).data)) {
            return false;
        }
        return true;
    }
    inline bool String::decode(::futils::binary::reader& r) {
        if (!(*this).length.decode(r)) {
            return false;
        }
        auto tmp_25_ = (*this).length.value();
        if (!r.read((*this).data, tmp_25_)) {
            return false;
        }
        return true;
    }
    inline bool Storage::encode(::futils::binary::writer& w) const {
        auto tmp_26_ = static_cast<std::uint8_t>((*this).type);
        if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_26_), true)) {
            return false;
        }
        if (StorageType::INT == (*this).type) {
            if (!std::holds_alternative<union_struct_4>(union_variant_3)) {
                return false;
            }
            if (!std::get<1>((*this).union_variant_3).size.encode(w)) {
                return false;
            }
        }
        else if (StorageType::UINT == (*this).type) {
            if (!std::holds_alternative<union_struct_5>(union_variant_3)) {
                return false;
            }
            if (!std::get<2>((*this).union_variant_3).size.encode(w)) {
                return false;
            }
        }
        else if (StorageType::FLOAT == (*this).type) {
            if (!std::holds_alternative<union_struct_6>(union_variant_3)) {
                return false;
            }
            if (!std::get<3>((*this).union_variant_3).size.encode(w)) {
                return false;
            }
        }
        else if (StorageType::STRUCT == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_3)) {
                return false;
            }
            if (!std::get<4>((*this).union_variant_3).ident.encode(w)) {
                return false;
            }
        }
        else if (StorageType::BYTE_VECTOR == (*this).type) {
        }
        else if (StorageType::ENUM == (*this).type) {
        }
        else if (StorageType::ARRAY == (*this).type) {
            if (!std::holds_alternative<union_struct_10>(union_variant_3)) {
                return false;
            }
            if (!std::get<7>((*this).union_variant_3).size.encode(w)) {
                return false;
            }
        }
        else if (StorageType::VECTOR == (*this).type) {
        }
        return true;
    }
    inline bool Storage::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_27_ = 0;
        if (!::futils::binary::read_num(r, tmp_27_, true)) {
            return false;
        }
        (*this).type = static_cast<StorageType>(tmp_27_);
        if (StorageType::INT == (*this).type) {
            if (!std::holds_alternative<union_struct_4>(union_variant_3)) {
                union_variant_3 = union_struct_4();
            }
            if (!std::get<1>((*this).union_variant_3).size.decode(r)) {
                return false;
            }
        }
        else if (StorageType::UINT == (*this).type) {
            if (!std::holds_alternative<union_struct_5>(union_variant_3)) {
                union_variant_3 = union_struct_5();
            }
            if (!std::get<2>((*this).union_variant_3).size.decode(r)) {
                return false;
            }
        }
        else if (StorageType::FLOAT == (*this).type) {
            if (!std::holds_alternative<union_struct_6>(union_variant_3)) {
                union_variant_3 = union_struct_6();
            }
            if (!std::get<3>((*this).union_variant_3).size.decode(r)) {
                return false;
            }
        }
        else if (StorageType::STRUCT == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_3)) {
                union_variant_3 = union_struct_7();
            }
            if (!std::get<4>((*this).union_variant_3).ident.decode(r)) {
                return false;
            }
        }
        else if (StorageType::BYTE_VECTOR == (*this).type) {
            if (!std::holds_alternative<union_struct_8>(union_variant_3)) {
                union_variant_3 = union_struct_8();
            }
        }
        else if (StorageType::ENUM == (*this).type) {
            if (!std::holds_alternative<union_struct_9>(union_variant_3)) {
                union_variant_3 = union_struct_9();
            }
        }
        else if (StorageType::ARRAY == (*this).type) {
            if (!std::holds_alternative<union_struct_10>(union_variant_3)) {
                union_variant_3 = union_struct_10();
            }
            if (!std::get<7>((*this).union_variant_3).size.decode(r)) {
                return false;
            }
        }
        else if (StorageType::VECTOR == (*this).type) {
            if (!std::holds_alternative<union_struct_11>(union_variant_3)) {
                union_variant_3 = union_struct_11();
            }
        }
        return true;
    }
    inline bool Refs::encode(::futils::binary::writer& w) const {
        if (!(*this).refs_length.encode(w)) {
            return false;
        }
        auto tmp_28_ = (*this).refs_length.value();
        if (tmp_28_ != (*this).refs.size()) {
            return false;
        }
        for (auto& tmp_29_ : (*this).refs) {
            if (!tmp_29_.encode(w)) {
                return false;
            }
        }
        return true;
    }
    inline bool Refs::decode(::futils::binary::reader& r) {
        if (!(*this).refs_length.decode(r)) {
            return false;
        }
        auto tmp_30_ = (*this).refs_length.value();
        (*this).refs.clear();
        for (size_t tmp_32_ = 0; tmp_32_ < tmp_30_; ++tmp_32_) {
            Varint tmp_31_;
            if (!tmp_31_.decode(r)) {
                return false;
            }
            (*this).refs.push_back(std::move(tmp_31_));
        }
        return true;
    }
    inline bool StringRef::encode(::futils::binary::writer& w) const {
        if (!(*this).code.encode(w)) {
            return false;
        }
        if (!(*this).string.encode(w)) {
            return false;
        }
        return true;
    }
    inline bool StringRef::decode(::futils::binary::reader& r) {
        if (!(*this).code.decode(r)) {
            return false;
        }
        if (!(*this).string.decode(r)) {
            return false;
        }
        return true;
    }
    inline bool Storages::encode(::futils::binary::writer& w) const {
        if (!(*this).length.encode(w)) {
            return false;
        }
        auto tmp_33_ = (*this).length.value();
        if (tmp_33_ != (*this).storages.size()) {
            return false;
        }
        for (auto& tmp_34_ : (*this).storages) {
            if (!tmp_34_.encode(w)) {
                return false;
            }
        }
        return true;
    }
    inline bool Storages::decode(::futils::binary::reader& r) {
        if (!(*this).length.decode(r)) {
            return false;
        }
        auto tmp_35_ = (*this).length.value();
        (*this).storages.clear();
        for (size_t tmp_37_ = 0; tmp_37_ < tmp_35_; ++tmp_37_) {
            Storage tmp_36_;
            if (!tmp_36_.decode(r)) {
                return false;
            }
            (*this).storages.push_back(std::move(tmp_36_));
        }
        return true;
    }
    inline bool Code::encode(::futils::binary::writer& w) const {
        auto tmp_38_ = static_cast<std::uint8_t>((*this).op);
        if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_38_), true)) {
            return false;
        }
        if (AbstractOp::DEFINE_METADATA == (*this).op) {
            if (!std::holds_alternative<union_struct_14>(union_variant_13)) {
                return false;
            }
            if (!std::get<1>((*this).union_variant_13).name.encode(w)) {
                return false;
            }
        }
        else if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_15>(union_variant_13)) {
                return false;
            }
            if (!::futils::binary::write_num(w, static_cast<std::uint64_t>(std::get<2>((*this).union_variant_13).int_value), true)) {
                return false;
            }
        }
        else if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_16>(union_variant_13)) {
                return false;
            }
            if (!std::get<3>((*this).union_variant_13).ident.encode(w)) {
                return false;
            }
        }
        else if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_13)) {
                return false;
            }
            if (!std::get<4>((*this).union_variant_13).ident.encode(w)) {
                return false;
            }
        }
        return true;
    }
    inline bool Code::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_39_ = 0;
        if (!::futils::binary::read_num(r, tmp_39_, true)) {
            return false;
        }
        (*this).op = static_cast<AbstractOp>(tmp_39_);
        if (AbstractOp::DEFINE_METADATA == (*this).op) {
            if (!std::holds_alternative<union_struct_14>(union_variant_13)) {
                union_variant_13 = union_struct_14();
            }
            if (!std::get<1>((*this).union_variant_13).name.decode(r)) {
                return false;
            }
        }
        else if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_15>(union_variant_13)) {
                union_variant_13 = union_struct_15();
            }
            if (!::futils::binary::read_num(r, std::get<2>((*this).union_variant_13).int_value, true)) {
                return false;
            }
        }
        else if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_16>(union_variant_13)) {
                union_variant_13 = union_struct_16();
            }
            if (!std::get<3>((*this).union_variant_13).ident.decode(r)) {
                return false;
            }
        }
        else if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_13)) {
                union_variant_13 = union_struct_17();
            }
            if (!std::get<4>((*this).union_variant_13).ident.decode(r)) {
                return false;
            }
        }
        return true;
    }
    inline bool BinaryModule::encode(::futils::binary::writer& w) const {
        if (!(*this).strings.encode(w)) {
            return false;
        }
        if (!(*this).identifiers.encode(w)) {
            return false;
        }
        if (!(*this).code_length.encode(w)) {
            return false;
        }
        auto tmp_40_ = (*this).code_length.value();
        if (tmp_40_ != (*this).code.size()) {
            return false;
        }
        for (auto& tmp_41_ : (*this).code) {
            if (!tmp_41_.encode(w)) {
                return false;
            }
        }
        return true;
    }
    inline bool BinaryModule::decode(::futils::binary::reader& r) {
        if (!(*this).strings.decode(r)) {
            return false;
        }
        if (!(*this).identifiers.decode(r)) {
            return false;
        }
        if (!(*this).code_length.decode(r)) {
            return false;
        }
        auto tmp_42_ = (*this).code_length.value();
        (*this).code.clear();
        for (size_t tmp_44_ = 0; tmp_44_ < tmp_42_; ++tmp_44_) {
            Code tmp_43_;
            if (!tmp_43_.decode(r)) {
                return false;
            }
            (*this).code.push_back(std::move(tmp_43_));
        }
        return true;
    }
}  // namespace rebgn
