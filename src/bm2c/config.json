{
    "lang": "c",
    "suffix": "",
    "worker_request_name": "c2",
    "worker_lsp_name": "",
    "comment_prefix": "/*",
    "comment_suffix": "*/",
    "int_type": "std::int{}_t",
    "uint_type": "std::uint{}_t",
    "float_type": "float{}_t",
    "array_type": "std::array<$TYPE, $LEN>",
    "vector_type": "std::vector<{}>",
    "byte_vector_type": "",
    "byte_array_type": "",
    "optional_type": "std::optional<{}>",
    "pointer_type": "{}*",
    "recursive_struct_type": "{}*",
    "bool_type": "bool",
    "true_literal": "true",
    "false_literal": "false",
    "coder_return_type": "bool",
    "property_setter_return_type": "bool",
    "end_of_statement": ";",
    "block_begin": "{",
    "block_end": "}",
    "otbs_on_block_end": false,
    "block_end_type": "};",
    "prior_ident": false,
    "struct_keyword": "struct",
    "enum_keyword": "enum",
    "define_var_keyword": "",
    "var_type_separator": " ",
    "define_var_assign": "=",
    "omit_type_on_define_var": false,
    "field_type_separator": " ",
    "field_end": ";",
    "enum_member_end": ",",
    "func_keyword": "",
    "trailing_return_type": false,
    "func_brace_ident_separator": "",
    "func_type_separator": " ",
    "func_void_return_type": "void",
    "if_keyword": "if",
    "elif_keyword": "else if",
    "else_keyword": "else",
    "infinity_loop": "for(;;)",
    "conditional_loop": "while",
    "match_keyword": "switch",
    "match_case_keyword": "case",
    "match_case_separator": ":",
    "match_default_keyword": "default",
    "condition_has_parentheses": true,
    "self_ident": "(*this)",
    "param_type_separator": " ",
    "self_param": "",
    "encoder_param": "Encoder& w",
    "decoder_param": "Decoder& w",
    "func_style_cast": false,
    "empty_pointer": "nullptr",
    "empty_optional": "std::nullopt",
    "size_method": "size",
    "surrounded_size_method": false,
    "append_method": "push_back",
    "surrounded_append_method": false,
    "variant_mode": "union",
    "algebraic_variant_separator": "|",
    "algebraic_variant_type": "{}",
    "check_union_condition": "!std::holds_alternative<$MEMBER_INDEX>($FIELD_IDENT)",
    "check_union_fail_return_value": "false",
    "switch_union": "$FIELD_IDENT = $MEMBER_IDENT()",
    "address_of_placeholder": "&{}",
    "optional_of_placeholder": "{}",
    "decode_bytes_op": "$VALUE = $DECODER.decode_bytes($LEN)",
    "encode_bytes_op": "$ENCODER.encode_bytes($VALUE)",
    "decode_bytes_until_eof_op": "$VALUE = $DECODER.decode_bytes_until_eof()",
    "peek_bytes_op": "$VALUE = $DECODER.peek_bytes($LEN)",
    "encode_offset": "$ENCODER.offset()",
    "decode_offset": "$DECODER.offset()",
    "encode_backward": "$ENCODER.backward($OFFSET)",
    "decode_backward": "$DECODER.backward($OFFSET)",
    "is_little_endian_expr": "std::endian::native == std::endian::little",
    "default_enum_base": "",
    "enum_base_separator": " : ",
    "eval_result_text": "$RESULT = make_eval_result($TEXT);",
    "eval_result_passthrough": "$RESULT = $TEXT;"
}