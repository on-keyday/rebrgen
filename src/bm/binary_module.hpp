// Code generated by json2cpp2
#pragma once
#include <cstdint>
#include <vector>
#include <array>
#include <optional>
#include <variant>
#include <string_view>

#include <binary/flags.h>
#include <binary/float.h>
#include <view/iovec.h>
#include <binary/number.h>
#include <error/error.h>
#include <string>
namespace rebgn {
    enum class BinaryOp : std::uint8_t {
        mul = 0,
        div = 1,
        mod = 2,
        left_arithmetic_shift = 3,
        right_arithmetic_shift = 4,
        left_logical_shift = 5,
        right_logical_shift = 6,
        bit_and = 7,
        add = 8,
        sub = 9,
        bit_or = 10,
        bit_xor = 11,
        equal = 12,
        not_equal = 13,
        less = 14,
        less_or_eq = 15,
        grater = 16,
        grater_or_eq = 17,
        logical_and = 18,
        logical_or = 19,
        cond_op1 = 20,
        cond_op2 = 21,
        range_exclusive = 22,
        range_inclusive = 23,
        assign = 24,
        define_assign = 25,
        const_assign = 26,
        add_assign = 27,
        sub_assign = 28,
        mul_assign = 29,
        div_assign = 30,
        mod_assign = 31,
        left_logical_shift_assign = 32,
        right_logical_shift_assign = 33,
        left_arithmetic_shift_assign = 34,
        right_arithmetic_shift_assign = 35,
        bit_and_assign = 36,
        bit_or_assign = 37,
        bit_xor_assign = 38,
        comma = 39,
        in_assign = 40,
        append_assign = 41,
    };
    constexpr const char* to_string(BinaryOp e) {
        switch (e) {
            case BinaryOp::mul:
                return "*";
            case BinaryOp::div:
                return "/";
            case BinaryOp::mod:
                return "%";
            case BinaryOp::left_arithmetic_shift:
                return "<<<";
            case BinaryOp::right_arithmetic_shift:
                return ">>>";
            case BinaryOp::left_logical_shift:
                return "<<";
            case BinaryOp::right_logical_shift:
                return ">>";
            case BinaryOp::bit_and:
                return "&";
            case BinaryOp::add:
                return "+";
            case BinaryOp::sub:
                return "-";
            case BinaryOp::bit_or:
                return "|";
            case BinaryOp::bit_xor:
                return "^";
            case BinaryOp::equal:
                return "==";
            case BinaryOp::not_equal:
                return "!=";
            case BinaryOp::less:
                return "<";
            case BinaryOp::less_or_eq:
                return "<=";
            case BinaryOp::grater:
                return ">";
            case BinaryOp::grater_or_eq:
                return ">=";
            case BinaryOp::logical_and:
                return "&&";
            case BinaryOp::logical_or:
                return "||";
            case BinaryOp::cond_op1:
                return "?";
            case BinaryOp::cond_op2:
                return ":";
            case BinaryOp::range_exclusive:
                return "..";
            case BinaryOp::range_inclusive:
                return "..=";
            case BinaryOp::assign:
                return "=";
            case BinaryOp::define_assign:
                return ":=";
            case BinaryOp::const_assign:
                return "::=";
            case BinaryOp::add_assign:
                return "+=";
            case BinaryOp::sub_assign:
                return "-=";
            case BinaryOp::mul_assign:
                return "*=";
            case BinaryOp::div_assign:
                return "/=";
            case BinaryOp::mod_assign:
                return "%=";
            case BinaryOp::left_logical_shift_assign:
                return "<<=";
            case BinaryOp::right_logical_shift_assign:
                return ">>=";
            case BinaryOp::left_arithmetic_shift_assign:
                return "<<<=";
            case BinaryOp::right_arithmetic_shift_assign:
                return ">>>=";
            case BinaryOp::bit_and_assign:
                return "&=";
            case BinaryOp::bit_or_assign:
                return "|=";
            case BinaryOp::bit_xor_assign:
                return "^=";
            case BinaryOp::comma:
                return ",";
            case BinaryOp::in_assign:
                return "in";
            case BinaryOp::append_assign:
                return "append";
        }
        return "";
    }

    constexpr std::optional<BinaryOp> BinaryOp_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "*") {
            return BinaryOp::mul;
        }
        if (str == "/") {
            return BinaryOp::div;
        }
        if (str == "%") {
            return BinaryOp::mod;
        }
        if (str == "<<<") {
            return BinaryOp::left_arithmetic_shift;
        }
        if (str == ">>>") {
            return BinaryOp::right_arithmetic_shift;
        }
        if (str == "<<") {
            return BinaryOp::left_logical_shift;
        }
        if (str == ">>") {
            return BinaryOp::right_logical_shift;
        }
        if (str == "&") {
            return BinaryOp::bit_and;
        }
        if (str == "+") {
            return BinaryOp::add;
        }
        if (str == "-") {
            return BinaryOp::sub;
        }
        if (str == "|") {
            return BinaryOp::bit_or;
        }
        if (str == "^") {
            return BinaryOp::bit_xor;
        }
        if (str == "==") {
            return BinaryOp::equal;
        }
        if (str == "!=") {
            return BinaryOp::not_equal;
        }
        if (str == "<") {
            return BinaryOp::less;
        }
        if (str == "<=") {
            return BinaryOp::less_or_eq;
        }
        if (str == ">") {
            return BinaryOp::grater;
        }
        if (str == ">=") {
            return BinaryOp::grater_or_eq;
        }
        if (str == "&&") {
            return BinaryOp::logical_and;
        }
        if (str == "||") {
            return BinaryOp::logical_or;
        }
        if (str == "?") {
            return BinaryOp::cond_op1;
        }
        if (str == ":") {
            return BinaryOp::cond_op2;
        }
        if (str == "..") {
            return BinaryOp::range_exclusive;
        }
        if (str == "..=") {
            return BinaryOp::range_inclusive;
        }
        if (str == "=") {
            return BinaryOp::assign;
        }
        if (str == ":=") {
            return BinaryOp::define_assign;
        }
        if (str == "::=") {
            return BinaryOp::const_assign;
        }
        if (str == "+=") {
            return BinaryOp::add_assign;
        }
        if (str == "-=") {
            return BinaryOp::sub_assign;
        }
        if (str == "*=") {
            return BinaryOp::mul_assign;
        }
        if (str == "/=") {
            return BinaryOp::div_assign;
        }
        if (str == "%=") {
            return BinaryOp::mod_assign;
        }
        if (str == "<<=") {
            return BinaryOp::left_logical_shift_assign;
        }
        if (str == ">>=") {
            return BinaryOp::right_logical_shift_assign;
        }
        if (str == "<<<=") {
            return BinaryOp::left_arithmetic_shift_assign;
        }
        if (str == ">>>=") {
            return BinaryOp::right_arithmetic_shift_assign;
        }
        if (str == "&=") {
            return BinaryOp::bit_and_assign;
        }
        if (str == "|=") {
            return BinaryOp::bit_or_assign;
        }
        if (str == "^=") {
            return BinaryOp::bit_xor_assign;
        }
        if (str == ",") {
            return BinaryOp::comma;
        }
        if (str == "in") {
            return BinaryOp::in_assign;
        }
        if (str == "append") {
            return BinaryOp::append_assign;
        }
        return std::nullopt;
    }
    enum class UnaryOp : std::uint8_t {
        logical_not = 0,
        minus_sign = 1,
        bit_not = 2,
    };
    constexpr const char* to_string(UnaryOp e) {
        switch (e) {
            case UnaryOp::logical_not:
                return "!";
            case UnaryOp::minus_sign:
                return "-";
            case UnaryOp::bit_not:
                return "~";
        }
        return "";
    }

    constexpr std::optional<UnaryOp> UnaryOp_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "!") {
            return UnaryOp::logical_not;
        }
        if (str == "-") {
            return UnaryOp::minus_sign;
        }
        if (str == "~") {
            return UnaryOp::bit_not;
        }
        return std::nullopt;
    }
    enum class Endian : std::uint8_t {
        unspec = 0,
        big = 1,
        little = 2,
        dynamic = 3,
        native = 4,
    };
    constexpr const char* to_string(Endian e) {
        switch (e) {
            case Endian::unspec:
                return "unspec";
            case Endian::big:
                return "big";
            case Endian::little:
                return "little";
            case Endian::dynamic:
                return "dynamic";
            case Endian::native:
                return "native";
        }
        return "";
    }

    constexpr std::optional<Endian> Endian_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "unspec") {
            return Endian::unspec;
        }
        if (str == "big") {
            return Endian::big;
        }
        if (str == "little") {
            return Endian::little;
        }
        if (str == "dynamic") {
            return Endian::dynamic;
        }
        if (str == "native") {
            return Endian::native;
        }
        return std::nullopt;
    }
    enum class BitOrder : std::uint8_t {
        unspec = 0,
        msb = 1,
        lsb = 2,
    };
    constexpr const char* to_string(BitOrder e) {
        switch (e) {
            case BitOrder::unspec:
                return "unspec";
            case BitOrder::msb:
                return "msb";
            case BitOrder::lsb:
                return "lsb";
        }
        return "";
    }

    constexpr std::optional<BitOrder> BitOrder_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "unspec") {
            return BitOrder::unspec;
        }
        if (str == "msb") {
            return BitOrder::msb;
        }
        if (str == "lsb") {
            return BitOrder::lsb;
        }
        return std::nullopt;
    }
    enum class AbstractOp : std::uint8_t {
        METADATA = 0,
        IMPORT = 1,
        DYNAMIC_ENDIAN = 2,
        RETURN_TYPE = 3,
        DEFINE_PROGRAM = 4,
        END_PROGRAM = 5,
        DECLARE_PROGRAM = 6,
        DEFINE_FORMAT = 7,
        END_FORMAT = 8,
        DECLARE_FORMAT = 9,
        DEFINE_FIELD = 10,
        CONDITIONAL_FIELD = 11,
        CONDITIONAL_PROPERTY = 12,
        MERGED_CONDITIONAL_FIELD = 13,
        DEFINE_PROPERTY = 14,
        END_PROPERTY = 15,
        DECLARE_PROPERTY = 16,
        DEFINE_PROPERTY_SETTER = 17,
        DEFINE_PROPERTY_GETTER = 18,
        DEFINE_PARAMETER = 19,
        DEFINE_FUNCTION = 20,
        END_FUNCTION = 21,
        DECLARE_FUNCTION = 22,
        DEFINE_ENUM = 23,
        END_ENUM = 24,
        DECLARE_ENUM = 25,
        DEFINE_ENUM_MEMBER = 26,
        DEFINE_UNION = 27,
        END_UNION = 28,
        DECLARE_UNION = 29,
        DEFINE_UNION_MEMBER = 30,
        END_UNION_MEMBER = 31,
        DECLARE_UNION_MEMBER = 32,
        DEFINE_STATE = 33,
        END_STATE = 34,
        DECLARE_STATE = 35,
        DEFINE_BIT_FIELD = 36,
        END_BIT_FIELD = 37,
        DECLARE_BIT_FIELD = 38,
        BEGIN_ENCODE_PACKED_OPERATION = 39,
        END_ENCODE_PACKED_OPERATION = 40,
        BEGIN_DECODE_PACKED_OPERATION = 41,
        END_DECODE_PACKED_OPERATION = 42,
        DEFINE_ENCODER = 43,
        DEFINE_DECODER = 44,
        ENCODE_INT = 45,
        DECODE_INT = 46,
        ENCODE_INT_VECTOR = 47,
        ENCODE_INT_VECTOR_FIXED = 48,
        DECODE_INT_VECTOR = 49,
        DECODE_INT_VECTOR_UNTIL_EOF = 50,
        DECODE_INT_VECTOR_FIXED = 51,
        PEEK_INT_VECTOR = 52,
        BACKWARD_INPUT = 53,
        BACKWARD_OUTPUT = 54,
        INPUT_BYTE_OFFSET = 55,
        OUTPUT_BYTE_OFFSET = 56,
        INPUT_BIT_OFFSET = 57,
        OUTPUT_BIT_OFFSET = 58,
        REMAIN_BYTES = 59,
        CAN_READ = 60,
        IS_LITTLE_ENDIAN = 61,
        CALL_ENCODE = 62,
        CALL_DECODE = 63,
        CAST = 64,
        CALL_CAST = 65,
        ADDRESS_OF = 66,
        OPTIONAL_OF = 67,
        EMPTY_PTR = 68,
        EMPTY_OPTIONAL = 69,
        LOOP_INFINITE = 70,
        LOOP_CONDITION = 71,
        CONTINUE = 72,
        BREAK = 73,
        END_LOOP = 74,
        IF = 75,
        ELIF = 76,
        ELSE = 77,
        END_IF = 78,
        MATCH = 79,
        EXHAUSTIVE_MATCH = 80,
        CASE = 81,
        END_CASE = 82,
        DEFAULT_CASE = 83,
        END_MATCH = 84,
        DEFINE_VARIABLE = 85,
        DEFINE_VARIABLE_REF = 86,
        DEFINE_CONSTANT = 87,
        DECLARE_VARIABLE = 88,
        BINARY = 89,
        NOT_PREV_THEN = 90,
        UNARY = 91,
        ASSIGN = 92,
        PROPERTY_ASSIGN = 93,
        ASSERT = 94,
        LENGTH_CHECK = 95,
        EXPLICIT_ERROR = 96,
        ACCESS = 97,
        INDEX = 98,
        APPEND = 99,
        INC = 100,
        CALL = 101,
        RET = 102,
        RET_SUCCESS = 103,
        RET_PROPERTY_SETTER_OK = 104,
        RET_PROPERTY_SETTER_FAIL = 105,
        IMMEDIATE_TRUE = 106,
        IMMEDIATE_FALSE = 107,
        IMMEDIATE_INT = 108,
        IMMEDIATE_INT64 = 109,
        IMMEDIATE_CHAR = 110,
        IMMEDIATE_STRING = 111,
        IMMEDIATE_TYPE = 112,
        NEW_OBJECT = 113,
        INIT_RECURSIVE_STRUCT = 114,
        CHECK_RECURSIVE_STRUCT = 115,
        SWITCH_UNION = 116,
        CHECK_UNION = 117,
        ENCODER_PARAMETER = 118,
        DECODER_PARAMETER = 119,
        STATE_VARIABLE_PARAMETER = 120,
        PROPERTY_INPUT_PARAMETER = 121,
        EVAL_EXPR = 122,
        ARRAY_SIZE = 123,
        RESERVE_SIZE = 124,
        BEGIN_ENCODE_SUB_RANGE = 125,
        END_ENCODE_SUB_RANGE = 126,
        BEGIN_DECODE_SUB_RANGE = 127,
        END_DECODE_SUB_RANGE = 128,
        SEEK_ENCODER = 129,
        SEEK_DECODER = 130,
        FIELD_AVAILABLE = 131,
        PHI = 132,
        PROPERTY_FUNCTION = 133,
        DEFINE_FALLBACK = 134,
        END_FALLBACK = 135,
        DEFINE_COND_BLOCK = 136,
        END_COND_BLOCK = 137,
    };
    constexpr const char* to_string(AbstractOp e) {
        switch (e) {
            case AbstractOp::METADATA:
                return "METADATA";
            case AbstractOp::IMPORT:
                return "IMPORT";
            case AbstractOp::DYNAMIC_ENDIAN:
                return "DYNAMIC_ENDIAN";
            case AbstractOp::RETURN_TYPE:
                return "RETURN_TYPE";
            case AbstractOp::DEFINE_PROGRAM:
                return "DEFINE_PROGRAM";
            case AbstractOp::END_PROGRAM:
                return "END_PROGRAM";
            case AbstractOp::DECLARE_PROGRAM:
                return "DECLARE_PROGRAM";
            case AbstractOp::DEFINE_FORMAT:
                return "DEFINE_FORMAT";
            case AbstractOp::END_FORMAT:
                return "END_FORMAT";
            case AbstractOp::DECLARE_FORMAT:
                return "DECLARE_FORMAT";
            case AbstractOp::DEFINE_FIELD:
                return "DEFINE_FIELD";
            case AbstractOp::CONDITIONAL_FIELD:
                return "CONDITIONAL_FIELD";
            case AbstractOp::CONDITIONAL_PROPERTY:
                return "CONDITIONAL_PROPERTY";
            case AbstractOp::MERGED_CONDITIONAL_FIELD:
                return "MERGED_CONDITIONAL_FIELD";
            case AbstractOp::DEFINE_PROPERTY:
                return "DEFINE_PROPERTY";
            case AbstractOp::END_PROPERTY:
                return "END_PROPERTY";
            case AbstractOp::DECLARE_PROPERTY:
                return "DECLARE_PROPERTY";
            case AbstractOp::DEFINE_PROPERTY_SETTER:
                return "DEFINE_PROPERTY_SETTER";
            case AbstractOp::DEFINE_PROPERTY_GETTER:
                return "DEFINE_PROPERTY_GETTER";
            case AbstractOp::DEFINE_PARAMETER:
                return "DEFINE_PARAMETER";
            case AbstractOp::DEFINE_FUNCTION:
                return "DEFINE_FUNCTION";
            case AbstractOp::END_FUNCTION:
                return "END_FUNCTION";
            case AbstractOp::DECLARE_FUNCTION:
                return "DECLARE_FUNCTION";
            case AbstractOp::DEFINE_ENUM:
                return "DEFINE_ENUM";
            case AbstractOp::END_ENUM:
                return "END_ENUM";
            case AbstractOp::DECLARE_ENUM:
                return "DECLARE_ENUM";
            case AbstractOp::DEFINE_ENUM_MEMBER:
                return "DEFINE_ENUM_MEMBER";
            case AbstractOp::DEFINE_UNION:
                return "DEFINE_UNION";
            case AbstractOp::END_UNION:
                return "END_UNION";
            case AbstractOp::DECLARE_UNION:
                return "DECLARE_UNION";
            case AbstractOp::DEFINE_UNION_MEMBER:
                return "DEFINE_UNION_MEMBER";
            case AbstractOp::END_UNION_MEMBER:
                return "END_UNION_MEMBER";
            case AbstractOp::DECLARE_UNION_MEMBER:
                return "DECLARE_UNION_MEMBER";
            case AbstractOp::DEFINE_STATE:
                return "DEFINE_STATE";
            case AbstractOp::END_STATE:
                return "END_STATE";
            case AbstractOp::DECLARE_STATE:
                return "DECLARE_STATE";
            case AbstractOp::DEFINE_BIT_FIELD:
                return "DEFINE_BIT_FIELD";
            case AbstractOp::END_BIT_FIELD:
                return "END_BIT_FIELD";
            case AbstractOp::DECLARE_BIT_FIELD:
                return "DECLARE_BIT_FIELD";
            case AbstractOp::BEGIN_ENCODE_PACKED_OPERATION:
                return "BEGIN_ENCODE_PACKED_OPERATION";
            case AbstractOp::END_ENCODE_PACKED_OPERATION:
                return "END_ENCODE_PACKED_OPERATION";
            case AbstractOp::BEGIN_DECODE_PACKED_OPERATION:
                return "BEGIN_DECODE_PACKED_OPERATION";
            case AbstractOp::END_DECODE_PACKED_OPERATION:
                return "END_DECODE_PACKED_OPERATION";
            case AbstractOp::DEFINE_ENCODER:
                return "DEFINE_ENCODER";
            case AbstractOp::DEFINE_DECODER:
                return "DEFINE_DECODER";
            case AbstractOp::ENCODE_INT:
                return "ENCODE_INT";
            case AbstractOp::DECODE_INT:
                return "DECODE_INT";
            case AbstractOp::ENCODE_INT_VECTOR:
                return "ENCODE_INT_VECTOR";
            case AbstractOp::ENCODE_INT_VECTOR_FIXED:
                return "ENCODE_INT_VECTOR_FIXED";
            case AbstractOp::DECODE_INT_VECTOR:
                return "DECODE_INT_VECTOR";
            case AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF:
                return "DECODE_INT_VECTOR_UNTIL_EOF";
            case AbstractOp::DECODE_INT_VECTOR_FIXED:
                return "DECODE_INT_VECTOR_FIXED";
            case AbstractOp::PEEK_INT_VECTOR:
                return "PEEK_INT_VECTOR";
            case AbstractOp::BACKWARD_INPUT:
                return "BACKWARD_INPUT";
            case AbstractOp::BACKWARD_OUTPUT:
                return "BACKWARD_OUTPUT";
            case AbstractOp::INPUT_BYTE_OFFSET:
                return "INPUT_BYTE_OFFSET";
            case AbstractOp::OUTPUT_BYTE_OFFSET:
                return "OUTPUT_BYTE_OFFSET";
            case AbstractOp::INPUT_BIT_OFFSET:
                return "INPUT_BIT_OFFSET";
            case AbstractOp::OUTPUT_BIT_OFFSET:
                return "OUTPUT_BIT_OFFSET";
            case AbstractOp::REMAIN_BYTES:
                return "REMAIN_BYTES";
            case AbstractOp::CAN_READ:
                return "CAN_READ";
            case AbstractOp::IS_LITTLE_ENDIAN:
                return "IS_LITTLE_ENDIAN";
            case AbstractOp::CALL_ENCODE:
                return "CALL_ENCODE";
            case AbstractOp::CALL_DECODE:
                return "CALL_DECODE";
            case AbstractOp::CAST:
                return "CAST";
            case AbstractOp::CALL_CAST:
                return "CALL_CAST";
            case AbstractOp::ADDRESS_OF:
                return "ADDRESS_OF";
            case AbstractOp::OPTIONAL_OF:
                return "OPTIONAL_OF";
            case AbstractOp::EMPTY_PTR:
                return "EMPTY_PTR";
            case AbstractOp::EMPTY_OPTIONAL:
                return "EMPTY_OPTIONAL";
            case AbstractOp::LOOP_INFINITE:
                return "LOOP_INFINITE";
            case AbstractOp::LOOP_CONDITION:
                return "LOOP_CONDITION";
            case AbstractOp::CONTINUE:
                return "CONTINUE";
            case AbstractOp::BREAK:
                return "BREAK";
            case AbstractOp::END_LOOP:
                return "END_LOOP";
            case AbstractOp::IF:
                return "IF";
            case AbstractOp::ELIF:
                return "ELIF";
            case AbstractOp::ELSE:
                return "ELSE";
            case AbstractOp::END_IF:
                return "END_IF";
            case AbstractOp::MATCH:
                return "MATCH";
            case AbstractOp::EXHAUSTIVE_MATCH:
                return "EXHAUSTIVE_MATCH";
            case AbstractOp::CASE:
                return "CASE";
            case AbstractOp::END_CASE:
                return "END_CASE";
            case AbstractOp::DEFAULT_CASE:
                return "DEFAULT_CASE";
            case AbstractOp::END_MATCH:
                return "END_MATCH";
            case AbstractOp::DEFINE_VARIABLE:
                return "DEFINE_VARIABLE";
            case AbstractOp::DEFINE_VARIABLE_REF:
                return "DEFINE_VARIABLE_REF";
            case AbstractOp::DEFINE_CONSTANT:
                return "DEFINE_CONSTANT";
            case AbstractOp::DECLARE_VARIABLE:
                return "DECLARE_VARIABLE";
            case AbstractOp::BINARY:
                return "BINARY";
            case AbstractOp::NOT_PREV_THEN:
                return "NOT_PREV_THEN";
            case AbstractOp::UNARY:
                return "UNARY";
            case AbstractOp::ASSIGN:
                return "ASSIGN";
            case AbstractOp::PROPERTY_ASSIGN:
                return "PROPERTY_ASSIGN";
            case AbstractOp::ASSERT:
                return "ASSERT";
            case AbstractOp::LENGTH_CHECK:
                return "LENGTH_CHECK";
            case AbstractOp::EXPLICIT_ERROR:
                return "EXPLICIT_ERROR";
            case AbstractOp::ACCESS:
                return "ACCESS";
            case AbstractOp::INDEX:
                return "INDEX";
            case AbstractOp::APPEND:
                return "APPEND";
            case AbstractOp::INC:
                return "INC";
            case AbstractOp::CALL:
                return "CALL";
            case AbstractOp::RET:
                return "RET";
            case AbstractOp::RET_SUCCESS:
                return "RET_SUCCESS";
            case AbstractOp::RET_PROPERTY_SETTER_OK:
                return "RET_PROPERTY_SETTER_OK";
            case AbstractOp::RET_PROPERTY_SETTER_FAIL:
                return "RET_PROPERTY_SETTER_FAIL";
            case AbstractOp::IMMEDIATE_TRUE:
                return "IMMEDIATE_TRUE";
            case AbstractOp::IMMEDIATE_FALSE:
                return "IMMEDIATE_FALSE";
            case AbstractOp::IMMEDIATE_INT:
                return "IMMEDIATE_INT";
            case AbstractOp::IMMEDIATE_INT64:
                return "IMMEDIATE_INT64";
            case AbstractOp::IMMEDIATE_CHAR:
                return "IMMEDIATE_CHAR";
            case AbstractOp::IMMEDIATE_STRING:
                return "IMMEDIATE_STRING";
            case AbstractOp::IMMEDIATE_TYPE:
                return "IMMEDIATE_TYPE";
            case AbstractOp::NEW_OBJECT:
                return "NEW_OBJECT";
            case AbstractOp::INIT_RECURSIVE_STRUCT:
                return "INIT_RECURSIVE_STRUCT";
            case AbstractOp::CHECK_RECURSIVE_STRUCT:
                return "CHECK_RECURSIVE_STRUCT";
            case AbstractOp::SWITCH_UNION:
                return "SWITCH_UNION";
            case AbstractOp::CHECK_UNION:
                return "CHECK_UNION";
            case AbstractOp::ENCODER_PARAMETER:
                return "ENCODER_PARAMETER";
            case AbstractOp::DECODER_PARAMETER:
                return "DECODER_PARAMETER";
            case AbstractOp::STATE_VARIABLE_PARAMETER:
                return "STATE_VARIABLE_PARAMETER";
            case AbstractOp::PROPERTY_INPUT_PARAMETER:
                return "PROPERTY_INPUT_PARAMETER";
            case AbstractOp::EVAL_EXPR:
                return "EVAL_EXPR";
            case AbstractOp::ARRAY_SIZE:
                return "ARRAY_SIZE";
            case AbstractOp::RESERVE_SIZE:
                return "RESERVE_SIZE";
            case AbstractOp::BEGIN_ENCODE_SUB_RANGE:
                return "BEGIN_ENCODE_SUB_RANGE";
            case AbstractOp::END_ENCODE_SUB_RANGE:
                return "END_ENCODE_SUB_RANGE";
            case AbstractOp::BEGIN_DECODE_SUB_RANGE:
                return "BEGIN_DECODE_SUB_RANGE";
            case AbstractOp::END_DECODE_SUB_RANGE:
                return "END_DECODE_SUB_RANGE";
            case AbstractOp::SEEK_ENCODER:
                return "SEEK_ENCODER";
            case AbstractOp::SEEK_DECODER:
                return "SEEK_DECODER";
            case AbstractOp::FIELD_AVAILABLE:
                return "FIELD_AVAILABLE";
            case AbstractOp::PHI:
                return "PHI";
            case AbstractOp::PROPERTY_FUNCTION:
                return "PROPERTY_FUNCTION";
            case AbstractOp::DEFINE_FALLBACK:
                return "DEFINE_FALLBACK";
            case AbstractOp::END_FALLBACK:
                return "END_FALLBACK";
            case AbstractOp::DEFINE_COND_BLOCK:
                return "DEFINE_COND_BLOCK";
            case AbstractOp::END_COND_BLOCK:
                return "END_COND_BLOCK";
        }
        return "";
    }

    constexpr std::optional<AbstractOp> AbstractOp_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "METADATA") {
            return AbstractOp::METADATA;
        }
        if (str == "IMPORT") {
            return AbstractOp::IMPORT;
        }
        if (str == "DYNAMIC_ENDIAN") {
            return AbstractOp::DYNAMIC_ENDIAN;
        }
        if (str == "RETURN_TYPE") {
            return AbstractOp::RETURN_TYPE;
        }
        if (str == "DEFINE_PROGRAM") {
            return AbstractOp::DEFINE_PROGRAM;
        }
        if (str == "END_PROGRAM") {
            return AbstractOp::END_PROGRAM;
        }
        if (str == "DECLARE_PROGRAM") {
            return AbstractOp::DECLARE_PROGRAM;
        }
        if (str == "DEFINE_FORMAT") {
            return AbstractOp::DEFINE_FORMAT;
        }
        if (str == "END_FORMAT") {
            return AbstractOp::END_FORMAT;
        }
        if (str == "DECLARE_FORMAT") {
            return AbstractOp::DECLARE_FORMAT;
        }
        if (str == "DEFINE_FIELD") {
            return AbstractOp::DEFINE_FIELD;
        }
        if (str == "CONDITIONAL_FIELD") {
            return AbstractOp::CONDITIONAL_FIELD;
        }
        if (str == "CONDITIONAL_PROPERTY") {
            return AbstractOp::CONDITIONAL_PROPERTY;
        }
        if (str == "MERGED_CONDITIONAL_FIELD") {
            return AbstractOp::MERGED_CONDITIONAL_FIELD;
        }
        if (str == "DEFINE_PROPERTY") {
            return AbstractOp::DEFINE_PROPERTY;
        }
        if (str == "END_PROPERTY") {
            return AbstractOp::END_PROPERTY;
        }
        if (str == "DECLARE_PROPERTY") {
            return AbstractOp::DECLARE_PROPERTY;
        }
        if (str == "DEFINE_PROPERTY_SETTER") {
            return AbstractOp::DEFINE_PROPERTY_SETTER;
        }
        if (str == "DEFINE_PROPERTY_GETTER") {
            return AbstractOp::DEFINE_PROPERTY_GETTER;
        }
        if (str == "DEFINE_PARAMETER") {
            return AbstractOp::DEFINE_PARAMETER;
        }
        if (str == "DEFINE_FUNCTION") {
            return AbstractOp::DEFINE_FUNCTION;
        }
        if (str == "END_FUNCTION") {
            return AbstractOp::END_FUNCTION;
        }
        if (str == "DECLARE_FUNCTION") {
            return AbstractOp::DECLARE_FUNCTION;
        }
        if (str == "DEFINE_ENUM") {
            return AbstractOp::DEFINE_ENUM;
        }
        if (str == "END_ENUM") {
            return AbstractOp::END_ENUM;
        }
        if (str == "DECLARE_ENUM") {
            return AbstractOp::DECLARE_ENUM;
        }
        if (str == "DEFINE_ENUM_MEMBER") {
            return AbstractOp::DEFINE_ENUM_MEMBER;
        }
        if (str == "DEFINE_UNION") {
            return AbstractOp::DEFINE_UNION;
        }
        if (str == "END_UNION") {
            return AbstractOp::END_UNION;
        }
        if (str == "DECLARE_UNION") {
            return AbstractOp::DECLARE_UNION;
        }
        if (str == "DEFINE_UNION_MEMBER") {
            return AbstractOp::DEFINE_UNION_MEMBER;
        }
        if (str == "END_UNION_MEMBER") {
            return AbstractOp::END_UNION_MEMBER;
        }
        if (str == "DECLARE_UNION_MEMBER") {
            return AbstractOp::DECLARE_UNION_MEMBER;
        }
        if (str == "DEFINE_STATE") {
            return AbstractOp::DEFINE_STATE;
        }
        if (str == "END_STATE") {
            return AbstractOp::END_STATE;
        }
        if (str == "DECLARE_STATE") {
            return AbstractOp::DECLARE_STATE;
        }
        if (str == "DEFINE_BIT_FIELD") {
            return AbstractOp::DEFINE_BIT_FIELD;
        }
        if (str == "END_BIT_FIELD") {
            return AbstractOp::END_BIT_FIELD;
        }
        if (str == "DECLARE_BIT_FIELD") {
            return AbstractOp::DECLARE_BIT_FIELD;
        }
        if (str == "BEGIN_ENCODE_PACKED_OPERATION") {
            return AbstractOp::BEGIN_ENCODE_PACKED_OPERATION;
        }
        if (str == "END_ENCODE_PACKED_OPERATION") {
            return AbstractOp::END_ENCODE_PACKED_OPERATION;
        }
        if (str == "BEGIN_DECODE_PACKED_OPERATION") {
            return AbstractOp::BEGIN_DECODE_PACKED_OPERATION;
        }
        if (str == "END_DECODE_PACKED_OPERATION") {
            return AbstractOp::END_DECODE_PACKED_OPERATION;
        }
        if (str == "DEFINE_ENCODER") {
            return AbstractOp::DEFINE_ENCODER;
        }
        if (str == "DEFINE_DECODER") {
            return AbstractOp::DEFINE_DECODER;
        }
        if (str == "ENCODE_INT") {
            return AbstractOp::ENCODE_INT;
        }
        if (str == "DECODE_INT") {
            return AbstractOp::DECODE_INT;
        }
        if (str == "ENCODE_INT_VECTOR") {
            return AbstractOp::ENCODE_INT_VECTOR;
        }
        if (str == "ENCODE_INT_VECTOR_FIXED") {
            return AbstractOp::ENCODE_INT_VECTOR_FIXED;
        }
        if (str == "DECODE_INT_VECTOR") {
            return AbstractOp::DECODE_INT_VECTOR;
        }
        if (str == "DECODE_INT_VECTOR_UNTIL_EOF") {
            return AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF;
        }
        if (str == "DECODE_INT_VECTOR_FIXED") {
            return AbstractOp::DECODE_INT_VECTOR_FIXED;
        }
        if (str == "PEEK_INT_VECTOR") {
            return AbstractOp::PEEK_INT_VECTOR;
        }
        if (str == "BACKWARD_INPUT") {
            return AbstractOp::BACKWARD_INPUT;
        }
        if (str == "BACKWARD_OUTPUT") {
            return AbstractOp::BACKWARD_OUTPUT;
        }
        if (str == "INPUT_BYTE_OFFSET") {
            return AbstractOp::INPUT_BYTE_OFFSET;
        }
        if (str == "OUTPUT_BYTE_OFFSET") {
            return AbstractOp::OUTPUT_BYTE_OFFSET;
        }
        if (str == "INPUT_BIT_OFFSET") {
            return AbstractOp::INPUT_BIT_OFFSET;
        }
        if (str == "OUTPUT_BIT_OFFSET") {
            return AbstractOp::OUTPUT_BIT_OFFSET;
        }
        if (str == "REMAIN_BYTES") {
            return AbstractOp::REMAIN_BYTES;
        }
        if (str == "CAN_READ") {
            return AbstractOp::CAN_READ;
        }
        if (str == "IS_LITTLE_ENDIAN") {
            return AbstractOp::IS_LITTLE_ENDIAN;
        }
        if (str == "CALL_ENCODE") {
            return AbstractOp::CALL_ENCODE;
        }
        if (str == "CALL_DECODE") {
            return AbstractOp::CALL_DECODE;
        }
        if (str == "CAST") {
            return AbstractOp::CAST;
        }
        if (str == "CALL_CAST") {
            return AbstractOp::CALL_CAST;
        }
        if (str == "ADDRESS_OF") {
            return AbstractOp::ADDRESS_OF;
        }
        if (str == "OPTIONAL_OF") {
            return AbstractOp::OPTIONAL_OF;
        }
        if (str == "EMPTY_PTR") {
            return AbstractOp::EMPTY_PTR;
        }
        if (str == "EMPTY_OPTIONAL") {
            return AbstractOp::EMPTY_OPTIONAL;
        }
        if (str == "LOOP_INFINITE") {
            return AbstractOp::LOOP_INFINITE;
        }
        if (str == "LOOP_CONDITION") {
            return AbstractOp::LOOP_CONDITION;
        }
        if (str == "CONTINUE") {
            return AbstractOp::CONTINUE;
        }
        if (str == "BREAK") {
            return AbstractOp::BREAK;
        }
        if (str == "END_LOOP") {
            return AbstractOp::END_LOOP;
        }
        if (str == "IF") {
            return AbstractOp::IF;
        }
        if (str == "ELIF") {
            return AbstractOp::ELIF;
        }
        if (str == "ELSE") {
            return AbstractOp::ELSE;
        }
        if (str == "END_IF") {
            return AbstractOp::END_IF;
        }
        if (str == "MATCH") {
            return AbstractOp::MATCH;
        }
        if (str == "EXHAUSTIVE_MATCH") {
            return AbstractOp::EXHAUSTIVE_MATCH;
        }
        if (str == "CASE") {
            return AbstractOp::CASE;
        }
        if (str == "END_CASE") {
            return AbstractOp::END_CASE;
        }
        if (str == "DEFAULT_CASE") {
            return AbstractOp::DEFAULT_CASE;
        }
        if (str == "END_MATCH") {
            return AbstractOp::END_MATCH;
        }
        if (str == "DEFINE_VARIABLE") {
            return AbstractOp::DEFINE_VARIABLE;
        }
        if (str == "DEFINE_VARIABLE_REF") {
            return AbstractOp::DEFINE_VARIABLE_REF;
        }
        if (str == "DEFINE_CONSTANT") {
            return AbstractOp::DEFINE_CONSTANT;
        }
        if (str == "DECLARE_VARIABLE") {
            return AbstractOp::DECLARE_VARIABLE;
        }
        if (str == "BINARY") {
            return AbstractOp::BINARY;
        }
        if (str == "NOT_PREV_THEN") {
            return AbstractOp::NOT_PREV_THEN;
        }
        if (str == "UNARY") {
            return AbstractOp::UNARY;
        }
        if (str == "ASSIGN") {
            return AbstractOp::ASSIGN;
        }
        if (str == "PROPERTY_ASSIGN") {
            return AbstractOp::PROPERTY_ASSIGN;
        }
        if (str == "ASSERT") {
            return AbstractOp::ASSERT;
        }
        if (str == "LENGTH_CHECK") {
            return AbstractOp::LENGTH_CHECK;
        }
        if (str == "EXPLICIT_ERROR") {
            return AbstractOp::EXPLICIT_ERROR;
        }
        if (str == "ACCESS") {
            return AbstractOp::ACCESS;
        }
        if (str == "INDEX") {
            return AbstractOp::INDEX;
        }
        if (str == "APPEND") {
            return AbstractOp::APPEND;
        }
        if (str == "INC") {
            return AbstractOp::INC;
        }
        if (str == "CALL") {
            return AbstractOp::CALL;
        }
        if (str == "RET") {
            return AbstractOp::RET;
        }
        if (str == "RET_SUCCESS") {
            return AbstractOp::RET_SUCCESS;
        }
        if (str == "RET_PROPERTY_SETTER_OK") {
            return AbstractOp::RET_PROPERTY_SETTER_OK;
        }
        if (str == "RET_PROPERTY_SETTER_FAIL") {
            return AbstractOp::RET_PROPERTY_SETTER_FAIL;
        }
        if (str == "IMMEDIATE_TRUE") {
            return AbstractOp::IMMEDIATE_TRUE;
        }
        if (str == "IMMEDIATE_FALSE") {
            return AbstractOp::IMMEDIATE_FALSE;
        }
        if (str == "IMMEDIATE_INT") {
            return AbstractOp::IMMEDIATE_INT;
        }
        if (str == "IMMEDIATE_INT64") {
            return AbstractOp::IMMEDIATE_INT64;
        }
        if (str == "IMMEDIATE_CHAR") {
            return AbstractOp::IMMEDIATE_CHAR;
        }
        if (str == "IMMEDIATE_STRING") {
            return AbstractOp::IMMEDIATE_STRING;
        }
        if (str == "IMMEDIATE_TYPE") {
            return AbstractOp::IMMEDIATE_TYPE;
        }
        if (str == "NEW_OBJECT") {
            return AbstractOp::NEW_OBJECT;
        }
        if (str == "INIT_RECURSIVE_STRUCT") {
            return AbstractOp::INIT_RECURSIVE_STRUCT;
        }
        if (str == "CHECK_RECURSIVE_STRUCT") {
            return AbstractOp::CHECK_RECURSIVE_STRUCT;
        }
        if (str == "SWITCH_UNION") {
            return AbstractOp::SWITCH_UNION;
        }
        if (str == "CHECK_UNION") {
            return AbstractOp::CHECK_UNION;
        }
        if (str == "ENCODER_PARAMETER") {
            return AbstractOp::ENCODER_PARAMETER;
        }
        if (str == "DECODER_PARAMETER") {
            return AbstractOp::DECODER_PARAMETER;
        }
        if (str == "STATE_VARIABLE_PARAMETER") {
            return AbstractOp::STATE_VARIABLE_PARAMETER;
        }
        if (str == "PROPERTY_INPUT_PARAMETER") {
            return AbstractOp::PROPERTY_INPUT_PARAMETER;
        }
        if (str == "EVAL_EXPR") {
            return AbstractOp::EVAL_EXPR;
        }
        if (str == "ARRAY_SIZE") {
            return AbstractOp::ARRAY_SIZE;
        }
        if (str == "RESERVE_SIZE") {
            return AbstractOp::RESERVE_SIZE;
        }
        if (str == "BEGIN_ENCODE_SUB_RANGE") {
            return AbstractOp::BEGIN_ENCODE_SUB_RANGE;
        }
        if (str == "END_ENCODE_SUB_RANGE") {
            return AbstractOp::END_ENCODE_SUB_RANGE;
        }
        if (str == "BEGIN_DECODE_SUB_RANGE") {
            return AbstractOp::BEGIN_DECODE_SUB_RANGE;
        }
        if (str == "END_DECODE_SUB_RANGE") {
            return AbstractOp::END_DECODE_SUB_RANGE;
        }
        if (str == "SEEK_ENCODER") {
            return AbstractOp::SEEK_ENCODER;
        }
        if (str == "SEEK_DECODER") {
            return AbstractOp::SEEK_DECODER;
        }
        if (str == "FIELD_AVAILABLE") {
            return AbstractOp::FIELD_AVAILABLE;
        }
        if (str == "PHI") {
            return AbstractOp::PHI;
        }
        if (str == "PROPERTY_FUNCTION") {
            return AbstractOp::PROPERTY_FUNCTION;
        }
        if (str == "DEFINE_FALLBACK") {
            return AbstractOp::DEFINE_FALLBACK;
        }
        if (str == "END_FALLBACK") {
            return AbstractOp::END_FALLBACK;
        }
        if (str == "DEFINE_COND_BLOCK") {
            return AbstractOp::DEFINE_COND_BLOCK;
        }
        if (str == "END_COND_BLOCK") {
            return AbstractOp::END_COND_BLOCK;
        }
        return std::nullopt;
    }
    enum class SubRangeType : std::uint8_t {
        byte_len = 0,
        replacement = 1,
    };
    constexpr const char* to_string(SubRangeType e) {
        switch (e) {
            case SubRangeType::byte_len:
                return "byte_len";
            case SubRangeType::replacement:
                return "replacement";
        }
        return "";
    }

    constexpr std::optional<SubRangeType> SubRangeType_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "byte_len") {
            return SubRangeType::byte_len;
        }
        if (str == "replacement") {
            return SubRangeType::replacement;
        }
        return std::nullopt;
    }
    enum class CastType : std::uint8_t {
        ENUM_TO_INT = 0,
        INT_TO_ENUM = 1,
        FLOAT_TO_INT_BIT = 2,
        INT_TO_FLOAT_BIT = 3,
        VECTOR_TO_ARRAY = 4,
        ARRAY_TO_VECTOR = 5,
        INT_TO_VECTOR = 6,
        INT_TO_ARRAY = 7,
        SMALL_INT_TO_LARGE_INT = 8,
        LARGE_INT_TO_SMALL_INT = 9,
        SIGNED_TO_UNSIGNED = 10,
        UNSIGNED_TO_SIGNED = 11,
        ONE_BIT_TO_INT = 12,
        INT_TO_ONE_BIT = 13,
        BOOL_TO_INT = 14,
        INT_TO_BOOL = 15,
        STRUCT_TO_RECURSIVE_STRUCT = 16,
        RECURSIVE_STRUCT_TO_STRUCT = 17,
        OTHER = 18,
    };
    constexpr const char* to_string(CastType e) {
        switch (e) {
            case CastType::ENUM_TO_INT:
                return "ENUM_TO_INT";
            case CastType::INT_TO_ENUM:
                return "INT_TO_ENUM";
            case CastType::FLOAT_TO_INT_BIT:
                return "FLOAT_TO_INT_BIT";
            case CastType::INT_TO_FLOAT_BIT:
                return "INT_TO_FLOAT_BIT";
            case CastType::VECTOR_TO_ARRAY:
                return "VECTOR_TO_ARRAY";
            case CastType::ARRAY_TO_VECTOR:
                return "ARRAY_TO_VECTOR";
            case CastType::INT_TO_VECTOR:
                return "INT_TO_VECTOR";
            case CastType::INT_TO_ARRAY:
                return "INT_TO_ARRAY";
            case CastType::SMALL_INT_TO_LARGE_INT:
                return "SMALL_INT_TO_LARGE_INT";
            case CastType::LARGE_INT_TO_SMALL_INT:
                return "LARGE_INT_TO_SMALL_INT";
            case CastType::SIGNED_TO_UNSIGNED:
                return "SIGNED_TO_UNSIGNED";
            case CastType::UNSIGNED_TO_SIGNED:
                return "UNSIGNED_TO_SIGNED";
            case CastType::ONE_BIT_TO_INT:
                return "ONE_BIT_TO_INT";
            case CastType::INT_TO_ONE_BIT:
                return "INT_TO_ONE_BIT";
            case CastType::BOOL_TO_INT:
                return "BOOL_TO_INT";
            case CastType::INT_TO_BOOL:
                return "INT_TO_BOOL";
            case CastType::STRUCT_TO_RECURSIVE_STRUCT:
                return "STRUCT_TO_RECURSIVE_STRUCT";
            case CastType::RECURSIVE_STRUCT_TO_STRUCT:
                return "RECURSIVE_STRUCT_TO_STRUCT";
            case CastType::OTHER:
                return "OTHER";
        }
        return "";
    }

    constexpr std::optional<CastType> CastType_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "ENUM_TO_INT") {
            return CastType::ENUM_TO_INT;
        }
        if (str == "INT_TO_ENUM") {
            return CastType::INT_TO_ENUM;
        }
        if (str == "FLOAT_TO_INT_BIT") {
            return CastType::FLOAT_TO_INT_BIT;
        }
        if (str == "INT_TO_FLOAT_BIT") {
            return CastType::INT_TO_FLOAT_BIT;
        }
        if (str == "VECTOR_TO_ARRAY") {
            return CastType::VECTOR_TO_ARRAY;
        }
        if (str == "ARRAY_TO_VECTOR") {
            return CastType::ARRAY_TO_VECTOR;
        }
        if (str == "INT_TO_VECTOR") {
            return CastType::INT_TO_VECTOR;
        }
        if (str == "INT_TO_ARRAY") {
            return CastType::INT_TO_ARRAY;
        }
        if (str == "SMALL_INT_TO_LARGE_INT") {
            return CastType::SMALL_INT_TO_LARGE_INT;
        }
        if (str == "LARGE_INT_TO_SMALL_INT") {
            return CastType::LARGE_INT_TO_SMALL_INT;
        }
        if (str == "SIGNED_TO_UNSIGNED") {
            return CastType::SIGNED_TO_UNSIGNED;
        }
        if (str == "UNSIGNED_TO_SIGNED") {
            return CastType::UNSIGNED_TO_SIGNED;
        }
        if (str == "ONE_BIT_TO_INT") {
            return CastType::ONE_BIT_TO_INT;
        }
        if (str == "INT_TO_ONE_BIT") {
            return CastType::INT_TO_ONE_BIT;
        }
        if (str == "BOOL_TO_INT") {
            return CastType::BOOL_TO_INT;
        }
        if (str == "INT_TO_BOOL") {
            return CastType::INT_TO_BOOL;
        }
        if (str == "STRUCT_TO_RECURSIVE_STRUCT") {
            return CastType::STRUCT_TO_RECURSIVE_STRUCT;
        }
        if (str == "RECURSIVE_STRUCT_TO_STRUCT") {
            return CastType::RECURSIVE_STRUCT_TO_STRUCT;
        }
        if (str == "OTHER") {
            return CastType::OTHER;
        }
        return std::nullopt;
    }
    struct BMContext {
        Endian global_endian{};
        BitOrder global_bit_order{};
        bool has_dynamic_endian = false;
        bool has_dynamic_bit_order = false;
        bool inner_bit_operations = false;
        std::uint64_t bit_offset = 0;
    };
    enum class StorageType : std::uint8_t {
        INT = 0,
        UINT = 1,
        FLOAT = 2,
        STRUCT_REF = 3,
        RECURSIVE_STRUCT_REF = 4,
        BOOL = 5,
        ENUM = 6,
        ARRAY = 7,
        VECTOR = 8,
        VARIANT = 9,
        CODER_RETURN = 10,
        PROPERTY_SETTER_RETURN = 11,
        OPTIONAL = 12,
        PTR = 13,
    };
    constexpr const char* to_string(StorageType e) {
        switch (e) {
            case StorageType::INT:
                return "INT";
            case StorageType::UINT:
                return "UINT";
            case StorageType::FLOAT:
                return "FLOAT";
            case StorageType::STRUCT_REF:
                return "STRUCT_REF";
            case StorageType::RECURSIVE_STRUCT_REF:
                return "RECURSIVE_STRUCT_REF";
            case StorageType::BOOL:
                return "BOOL";
            case StorageType::ENUM:
                return "ENUM";
            case StorageType::ARRAY:
                return "ARRAY";
            case StorageType::VECTOR:
                return "VECTOR";
            case StorageType::VARIANT:
                return "VARIANT";
            case StorageType::CODER_RETURN:
                return "CODER_RETURN";
            case StorageType::PROPERTY_SETTER_RETURN:
                return "PROPERTY_SETTER_RETURN";
            case StorageType::OPTIONAL:
                return "OPTIONAL";
            case StorageType::PTR:
                return "PTR";
        }
        return "";
    }

    constexpr std::optional<StorageType> StorageType_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "INT") {
            return StorageType::INT;
        }
        if (str == "UINT") {
            return StorageType::UINT;
        }
        if (str == "FLOAT") {
            return StorageType::FLOAT;
        }
        if (str == "STRUCT_REF") {
            return StorageType::STRUCT_REF;
        }
        if (str == "RECURSIVE_STRUCT_REF") {
            return StorageType::RECURSIVE_STRUCT_REF;
        }
        if (str == "BOOL") {
            return StorageType::BOOL;
        }
        if (str == "ENUM") {
            return StorageType::ENUM;
        }
        if (str == "ARRAY") {
            return StorageType::ARRAY;
        }
        if (str == "VECTOR") {
            return StorageType::VECTOR;
        }
        if (str == "VARIANT") {
            return StorageType::VARIANT;
        }
        if (str == "CODER_RETURN") {
            return StorageType::CODER_RETURN;
        }
        if (str == "PROPERTY_SETTER_RETURN") {
            return StorageType::PROPERTY_SETTER_RETURN;
        }
        if (str == "OPTIONAL") {
            return StorageType::OPTIONAL;
        }
        if (str == "PTR") {
            return StorageType::PTR;
        }
        return std::nullopt;
    }
    enum class MergeMode : std::uint8_t {
        COMMON_TYPE = 0,
        STRICT_TYPE = 1,
        STRICT_COMMON_TYPE = 2,
    };
    constexpr const char* to_string(MergeMode e) {
        switch (e) {
            case MergeMode::COMMON_TYPE:
                return "COMMON_TYPE";
            case MergeMode::STRICT_TYPE:
                return "STRICT_TYPE";
            case MergeMode::STRICT_COMMON_TYPE:
                return "STRICT_COMMON_TYPE";
        }
        return "";
    }

    constexpr std::optional<MergeMode> MergeMode_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "COMMON_TYPE") {
            return MergeMode::COMMON_TYPE;
        }
        if (str == "STRICT_TYPE") {
            return MergeMode::STRICT_TYPE;
        }
        if (str == "STRICT_COMMON_TYPE") {
            return MergeMode::STRICT_COMMON_TYPE;
        }
        return std::nullopt;
    }
    enum class PackedOpType : std::uint8_t {
        FIXED = 0,
        VARIABLE = 1,
    };
    constexpr const char* to_string(PackedOpType e) {
        switch (e) {
            case PackedOpType::FIXED:
                return "FIXED";
            case PackedOpType::VARIABLE:
                return "VARIABLE";
        }
        return "";
    }

    constexpr std::optional<PackedOpType> PackedOpType_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "FIXED") {
            return PackedOpType::FIXED;
        }
        if (str == "VARIABLE") {
            return PackedOpType::VARIABLE;
        }
        return std::nullopt;
    }
    enum class UnionCheckAt : std::uint8_t {
        PROPERTY_GETTER_PTR = 0,
        PROPERTY_GETTER_OPTIONAL = 1,
        ENCODER = 2,
    };
    constexpr const char* to_string(UnionCheckAt e) {
        switch (e) {
            case UnionCheckAt::PROPERTY_GETTER_PTR:
                return "PROPERTY_GETTER_PTR";
            case UnionCheckAt::PROPERTY_GETTER_OPTIONAL:
                return "PROPERTY_GETTER_OPTIONAL";
            case UnionCheckAt::ENCODER:
                return "ENCODER";
        }
        return "";
    }

    constexpr std::optional<UnionCheckAt> UnionCheckAt_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "PROPERTY_GETTER_PTR") {
            return UnionCheckAt::PROPERTY_GETTER_PTR;
        }
        if (str == "PROPERTY_GETTER_OPTIONAL") {
            return UnionCheckAt::PROPERTY_GETTER_OPTIONAL;
        }
        if (str == "ENCODER") {
            return UnionCheckAt::ENCODER;
        }
        return std::nullopt;
    }
    enum class FunctionType : std::uint8_t {
        FREE = 0,
        MEMBER = 1,
        ENCODE = 2,
        DECODE = 3,
        BIT_GETTER = 4,
        BIT_SETTER = 5,
        UNION_GETTER = 6,
        UNION_SETTER = 7,
        VECTOR_SETTER = 8,
    };
    constexpr const char* to_string(FunctionType e) {
        switch (e) {
            case FunctionType::FREE:
                return "FREE";
            case FunctionType::MEMBER:
                return "MEMBER";
            case FunctionType::ENCODE:
                return "ENCODE";
            case FunctionType::DECODE:
                return "DECODE";
            case FunctionType::BIT_GETTER:
                return "BIT_GETTER";
            case FunctionType::BIT_SETTER:
                return "BIT_SETTER";
            case FunctionType::UNION_GETTER:
                return "UNION_GETTER";
            case FunctionType::UNION_SETTER:
                return "UNION_SETTER";
            case FunctionType::VECTOR_SETTER:
                return "VECTOR_SETTER";
        }
        return "";
    }

    constexpr std::optional<FunctionType> FunctionType_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "FREE") {
            return FunctionType::FREE;
        }
        if (str == "MEMBER") {
            return FunctionType::MEMBER;
        }
        if (str == "ENCODE") {
            return FunctionType::ENCODE;
        }
        if (str == "DECODE") {
            return FunctionType::DECODE;
        }
        if (str == "BIT_GETTER") {
            return FunctionType::BIT_GETTER;
        }
        if (str == "BIT_SETTER") {
            return FunctionType::BIT_SETTER;
        }
        if (str == "UNION_GETTER") {
            return FunctionType::UNION_GETTER;
        }
        if (str == "UNION_SETTER") {
            return FunctionType::UNION_SETTER;
        }
        if (str == "VECTOR_SETTER") {
            return FunctionType::VECTOR_SETTER;
        }
        return std::nullopt;
    }
    struct Varint;
    struct DecodeParamFlags;
    struct EncodeParamFlags;
    struct Range;
    struct String;
    struct IdentIndex;
    struct Storage;
    struct Metadata;
    struct Param;
    struct PhiParam;
    struct EndianExpr;
    struct StorageRef;
    struct RangePacked;
    struct Loc;
    struct StringRef;
    struct Storages;
    struct PhiParams;
    struct StorageRefMap;
    struct StorageRefMaps;
    struct StringRefs;
    struct IdentIndexs;
    struct Ranges;
    struct IdentRange;
    struct IdentRanges;
    struct DebugInfo;
    struct Code;
    struct BinaryModule;
    struct Varint {
        ::futils::binary::flags_t<std::uint64_t, 2, 62> flags_1_;
        bits_flag_alias_method(flags_1_, 0, prefix);
        bits_flag_alias_method(flags_1_, 1, value);
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 0;
    };
    struct DecodeParamFlags {
        ::futils::binary::flags_t<std::uint8_t, 1, 1, 1, 1, 1, 1, 2> flags_2_;
        bits_flag_alias_method(flags_2_, 0, has_seek);
        bits_flag_alias_method(flags_2_, 1, has_peek);
        bits_flag_alias_method(flags_2_, 2, has_eof);
        bits_flag_alias_method(flags_2_, 3, has_remain_bytes);
        bits_flag_alias_method(flags_2_, 4, has_sub_range);
        bits_flag_alias_method(flags_2_, 5, has_offset);
        bits_flag_alias_method(flags_2_, 6, reserved);
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 1;
    };
    struct EncodeParamFlags {
        ::futils::binary::flags_t<std::uint8_t, 1, 1, 1, 5> flags_3_;
        bits_flag_alias_method(flags_3_, 0, has_seek);
        bits_flag_alias_method(flags_3_, 1, has_sub_range);
        bits_flag_alias_method(flags_3_, 2, has_offset);
        bits_flag_alias_method(flags_3_, 3, reserved);
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 1;
    };
    struct Range {
        std::uint64_t start = 0;
        std::uint64_t end = 0;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 16;
    };
    struct String {
        Varint length;
        std::string data;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct IdentIndex {
        Varint ident;
        Varint index;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct Storage {
        StorageType type{};
        struct union_struct_6 {
            Varint size;
        };
        struct union_struct_7 {
            Varint size;
        };
        struct union_struct_8 {
            Varint size;
        };
        struct union_struct_9 {
            Varint size;
            Varint ref;
        };
        struct union_struct_10 {
            Varint ref;
        };
        struct union_struct_11 {
            Varint ref;
        };
        struct union_struct_12 {
            Varint size;
        };
        struct union_struct_13 {
            Varint ref;
            Varint size;
        };
        std::variant<std::monostate, union_struct_6, union_struct_7, union_struct_8, union_struct_9, union_struct_10, union_struct_11, union_struct_12, union_struct_13> union_variant_5;
        std::optional<Varint> ref() const;
        bool ref(Varint&& v);
        bool ref(const Varint& v);
        std::optional<Varint> size() const;
        bool size(Varint&& v);
        bool size(const Varint& v);
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 1;
    };
    struct Metadata {
        Varint name;
        Varint len;
        std::vector<Varint> refs;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct Param {
        Varint len;
        std::vector<Varint> refs;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct PhiParam {
        Varint condition;
        Varint assign;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct EndianExpr {
        ::futils::binary::flags_t<std::uint8_t, 3, 1, 4> flags_14_;
        bits_flag_alias_method_with_enum(flags_14_, 0, endian, Endian);
        bits_flag_alias_method(flags_14_, 1, sign);
        bits_flag_alias_method(flags_14_, 2, reserved);
        Varint dynamic_ref;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 1;
    };
    struct StorageRef {
        Varint ref;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct RangePacked {
        Varint start;
        Varint end;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct Loc {
        Varint ident;
        Varint file_id;
        Varint line;
        Varint column;
        Varint start;
        Varint end;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct StringRef {
        Varint code;
        String string;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct Storages {
        Varint length;
        std::vector<Storage> storages;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct PhiParams {
        Varint length;
        std::vector<PhiParam> params;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct StorageRefMap {
        Varint code;
        Storages storage;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct StorageRefMaps {
        Varint length;
        std::vector<StorageRefMap> maps;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct StringRefs {
        Varint refs_length;
        std::vector<StringRef> refs;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct IdentIndexs {
        Varint refs_length;
        std::vector<IdentIndex> refs;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct Ranges {
        Varint length;
        std::vector<RangePacked> ranges;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct IdentRange {
        Varint ident;
        RangePacked range;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct IdentRanges {
        Varint length;
        std::vector<IdentRange> ranges;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct DebugInfo {
        Varint len_files;
        std::vector<String> files;
        Varint len_locs;
        std::vector<Loc> locs;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct Code {
        AbstractOp op{};
        struct union_struct_17 {
            Metadata metadata;
        };
        struct union_struct_18 {
            Varint ident;
        };
        struct union_struct_19 {
            Varint ident;
            Varint ref;
        };
        struct union_struct_20 {
            Varint ident;
            Varint int_value;
        };
        struct union_struct_21 {
            Varint ident;
            Varint int_value;
        };
        struct union_struct_22 {
            Varint ident;
            std::uint64_t int_value64 = 0;
        };
        struct union_struct_23 {
            Varint ident;
        };
        struct union_struct_24 {
            Varint ident;
        };
        struct union_struct_25 {
            Varint ident;
        };
        struct union_struct_26 {
            Varint ident;
            StorageRef type;
        };
        struct union_struct_27 {
            Varint ident;
        };
        struct union_struct_28 {
            Varint ident;
        };
        struct union_struct_29 {
            Varint ident;
            Varint belong;
            StorageRef type;
        };
        struct union_struct_30 {
            Varint ident;
            Varint belong;
        };
        struct union_struct_31 {
            Varint ident;
            StorageRef type;
        };
        struct union_struct_32 {
            Varint ident;
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_33 {
            Varint ident;
            Varint belong;
            FunctionType func_type{};
        };
        struct union_struct_34 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_35 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_36 {
            Varint ident;
            Varint belong;
        };
        struct union_struct_37 {
            Varint ident;
            Varint ref;
            StorageRef type;
        };
        struct union_struct_38 {
            Varint ident;
            Varint ref;
        };
        struct union_struct_39 {
            Varint ident;
            Varint ref;
            StorageRef type;
        };
        struct union_struct_40 {
            Varint ref;
        };
        struct union_struct_41 {
            Varint ident;
            Varint belong;
            StorageRef type;
        };
        struct union_struct_42 {
            Varint ident;
            Varint belong;
        };
        struct union_struct_43 {
            StorageRef type;
        };
        struct union_struct_44 {
            Varint ident;
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_45 {
            Varint ident;
            BinaryOp bop{};
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_46 {
            Varint ident;
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_47 {
            Varint ident;
            UnaryOp uop{};
            Varint ref;
        };
        struct union_struct_48 {
            Varint ref;
        };
        struct union_struct_49 {
            Varint ident;
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_50 {
            Varint ident;
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_51 {
            Varint ident;
            Varint ref;
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_52 {
            Varint ident;
            Varint ref;
            PhiParams phi_params;
        };
        struct union_struct_53 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_54 {
            Varint ident;
            Varint ref;
        };
        struct union_struct_55 {
            Varint ident;
            Varint ref;
            StorageRef type;
        };
        struct union_struct_56 {
            Varint ident;
        };
        struct union_struct_57 {
            Varint ident;
        };
        struct union_struct_58 {
            Varint ref;
        };
        struct union_struct_59 {
            Varint ref;
        };
        struct union_struct_60 {
            Varint ident;
            Varint ref;
            Varint fallback;
        };
        struct union_struct_61 {
            Varint ref;
            EndianExpr endian;
            Varint bit_size;
            Varint belong;
            Varint fallback;
        };
        struct union_struct_62 {
            Varint left_ref;
            Varint right_ref;
            EndianExpr endian;
            Varint bit_size;
            Varint belong;
            Varint fallback;
        };
        struct union_struct_63 {
            Varint left_ref;
            Varint right_ref;
            EndianExpr endian;
            Varint bit_size;
            Varint belong;
            Varint array_length;
            Varint fallback;
        };
        struct union_struct_64 {
            Varint left_ref;
            Varint right_ref;
            EndianExpr endian;
            Varint bit_size;
            Varint belong;
            Varint fallback;
        };
        struct union_struct_65 {
            Varint left_ref;
            Varint right_ref;
            EndianExpr endian;
            Varint bit_size;
            Varint belong;
            Varint array_length;
            Varint fallback;
        };
        struct union_struct_66 {
            Varint ref;
            EndianExpr endian;
            Varint bit_size;
            Varint belong;
            Varint fallback;
        };
        struct union_struct_67 {
            Varint ref;
            EndianExpr endian;
            Varint bit_size;
            Varint belong;
            Varint fallback;
        };
        struct union_struct_68 {
            Varint left_ref;
            Varint right_ref;
            EndianExpr endian;
            Varint bit_size;
            Varint belong;
        };
        struct union_struct_69 {
            Varint ident;
            Varint ref;
            StorageRef type;
            StorageRef from_type;
            CastType cast_type{};
        };
        struct union_struct_70 {
            Varint ident;
            StorageRef type;
            Param param;
        };
        struct union_struct_71 {
            Varint left_ref;
            Varint right_ref;
            Varint bit_size_plus;
        };
        struct union_struct_72 {
            Varint left_ref;
            Varint right_ref;
            Varint bit_size_plus;
        };
        struct union_struct_73 {
            Varint ref;
        };
        struct union_struct_74 {
            Varint ref;
        };
        struct union_struct_75 {
            Varint ident;
            StorageRef type;
        };
        struct union_struct_76 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_77 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_78 {
            Varint ref;
            Varint belong;
        };
        struct union_struct_79 {
            Varint left_ref;
            Varint right_ref;
            Varint belong;
        };
        struct union_struct_80 {
            Varint ref;
        };
        struct union_struct_81 {
            Varint ref;
        };
        struct union_struct_82 {
            Varint ref;
        };
        struct union_struct_83 {
            Varint ref;
        };
        struct union_struct_84 {
            Varint ref;
        };
        struct union_struct_85 {
            Varint ref;
        };
        struct union_struct_86 {
            Varint ref;
        };
        struct union_struct_87 {
            Varint ref;
        };
        struct union_struct_88 {
            Varint ref;
        };
        struct union_struct_89 {
            Varint ref;
        };
        struct union_struct_90 {
            Varint ident;
            Varint left_ref;
            Varint right_ref;
            Varint belong;
        };
        struct union_struct_91 {
            Varint ident;
            Varint left_ref;
            Varint right_ref;
            Varint belong;
        };
        struct union_struct_92 {
            Varint ident;
            StorageRef type;
            Param param;
            Varint belong;
            MergeMode merge_mode{};
        };
        struct union_struct_93 {
            Varint ref;
        };
        struct union_struct_94 {
            Varint ref;
        };
        struct union_struct_95 {
            Varint ident;
            Varint belong;
            StorageRef type;
        };
        struct union_struct_96 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_97 {
            Varint ident;
            Varint belong;
            PackedOpType packed_op_type{};
            EndianExpr endian;
            Varint bit_size;
            Varint fallback;
        };
        struct union_struct_98 {
            Varint fallback;
        };
        struct union_struct_99 {
            Varint ident;
            Varint belong;
            PackedOpType packed_op_type{};
            EndianExpr endian;
            Varint bit_size;
            Varint fallback;
        };
        struct union_struct_100 {
            Varint fallback;
        };
        struct union_struct_101 {
            Varint ref;
        };
        struct union_struct_102 {
            Varint ref;
            UnionCheckAt check_at{};
        };
        struct union_struct_103 {
            Varint belong;
            Varint ref;
        };
        struct union_struct_104 {
            Varint belong;
        };
        struct union_struct_105 {
            Varint belong;
        };
        struct union_struct_106 {
            Varint belong;
        };
        struct union_struct_107 {
            Varint ref;
        };
        struct union_struct_108 {
            Varint ref;
        };
        struct union_struct_109 {
            Varint left_ref;
            Varint right_ref;
            EncodeParamFlags encode_flags;
        };
        struct union_struct_110 {
            Varint left_ref;
            Varint right_ref;
            DecodeParamFlags decode_flags;
        };
        struct union_struct_111 {
            Varint ident;
            Varint left_ref;
            Varint right_ref;
            StorageRef type;
        };
        struct union_struct_112 {
            Varint ref;
        };
        struct union_struct_113 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_114 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_115 {
            Varint ref;
        };
        struct union_struct_116 {
            Param param;
            Varint belong;
        };
        struct union_struct_117 {
            Varint ident;
            Varint ref;
            Param param;
        };
        struct union_struct_118 {
            Varint ident;
        };
        struct union_struct_119 {
            Varint ident;
        };
        struct union_struct_120 {
            Varint ident;
        };
        struct union_struct_121 {
            Varint ident;
        };
        struct union_struct_122 {
            Varint ident;
            Varint ref;
        };
        struct union_struct_123 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_124 {
            SubRangeType sub_range_type{};
            Varint ref;
            Varint belong;
        };
        struct union_struct_125 {
            SubRangeType sub_range_type{};
            Varint ref;
            Varint belong;
        };
        struct union_struct_126 {
            Varint ref;
            Varint belong;
        };
        struct union_struct_127 {
            Varint ref;
            Varint belong;
        };
        struct union_struct_128 {
            Varint ident;
            Varint belong;
        };
        struct union_struct_129 {
            Varint ident;
            Varint ref;
            Varint fallback;
        };
        struct union_struct_130 {
            Varint ident;
        };
        struct union_struct_131 {
            Varint ident;
        };
        struct union_struct_132 {
            Varint ident;
            Varint ref;
        };
        std::variant<std::monostate, union_struct_17, union_struct_18, union_struct_19, union_struct_20, union_struct_21, union_struct_22, union_struct_23, union_struct_24, union_struct_25, union_struct_26, union_struct_27, union_struct_28, union_struct_29, union_struct_30, union_struct_31, union_struct_32, union_struct_33, union_struct_34, union_struct_35, union_struct_36, union_struct_37, union_struct_38, union_struct_39, union_struct_40, union_struct_41, union_struct_42, union_struct_43, union_struct_44, union_struct_45, union_struct_46, union_struct_47, union_struct_48, union_struct_49, union_struct_50, union_struct_51, union_struct_52, union_struct_53, union_struct_54, union_struct_55, union_struct_56, union_struct_57, union_struct_58, union_struct_59, union_struct_60, union_struct_61, union_struct_62, union_struct_63, union_struct_64, union_struct_65, union_struct_66, union_struct_67, union_struct_68, union_struct_69, union_struct_70, union_struct_71, union_struct_72, union_struct_73, union_struct_74, union_struct_75, union_struct_76, union_struct_77, union_struct_78, union_struct_79, union_struct_80, union_struct_81, union_struct_82, union_struct_83, union_struct_84, union_struct_85, union_struct_86, union_struct_87, union_struct_88, union_struct_89, union_struct_90, union_struct_91, union_struct_92, union_struct_93, union_struct_94, union_struct_95, union_struct_96, union_struct_97, union_struct_98, union_struct_99, union_struct_100, union_struct_101, union_struct_102, union_struct_103, union_struct_104, union_struct_105, union_struct_106, union_struct_107, union_struct_108, union_struct_109, union_struct_110, union_struct_111, union_struct_112, union_struct_113, union_struct_114, union_struct_115, union_struct_116, union_struct_117, union_struct_118, union_struct_119, union_struct_120, union_struct_121, union_struct_122, union_struct_123, union_struct_124, union_struct_125, union_struct_126, union_struct_127, union_struct_128, union_struct_129, union_struct_130, union_struct_131, union_struct_132> union_variant_16;
        std::optional<Varint> array_length() const;
        bool array_length(Varint&& v);
        bool array_length(const Varint& v);
        std::optional<Varint> belong() const;
        bool belong(Varint&& v);
        bool belong(const Varint& v);
        std::optional<Varint> bit_size() const;
        bool bit_size(Varint&& v);
        bool bit_size(const Varint& v);
        std::optional<Varint> bit_size_plus() const;
        bool bit_size_plus(Varint&& v);
        bool bit_size_plus(const Varint& v);
        std::optional<BinaryOp> bop() const;
        bool bop(BinaryOp&& v);
        bool bop(const BinaryOp& v);
        std::optional<CastType> cast_type() const;
        bool cast_type(CastType&& v);
        bool cast_type(const CastType& v);
        std::optional<UnionCheckAt> check_at() const;
        bool check_at(UnionCheckAt&& v);
        bool check_at(const UnionCheckAt& v);
        std::optional<DecodeParamFlags> decode_flags() const;
        bool decode_flags(DecodeParamFlags&& v);
        bool decode_flags(const DecodeParamFlags& v);
        std::optional<EncodeParamFlags> encode_flags() const;
        bool encode_flags(EncodeParamFlags&& v);
        bool encode_flags(const EncodeParamFlags& v);
        std::optional<EndianExpr> endian() const;
        bool endian(EndianExpr&& v);
        bool endian(const EndianExpr& v);
        std::optional<Varint> fallback() const;
        bool fallback(Varint&& v);
        bool fallback(const Varint& v);
        std::optional<StorageRef> from_type() const;
        bool from_type(StorageRef&& v);
        bool from_type(const StorageRef& v);
        std::optional<FunctionType> func_type() const;
        bool func_type(FunctionType&& v);
        bool func_type(const FunctionType& v);
        std::optional<Varint> ident() const;
        bool ident(Varint&& v);
        bool ident(const Varint& v);
        std::optional<Varint> int_value() const;
        bool int_value(Varint&& v);
        bool int_value(const Varint& v);
        std::optional<std::uint64_t> int_value64() const;
        bool int_value64(std::uint64_t&& v);
        bool int_value64(const std::uint64_t& v);
        std::optional<Varint> left_ref() const;
        bool left_ref(Varint&& v);
        bool left_ref(const Varint& v);
        std::optional<MergeMode> merge_mode() const;
        bool merge_mode(MergeMode&& v);
        bool merge_mode(const MergeMode& v);
        std::optional<Metadata> metadata() const;
        bool metadata(Metadata&& v);
        bool metadata(const Metadata& v);
        std::optional<PackedOpType> packed_op_type() const;
        bool packed_op_type(PackedOpType&& v);
        bool packed_op_type(const PackedOpType& v);
        std::optional<Param> param() const;
        bool param(Param&& v);
        bool param(const Param& v);
        std::optional<PhiParams> phi_params() const;
        bool phi_params(PhiParams&& v);
        bool phi_params(const PhiParams& v);
        std::optional<Varint> ref() const;
        bool ref(Varint&& v);
        bool ref(const Varint& v);
        std::optional<Varint> right_ref() const;
        bool right_ref(Varint&& v);
        bool right_ref(const Varint& v);
        std::optional<SubRangeType> sub_range_type() const;
        bool sub_range_type(SubRangeType&& v);
        bool sub_range_type(const SubRangeType& v);
        std::optional<StorageRef> type() const;
        bool type(StorageRef&& v);
        bool type(const StorageRef& v);
        std::optional<UnaryOp> uop() const;
        bool uop(UnaryOp&& v);
        bool uop(const UnaryOp& v);
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 1;
    };
    struct BinaryModule {
        //"RBGM" (4 bytes)
        Varint max_id;
        StringRefs metadata;
        StringRefs strings;
        StringRefs identifiers;
        IdentIndexs ident_indexes;
        StorageRefMaps types;
        Ranges programs;
        IdentRanges ident_ranges;
        ::futils::binary::flags_t<std::uint8_t, 1, 7> flags_133_;
        bits_flag_alias_method(flags_133_, 0, has_debug_info);
        bits_flag_alias_method(flags_133_, 1, reserved);
        struct union_struct_136 {
            DebugInfo debug_info;
        };
        std::variant<std::monostate, union_struct_136> union_variant_135;
        std::optional<DebugInfo> debug_info() const;
        bool debug_info(DebugInfo&& v);
        bool debug_info(const DebugInfo& v);
        Varint code_length;
        std::vector<Code> code;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 4;
    };
    inline std::optional<Varint> Storage::ref() const {
        if (StorageType::INT == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::UINT == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::FLOAT == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_9>(union_variant_5)) {
                return std::nullopt;
            }
            return std::get<4>((*this).union_variant_5).ref;
        }
        if (StorageType::RECURSIVE_STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_10>(union_variant_5)) {
                return std::nullopt;
            }
            return std::get<5>((*this).union_variant_5).ref;
        }
        if (StorageType::ENUM == (*this).type) {
            if (!std::holds_alternative<union_struct_11>(union_variant_5)) {
                return std::nullopt;
            }
            return std::get<6>((*this).union_variant_5).ref;
        }
        if (StorageType::ARRAY == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::VARIANT == (*this).type) {
            if (!std::holds_alternative<union_struct_13>(union_variant_5)) {
                return std::nullopt;
            }
            return std::get<8>((*this).union_variant_5).ref;
        }
        return std::nullopt;
    }
    inline bool Storage::ref(const Varint& v) {
        if (StorageType::INT == (*this).type) {
            return false;
        }
        if (StorageType::UINT == (*this).type) {
            return false;
        }
        if (StorageType::FLOAT == (*this).type) {
            return false;
        }
        if (StorageType::STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_9>(union_variant_5)) {
                union_variant_5 = union_struct_9();
            }
            std::get<4>((*this).union_variant_5).ref = v;
            return true;
        }
        if (StorageType::RECURSIVE_STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_10>(union_variant_5)) {
                union_variant_5 = union_struct_10();
            }
            std::get<5>((*this).union_variant_5).ref = v;
            return true;
        }
        if (StorageType::ENUM == (*this).type) {
            if (!std::holds_alternative<union_struct_11>(union_variant_5)) {
                union_variant_5 = union_struct_11();
            }
            std::get<6>((*this).union_variant_5).ref = v;
            return true;
        }
        if (StorageType::ARRAY == (*this).type) {
            return false;
        }
        if (StorageType::VARIANT == (*this).type) {
            if (!std::holds_alternative<union_struct_13>(union_variant_5)) {
                union_variant_5 = union_struct_13();
            }
            std::get<8>((*this).union_variant_5).ref = v;
            return true;
        }
        return false;
    }
    inline bool Storage::ref(Varint&& v) {
        if (StorageType::INT == (*this).type) {
            return false;
        }
        if (StorageType::UINT == (*this).type) {
            return false;
        }
        if (StorageType::FLOAT == (*this).type) {
            return false;
        }
        if (StorageType::STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_9>(union_variant_5)) {
                union_variant_5 = union_struct_9();
            }
            std::get<4>((*this).union_variant_5).ref = std::move(v);
            return true;
        }
        if (StorageType::RECURSIVE_STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_10>(union_variant_5)) {
                union_variant_5 = union_struct_10();
            }
            std::get<5>((*this).union_variant_5).ref = std::move(v);
            return true;
        }
        if (StorageType::ENUM == (*this).type) {
            if (!std::holds_alternative<union_struct_11>(union_variant_5)) {
                union_variant_5 = union_struct_11();
            }
            std::get<6>((*this).union_variant_5).ref = std::move(v);
            return true;
        }
        if (StorageType::ARRAY == (*this).type) {
            return false;
        }
        if (StorageType::VARIANT == (*this).type) {
            if (!std::holds_alternative<union_struct_13>(union_variant_5)) {
                union_variant_5 = union_struct_13();
            }
            std::get<8>((*this).union_variant_5).ref = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Storage::size() const {
        if (StorageType::INT == (*this).type) {
            if (!std::holds_alternative<union_struct_6>(union_variant_5)) {
                return std::nullopt;
            }
            return std::get<1>((*this).union_variant_5).size;
        }
        if (StorageType::UINT == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_5)) {
                return std::nullopt;
            }
            return std::get<2>((*this).union_variant_5).size;
        }
        if (StorageType::FLOAT == (*this).type) {
            if (!std::holds_alternative<union_struct_8>(union_variant_5)) {
                return std::nullopt;
            }
            return std::get<3>((*this).union_variant_5).size;
        }
        if (StorageType::STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_9>(union_variant_5)) {
                return std::nullopt;
            }
            return std::get<4>((*this).union_variant_5).size;
        }
        if (StorageType::RECURSIVE_STRUCT_REF == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::ENUM == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::ARRAY == (*this).type) {
            if (!std::holds_alternative<union_struct_12>(union_variant_5)) {
                return std::nullopt;
            }
            return std::get<7>((*this).union_variant_5).size;
        }
        if (StorageType::VARIANT == (*this).type) {
            if (!std::holds_alternative<union_struct_13>(union_variant_5)) {
                return std::nullopt;
            }
            return std::get<8>((*this).union_variant_5).size;
        }
        return std::nullopt;
    }
    inline bool Storage::size(const Varint& v) {
        if (StorageType::INT == (*this).type) {
            if (!std::holds_alternative<union_struct_6>(union_variant_5)) {
                union_variant_5 = union_struct_6();
            }
            std::get<1>((*this).union_variant_5).size = v;
            return true;
        }
        if (StorageType::UINT == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_5)) {
                union_variant_5 = union_struct_7();
            }
            std::get<2>((*this).union_variant_5).size = v;
            return true;
        }
        if (StorageType::FLOAT == (*this).type) {
            if (!std::holds_alternative<union_struct_8>(union_variant_5)) {
                union_variant_5 = union_struct_8();
            }
            std::get<3>((*this).union_variant_5).size = v;
            return true;
        }
        if (StorageType::STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_9>(union_variant_5)) {
                union_variant_5 = union_struct_9();
            }
            std::get<4>((*this).union_variant_5).size = v;
            return true;
        }
        if (StorageType::RECURSIVE_STRUCT_REF == (*this).type) {
            return false;
        }
        if (StorageType::ENUM == (*this).type) {
            return false;
        }
        if (StorageType::ARRAY == (*this).type) {
            if (!std::holds_alternative<union_struct_12>(union_variant_5)) {
                union_variant_5 = union_struct_12();
            }
            std::get<7>((*this).union_variant_5).size = v;
            return true;
        }
        if (StorageType::VARIANT == (*this).type) {
            if (!std::holds_alternative<union_struct_13>(union_variant_5)) {
                union_variant_5 = union_struct_13();
            }
            std::get<8>((*this).union_variant_5).size = v;
            return true;
        }
        return false;
    }
    inline bool Storage::size(Varint&& v) {
        if (StorageType::INT == (*this).type) {
            if (!std::holds_alternative<union_struct_6>(union_variant_5)) {
                union_variant_5 = union_struct_6();
            }
            std::get<1>((*this).union_variant_5).size = std::move(v);
            return true;
        }
        if (StorageType::UINT == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_5)) {
                union_variant_5 = union_struct_7();
            }
            std::get<2>((*this).union_variant_5).size = std::move(v);
            return true;
        }
        if (StorageType::FLOAT == (*this).type) {
            if (!std::holds_alternative<union_struct_8>(union_variant_5)) {
                union_variant_5 = union_struct_8();
            }
            std::get<3>((*this).union_variant_5).size = std::move(v);
            return true;
        }
        if (StorageType::STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_9>(union_variant_5)) {
                union_variant_5 = union_struct_9();
            }
            std::get<4>((*this).union_variant_5).size = std::move(v);
            return true;
        }
        if (StorageType::RECURSIVE_STRUCT_REF == (*this).type) {
            return false;
        }
        if (StorageType::ENUM == (*this).type) {
            return false;
        }
        if (StorageType::ARRAY == (*this).type) {
            if (!std::holds_alternative<union_struct_12>(union_variant_5)) {
                union_variant_5 = union_struct_12();
            }
            std::get<7>((*this).union_variant_5).size = std::move(v);
            return true;
        }
        if (StorageType::VARIANT == (*this).type) {
            if (!std::holds_alternative<union_struct_13>(union_variant_5)) {
                union_variant_5 = union_struct_13();
            }
            std::get<8>((*this).union_variant_5).size = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::array_length() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<47>((*this).union_variant_16).array_length;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<49>((*this).union_variant_16).array_length;
        }
        return std::nullopt;
    }
    inline bool Code::array_length(const Varint& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                union_variant_16 = union_struct_63();
            }
            std::get<47>((*this).union_variant_16).array_length = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                union_variant_16 = union_struct_65();
            }
            std::get<49>((*this).union_variant_16).array_length = v;
            return true;
        }
        return false;
    }
    inline bool Code::array_length(Varint&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                union_variant_16 = union_struct_63();
            }
            std::get<47>((*this).union_variant_16).array_length = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                union_variant_16 = union_struct_65();
            }
            std::get<49>((*this).union_variant_16).array_length = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::belong() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<13>((*this).union_variant_16).belong;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_30>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<14>((*this).union_variant_16).belong;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<17>((*this).union_variant_16).belong;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_36>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<20>((*this).union_variant_16).belong;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<25>((*this).union_variant_16).belong;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<26>((*this).union_variant_16).belong;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<45>((*this).union_variant_16).belong;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<46>((*this).union_variant_16).belong;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<47>((*this).union_variant_16).belong;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<48>((*this).union_variant_16).belong;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<49>((*this).union_variant_16).belong;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<50>((*this).union_variant_16).belong;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<51>((*this).union_variant_16).belong;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<52>((*this).union_variant_16).belong;
        }
        if (AbstractOp::CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            if (!std::holds_alternative<union_struct_78>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<62>((*this).union_variant_16).belong;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            if (!std::holds_alternative<union_struct_79>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<63>((*this).union_variant_16).belong;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<74>((*this).union_variant_16).belong;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<75>((*this).union_variant_16).belong;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<76>((*this).union_variant_16).belong;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<79>((*this).union_variant_16).belong;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<81>((*this).union_variant_16).belong;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<83>((*this).union_variant_16).belong;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET == (*this).op) {
            if (!std::holds_alternative<union_struct_103>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<87>((*this).union_variant_16).belong;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_104>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<88>((*this).union_variant_16).belong;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            if (!std::holds_alternative<union_struct_105>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<89>((*this).union_variant_16).belong;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            if (!std::holds_alternative<union_struct_106>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<90>((*this).union_variant_16).belong;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            if (!std::holds_alternative<union_struct_116>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<100>((*this).union_variant_16).belong;
        }
        if (AbstractOp::CALL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_124>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<108>((*this).union_variant_16).belong;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_125>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<109>((*this).union_variant_16).belong;
        }
        if (AbstractOp::SEEK_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_126>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<110>((*this).union_variant_16).belong;
        }
        if (AbstractOp::SEEK_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_127>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<111>((*this).union_variant_16).belong;
        }
        if (AbstractOp::CAN_READ == (*this).op) {
            if (!std::holds_alternative<union_struct_128>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<112>((*this).union_variant_16).belong;
        }
        return std::nullopt;
    }
    inline bool Code::belong(const Varint& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_16)) {
                union_variant_16 = union_struct_29();
            }
            std::get<13>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_30>(union_variant_16)) {
                union_variant_16 = union_struct_30();
            }
            std::get<14>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_16)) {
                union_variant_16 = union_struct_33();
            }
            std::get<17>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_36>(union_variant_16)) {
                union_variant_16 = union_struct_36();
            }
            std::get<20>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_16)) {
                union_variant_16 = union_struct_41();
            }
            std::get<25>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_16)) {
                union_variant_16 = union_struct_42();
            }
            std::get<26>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_16)) {
                union_variant_16 = union_struct_61();
            }
            std::get<45>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                union_variant_16 = union_struct_62();
            }
            std::get<46>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                union_variant_16 = union_struct_63();
            }
            std::get<47>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                union_variant_16 = union_struct_64();
            }
            std::get<48>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                union_variant_16 = union_struct_65();
            }
            std::get<49>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_16)) {
                union_variant_16 = union_struct_66();
            }
            std::get<50>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_16)) {
                union_variant_16 = union_struct_67();
            }
            std::get<51>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_16)) {
                union_variant_16 = union_struct_68();
            }
            std::get<52>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            if (!std::holds_alternative<union_struct_78>(union_variant_16)) {
                union_variant_16 = union_struct_78();
            }
            std::get<62>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            if (!std::holds_alternative<union_struct_79>(union_variant_16)) {
                union_variant_16 = union_struct_79();
            }
            std::get<63>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_16)) {
                union_variant_16 = union_struct_90();
            }
            std::get<74>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_16)) {
                union_variant_16 = union_struct_91();
            }
            std::get<75>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_16)) {
                union_variant_16 = union_struct_92();
            }
            std::get<76>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_16)) {
                union_variant_16 = union_struct_95();
            }
            std::get<79>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                union_variant_16 = union_struct_97();
            }
            std::get<81>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                union_variant_16 = union_struct_99();
            }
            std::get<83>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            if (!std::holds_alternative<union_struct_103>(union_variant_16)) {
                union_variant_16 = union_struct_103();
            }
            std::get<87>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_104>(union_variant_16)) {
                union_variant_16 = union_struct_104();
            }
            std::get<88>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            if (!std::holds_alternative<union_struct_105>(union_variant_16)) {
                union_variant_16 = union_struct_105();
            }
            std::get<89>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            if (!std::holds_alternative<union_struct_106>(union_variant_16)) {
                union_variant_16 = union_struct_106();
            }
            std::get<90>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            if (!std::holds_alternative<union_struct_116>(union_variant_16)) {
                union_variant_16 = union_struct_116();
            }
            std::get<100>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::CALL == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_124>(union_variant_16)) {
                union_variant_16 = union_struct_124();
            }
            std::get<108>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_125>(union_variant_16)) {
                union_variant_16 = union_struct_125();
            }
            std::get<109>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::SEEK_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_126>(union_variant_16)) {
                union_variant_16 = union_struct_126();
            }
            std::get<110>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::SEEK_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_127>(union_variant_16)) {
                union_variant_16 = union_struct_127();
            }
            std::get<111>((*this).union_variant_16).belong = v;
            return true;
        }
        if (AbstractOp::CAN_READ == (*this).op) {
            if (!std::holds_alternative<union_struct_128>(union_variant_16)) {
                union_variant_16 = union_struct_128();
            }
            std::get<112>((*this).union_variant_16).belong = v;
            return true;
        }
        return false;
    }
    inline bool Code::belong(Varint&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_16)) {
                union_variant_16 = union_struct_29();
            }
            std::get<13>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_30>(union_variant_16)) {
                union_variant_16 = union_struct_30();
            }
            std::get<14>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_16)) {
                union_variant_16 = union_struct_33();
            }
            std::get<17>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_36>(union_variant_16)) {
                union_variant_16 = union_struct_36();
            }
            std::get<20>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_16)) {
                union_variant_16 = union_struct_41();
            }
            std::get<25>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_16)) {
                union_variant_16 = union_struct_42();
            }
            std::get<26>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_16)) {
                union_variant_16 = union_struct_61();
            }
            std::get<45>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                union_variant_16 = union_struct_62();
            }
            std::get<46>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                union_variant_16 = union_struct_63();
            }
            std::get<47>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                union_variant_16 = union_struct_64();
            }
            std::get<48>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                union_variant_16 = union_struct_65();
            }
            std::get<49>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_16)) {
                union_variant_16 = union_struct_66();
            }
            std::get<50>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_16)) {
                union_variant_16 = union_struct_67();
            }
            std::get<51>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_16)) {
                union_variant_16 = union_struct_68();
            }
            std::get<52>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            if (!std::holds_alternative<union_struct_78>(union_variant_16)) {
                union_variant_16 = union_struct_78();
            }
            std::get<62>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            if (!std::holds_alternative<union_struct_79>(union_variant_16)) {
                union_variant_16 = union_struct_79();
            }
            std::get<63>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_16)) {
                union_variant_16 = union_struct_90();
            }
            std::get<74>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_16)) {
                union_variant_16 = union_struct_91();
            }
            std::get<75>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_16)) {
                union_variant_16 = union_struct_92();
            }
            std::get<76>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_16)) {
                union_variant_16 = union_struct_95();
            }
            std::get<79>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                union_variant_16 = union_struct_97();
            }
            std::get<81>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                union_variant_16 = union_struct_99();
            }
            std::get<83>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            if (!std::holds_alternative<union_struct_103>(union_variant_16)) {
                union_variant_16 = union_struct_103();
            }
            std::get<87>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_104>(union_variant_16)) {
                union_variant_16 = union_struct_104();
            }
            std::get<88>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            if (!std::holds_alternative<union_struct_105>(union_variant_16)) {
                union_variant_16 = union_struct_105();
            }
            std::get<89>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            if (!std::holds_alternative<union_struct_106>(union_variant_16)) {
                union_variant_16 = union_struct_106();
            }
            std::get<90>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            if (!std::holds_alternative<union_struct_116>(union_variant_16)) {
                union_variant_16 = union_struct_116();
            }
            std::get<100>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::CALL == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_124>(union_variant_16)) {
                union_variant_16 = union_struct_124();
            }
            std::get<108>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_125>(union_variant_16)) {
                union_variant_16 = union_struct_125();
            }
            std::get<109>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::SEEK_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_126>(union_variant_16)) {
                union_variant_16 = union_struct_126();
            }
            std::get<110>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::SEEK_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_127>(union_variant_16)) {
                union_variant_16 = union_struct_127();
            }
            std::get<111>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        if (AbstractOp::CAN_READ == (*this).op) {
            if (!std::holds_alternative<union_struct_128>(union_variant_16)) {
                union_variant_16 = union_struct_128();
            }
            std::get<112>((*this).union_variant_16).belong = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::bit_size() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<45>((*this).union_variant_16).bit_size;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<46>((*this).union_variant_16).bit_size;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<47>((*this).union_variant_16).bit_size;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<48>((*this).union_variant_16).bit_size;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<49>((*this).union_variant_16).bit_size;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<50>((*this).union_variant_16).bit_size;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<51>((*this).union_variant_16).bit_size;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<52>((*this).union_variant_16).bit_size;
        }
        if (AbstractOp::CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<81>((*this).union_variant_16).bit_size;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<83>((*this).union_variant_16).bit_size;
        }
        return std::nullopt;
    }
    inline bool Code::bit_size(const Varint& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_16)) {
                union_variant_16 = union_struct_61();
            }
            std::get<45>((*this).union_variant_16).bit_size = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                union_variant_16 = union_struct_62();
            }
            std::get<46>((*this).union_variant_16).bit_size = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                union_variant_16 = union_struct_63();
            }
            std::get<47>((*this).union_variant_16).bit_size = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                union_variant_16 = union_struct_64();
            }
            std::get<48>((*this).union_variant_16).bit_size = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                union_variant_16 = union_struct_65();
            }
            std::get<49>((*this).union_variant_16).bit_size = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_16)) {
                union_variant_16 = union_struct_66();
            }
            std::get<50>((*this).union_variant_16).bit_size = v;
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_16)) {
                union_variant_16 = union_struct_67();
            }
            std::get<51>((*this).union_variant_16).bit_size = v;
            return true;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_16)) {
                union_variant_16 = union_struct_68();
            }
            std::get<52>((*this).union_variant_16).bit_size = v;
            return true;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                union_variant_16 = union_struct_97();
            }
            std::get<81>((*this).union_variant_16).bit_size = v;
            return true;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                union_variant_16 = union_struct_99();
            }
            std::get<83>((*this).union_variant_16).bit_size = v;
            return true;
        }
        return false;
    }
    inline bool Code::bit_size(Varint&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_16)) {
                union_variant_16 = union_struct_61();
            }
            std::get<45>((*this).union_variant_16).bit_size = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                union_variant_16 = union_struct_62();
            }
            std::get<46>((*this).union_variant_16).bit_size = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                union_variant_16 = union_struct_63();
            }
            std::get<47>((*this).union_variant_16).bit_size = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                union_variant_16 = union_struct_64();
            }
            std::get<48>((*this).union_variant_16).bit_size = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                union_variant_16 = union_struct_65();
            }
            std::get<49>((*this).union_variant_16).bit_size = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_16)) {
                union_variant_16 = union_struct_66();
            }
            std::get<50>((*this).union_variant_16).bit_size = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_16)) {
                union_variant_16 = union_struct_67();
            }
            std::get<51>((*this).union_variant_16).bit_size = std::move(v);
            return true;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_16)) {
                union_variant_16 = union_struct_68();
            }
            std::get<52>((*this).union_variant_16).bit_size = std::move(v);
            return true;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                union_variant_16 = union_struct_97();
            }
            std::get<81>((*this).union_variant_16).bit_size = std::move(v);
            return true;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                union_variant_16 = union_struct_99();
            }
            std::get<83>((*this).union_variant_16).bit_size = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::bit_size_plus() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_71>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<55>((*this).union_variant_16).bit_size_plus;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_72>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<56>((*this).union_variant_16).bit_size_plus;
        }
        return std::nullopt;
    }
    inline bool Code::bit_size_plus(const Varint& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_71>(union_variant_16)) {
                union_variant_16 = union_struct_71();
            }
            std::get<55>((*this).union_variant_16).bit_size_plus = v;
            return true;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_72>(union_variant_16)) {
                union_variant_16 = union_struct_72();
            }
            std::get<56>((*this).union_variant_16).bit_size_plus = v;
            return true;
        }
        return false;
    }
    inline bool Code::bit_size_plus(Varint&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_71>(union_variant_16)) {
                union_variant_16 = union_struct_71();
            }
            std::get<55>((*this).union_variant_16).bit_size_plus = std::move(v);
            return true;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_72>(union_variant_16)) {
                union_variant_16 = union_struct_72();
            }
            std::get<56>((*this).union_variant_16).bit_size_plus = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<BinaryOp> Code::bop() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<29>((*this).union_variant_16).bop;
        }
        return std::nullopt;
    }
    inline bool Code::bop(const BinaryOp& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_16)) {
                union_variant_16 = union_struct_45();
            }
            std::get<29>((*this).union_variant_16).bop = v;
            return true;
        }
        return false;
    }
    inline bool Code::bop(BinaryOp&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_16)) {
                union_variant_16 = union_struct_45();
            }
            std::get<29>((*this).union_variant_16).bop = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<CastType> Code::cast_type() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<53>((*this).union_variant_16).cast_type;
        }
        return std::nullopt;
    }
    inline bool Code::cast_type(const CastType& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_16)) {
                union_variant_16 = union_struct_69();
            }
            std::get<53>((*this).union_variant_16).cast_type = v;
            return true;
        }
        return false;
    }
    inline bool Code::cast_type(CastType&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_16)) {
                union_variant_16 = union_struct_69();
            }
            std::get<53>((*this).union_variant_16).cast_type = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<UnionCheckAt> Code::check_at() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_102>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<86>((*this).union_variant_16).check_at;
        }
        return std::nullopt;
    }
    inline bool Code::check_at(const UnionCheckAt& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_102>(union_variant_16)) {
                union_variant_16 = union_struct_102();
            }
            std::get<86>((*this).union_variant_16).check_at = v;
            return true;
        }
        return false;
    }
    inline bool Code::check_at(UnionCheckAt&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_102>(union_variant_16)) {
                union_variant_16 = union_struct_102();
            }
            std::get<86>((*this).union_variant_16).check_at = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<DecodeParamFlags> Code::decode_flags() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_110>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<94>((*this).union_variant_16).decode_flags;
        }
        return std::nullopt;
    }
    inline bool Code::decode_flags(const DecodeParamFlags& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_110>(union_variant_16)) {
                union_variant_16 = union_struct_110();
            }
            std::get<94>((*this).union_variant_16).decode_flags = v;
            return true;
        }
        return false;
    }
    inline bool Code::decode_flags(DecodeParamFlags&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_110>(union_variant_16)) {
                union_variant_16 = union_struct_110();
            }
            std::get<94>((*this).union_variant_16).decode_flags = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<EncodeParamFlags> Code::encode_flags() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_109>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<93>((*this).union_variant_16).encode_flags;
        }
        return std::nullopt;
    }
    inline bool Code::encode_flags(const EncodeParamFlags& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_109>(union_variant_16)) {
                union_variant_16 = union_struct_109();
            }
            std::get<93>((*this).union_variant_16).encode_flags = v;
            return true;
        }
        return false;
    }
    inline bool Code::encode_flags(EncodeParamFlags&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_109>(union_variant_16)) {
                union_variant_16 = union_struct_109();
            }
            std::get<93>((*this).union_variant_16).encode_flags = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<EndianExpr> Code::endian() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<45>((*this).union_variant_16).endian;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<46>((*this).union_variant_16).endian;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<47>((*this).union_variant_16).endian;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<48>((*this).union_variant_16).endian;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<49>((*this).union_variant_16).endian;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<50>((*this).union_variant_16).endian;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<51>((*this).union_variant_16).endian;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<52>((*this).union_variant_16).endian;
        }
        if (AbstractOp::CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<81>((*this).union_variant_16).endian;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<83>((*this).union_variant_16).endian;
        }
        return std::nullopt;
    }
    inline bool Code::endian(const EndianExpr& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_16)) {
                union_variant_16 = union_struct_61();
            }
            std::get<45>((*this).union_variant_16).endian = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                union_variant_16 = union_struct_62();
            }
            std::get<46>((*this).union_variant_16).endian = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                union_variant_16 = union_struct_63();
            }
            std::get<47>((*this).union_variant_16).endian = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                union_variant_16 = union_struct_64();
            }
            std::get<48>((*this).union_variant_16).endian = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                union_variant_16 = union_struct_65();
            }
            std::get<49>((*this).union_variant_16).endian = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_16)) {
                union_variant_16 = union_struct_66();
            }
            std::get<50>((*this).union_variant_16).endian = v;
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_16)) {
                union_variant_16 = union_struct_67();
            }
            std::get<51>((*this).union_variant_16).endian = v;
            return true;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_16)) {
                union_variant_16 = union_struct_68();
            }
            std::get<52>((*this).union_variant_16).endian = v;
            return true;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                union_variant_16 = union_struct_97();
            }
            std::get<81>((*this).union_variant_16).endian = v;
            return true;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                union_variant_16 = union_struct_99();
            }
            std::get<83>((*this).union_variant_16).endian = v;
            return true;
        }
        return false;
    }
    inline bool Code::endian(EndianExpr&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_16)) {
                union_variant_16 = union_struct_61();
            }
            std::get<45>((*this).union_variant_16).endian = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                union_variant_16 = union_struct_62();
            }
            std::get<46>((*this).union_variant_16).endian = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                union_variant_16 = union_struct_63();
            }
            std::get<47>((*this).union_variant_16).endian = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                union_variant_16 = union_struct_64();
            }
            std::get<48>((*this).union_variant_16).endian = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                union_variant_16 = union_struct_65();
            }
            std::get<49>((*this).union_variant_16).endian = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_16)) {
                union_variant_16 = union_struct_66();
            }
            std::get<50>((*this).union_variant_16).endian = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_16)) {
                union_variant_16 = union_struct_67();
            }
            std::get<51>((*this).union_variant_16).endian = std::move(v);
            return true;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_16)) {
                union_variant_16 = union_struct_68();
            }
            std::get<52>((*this).union_variant_16).endian = std::move(v);
            return true;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                union_variant_16 = union_struct_97();
            }
            std::get<81>((*this).union_variant_16).endian = std::move(v);
            return true;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                union_variant_16 = union_struct_99();
            }
            std::get<83>((*this).union_variant_16).endian = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::fallback() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_60>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<44>((*this).union_variant_16).fallback;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<45>((*this).union_variant_16).fallback;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<46>((*this).union_variant_16).fallback;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<47>((*this).union_variant_16).fallback;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<48>((*this).union_variant_16).fallback;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<49>((*this).union_variant_16).fallback;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<50>((*this).union_variant_16).fallback;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<51>((*this).union_variant_16).fallback;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<81>((*this).union_variant_16).fallback;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_98>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<82>((*this).union_variant_16).fallback;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<83>((*this).union_variant_16).fallback;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_100>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<84>((*this).union_variant_16).fallback;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SEEK_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SEEK_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CAN_READ == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IS_LITTLE_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_129>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<113>((*this).union_variant_16).fallback;
        }
        return std::nullopt;
    }
    inline bool Code::fallback(const Varint& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_60>(union_variant_16)) {
                union_variant_16 = union_struct_60();
            }
            std::get<44>((*this).union_variant_16).fallback = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_16)) {
                union_variant_16 = union_struct_61();
            }
            std::get<45>((*this).union_variant_16).fallback = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                union_variant_16 = union_struct_62();
            }
            std::get<46>((*this).union_variant_16).fallback = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                union_variant_16 = union_struct_63();
            }
            std::get<47>((*this).union_variant_16).fallback = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                union_variant_16 = union_struct_64();
            }
            std::get<48>((*this).union_variant_16).fallback = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                union_variant_16 = union_struct_65();
            }
            std::get<49>((*this).union_variant_16).fallback = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_16)) {
                union_variant_16 = union_struct_66();
            }
            std::get<50>((*this).union_variant_16).fallback = v;
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_16)) {
                union_variant_16 = union_struct_67();
            }
            std::get<51>((*this).union_variant_16).fallback = v;
            return true;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                union_variant_16 = union_struct_97();
            }
            std::get<81>((*this).union_variant_16).fallback = v;
            return true;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_98>(union_variant_16)) {
                union_variant_16 = union_struct_98();
            }
            std::get<82>((*this).union_variant_16).fallback = v;
            return true;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                union_variant_16 = union_struct_99();
            }
            std::get<83>((*this).union_variant_16).fallback = v;
            return true;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_100>(union_variant_16)) {
                union_variant_16 = union_struct_100();
            }
            std::get<84>((*this).union_variant_16).fallback = v;
            return true;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            return false;
        }
        if (AbstractOp::SEEK_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::SEEK_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::CAN_READ == (*this).op) {
            return false;
        }
        if (AbstractOp::IS_LITTLE_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_129>(union_variant_16)) {
                union_variant_16 = union_struct_129();
            }
            std::get<113>((*this).union_variant_16).fallback = v;
            return true;
        }
        return false;
    }
    inline bool Code::fallback(Varint&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_60>(union_variant_16)) {
                union_variant_16 = union_struct_60();
            }
            std::get<44>((*this).union_variant_16).fallback = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_16)) {
                union_variant_16 = union_struct_61();
            }
            std::get<45>((*this).union_variant_16).fallback = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                union_variant_16 = union_struct_62();
            }
            std::get<46>((*this).union_variant_16).fallback = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                union_variant_16 = union_struct_63();
            }
            std::get<47>((*this).union_variant_16).fallback = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                union_variant_16 = union_struct_64();
            }
            std::get<48>((*this).union_variant_16).fallback = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                union_variant_16 = union_struct_65();
            }
            std::get<49>((*this).union_variant_16).fallback = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_16)) {
                union_variant_16 = union_struct_66();
            }
            std::get<50>((*this).union_variant_16).fallback = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_16)) {
                union_variant_16 = union_struct_67();
            }
            std::get<51>((*this).union_variant_16).fallback = std::move(v);
            return true;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                union_variant_16 = union_struct_97();
            }
            std::get<81>((*this).union_variant_16).fallback = std::move(v);
            return true;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_98>(union_variant_16)) {
                union_variant_16 = union_struct_98();
            }
            std::get<82>((*this).union_variant_16).fallback = std::move(v);
            return true;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                union_variant_16 = union_struct_99();
            }
            std::get<83>((*this).union_variant_16).fallback = std::move(v);
            return true;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_100>(union_variant_16)) {
                union_variant_16 = union_struct_100();
            }
            std::get<84>((*this).union_variant_16).fallback = std::move(v);
            return true;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            return false;
        }
        if (AbstractOp::SEEK_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::SEEK_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::CAN_READ == (*this).op) {
            return false;
        }
        if (AbstractOp::IS_LITTLE_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_129>(union_variant_16)) {
                union_variant_16 = union_struct_129();
            }
            std::get<113>((*this).union_variant_16).fallback = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<StorageRef> Code::from_type() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<53>((*this).union_variant_16).from_type;
        }
        return std::nullopt;
    }
    inline bool Code::from_type(const StorageRef& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_16)) {
                union_variant_16 = union_struct_69();
            }
            std::get<53>((*this).union_variant_16).from_type = v;
            return true;
        }
        return false;
    }
    inline bool Code::from_type(StorageRef&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_16)) {
                union_variant_16 = union_struct_69();
            }
            std::get<53>((*this).union_variant_16).from_type = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<FunctionType> Code::func_type() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<17>((*this).union_variant_16).func_type;
        }
        return std::nullopt;
    }
    inline bool Code::func_type(const FunctionType& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_16)) {
                union_variant_16 = union_struct_33();
            }
            std::get<17>((*this).union_variant_16).func_type = v;
            return true;
        }
        return false;
    }
    inline bool Code::func_type(FunctionType&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_16)) {
                union_variant_16 = union_struct_33();
            }
            std::get<17>((*this).union_variant_16).func_type = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::ident() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_18>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<2>((*this).union_variant_16).ident;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            if (!std::holds_alternative<union_struct_19>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<3>((*this).union_variant_16).ident;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            if (!std::holds_alternative<union_struct_20>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<4>((*this).union_variant_16).ident;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_21>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<5>((*this).union_variant_16).ident;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            if (!std::holds_alternative<union_struct_22>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<6>((*this).union_variant_16).ident;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            if (!std::holds_alternative<union_struct_23>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<7>((*this).union_variant_16).ident;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            if (!std::holds_alternative<union_struct_24>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<8>((*this).union_variant_16).ident;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            if (!std::holds_alternative<union_struct_25>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<9>((*this).union_variant_16).ident;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_26>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<10>((*this).union_variant_16).ident;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_27>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<11>((*this).union_variant_16).ident;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_28>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<12>((*this).union_variant_16).ident;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<13>((*this).union_variant_16).ident;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_30>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<14>((*this).union_variant_16).ident;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_31>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<15>((*this).union_variant_16).ident;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_32>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<16>((*this).union_variant_16).ident;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<17>((*this).union_variant_16).ident;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_36>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<20>((*this).union_variant_16).ident;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<21>((*this).union_variant_16).ident;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            if (!std::holds_alternative<union_struct_38>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<22>((*this).union_variant_16).ident;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<23>((*this).union_variant_16).ident;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<25>((*this).union_variant_16).ident;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<26>((*this).union_variant_16).ident;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<28>((*this).union_variant_16).ident;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<29>((*this).union_variant_16).ident;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<30>((*this).union_variant_16).ident;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_47>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<31>((*this).union_variant_16).ident;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<33>((*this).union_variant_16).ident;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<34>((*this).union_variant_16).ident;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<35>((*this).union_variant_16).ident;
        }
        if (AbstractOp::PHI == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<36>((*this).union_variant_16).ident;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<38>((*this).union_variant_16).ident;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<39>((*this).union_variant_16).ident;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            if (!std::holds_alternative<union_struct_56>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<40>((*this).union_variant_16).ident;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            if (!std::holds_alternative<union_struct_57>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<41>((*this).union_variant_16).ident;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_60>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<44>((*this).union_variant_16).ident;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<53>((*this).union_variant_16).ident;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_70>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<54>((*this).union_variant_16).ident;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            if (!std::holds_alternative<union_struct_75>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<59>((*this).union_variant_16).ident;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<74>((*this).union_variant_16).ident;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<75>((*this).union_variant_16).ident;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<76>((*this).union_variant_16).ident;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<79>((*this).union_variant_16).ident;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<81>((*this).union_variant_16).ident;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<83>((*this).union_variant_16).ident;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_111>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<95>((*this).union_variant_16).ident;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_117>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<101>((*this).union_variant_16).ident;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_118>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<102>((*this).union_variant_16).ident;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_119>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<103>((*this).union_variant_16).ident;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_120>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<104>((*this).union_variant_16).ident;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_121>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<105>((*this).union_variant_16).ident;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_122>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<106>((*this).union_variant_16).ident;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SEEK_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SEEK_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CAN_READ == (*this).op) {
            if (!std::holds_alternative<union_struct_128>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<112>((*this).union_variant_16).ident;
        }
        if (AbstractOp::IS_LITTLE_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_129>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<113>((*this).union_variant_16).ident;
        }
        if (AbstractOp::REMAIN_BYTES == (*this).op) {
            if (!std::holds_alternative<union_struct_130>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<114>((*this).union_variant_16).ident;
        }
        if (AbstractOp::DEFINE_FALLBACK == (*this).op) {
            if (!std::holds_alternative<union_struct_131>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<115>((*this).union_variant_16).ident;
        }
        if (AbstractOp::DEFINE_COND_BLOCK == (*this).op) {
            if (!std::holds_alternative<union_struct_132>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<116>((*this).union_variant_16).ident;
        }
        return std::nullopt;
    }
    inline bool Code::ident(const Varint& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_18>(union_variant_16)) {
                union_variant_16 = union_struct_18();
            }
            std::get<2>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            if (!std::holds_alternative<union_struct_19>(union_variant_16)) {
                union_variant_16 = union_struct_19();
            }
            std::get<3>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            if (!std::holds_alternative<union_struct_20>(union_variant_16)) {
                union_variant_16 = union_struct_20();
            }
            std::get<4>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_21>(union_variant_16)) {
                union_variant_16 = union_struct_21();
            }
            std::get<5>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            if (!std::holds_alternative<union_struct_22>(union_variant_16)) {
                union_variant_16 = union_struct_22();
            }
            std::get<6>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            if (!std::holds_alternative<union_struct_23>(union_variant_16)) {
                union_variant_16 = union_struct_23();
            }
            std::get<7>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            if (!std::holds_alternative<union_struct_24>(union_variant_16)) {
                union_variant_16 = union_struct_24();
            }
            std::get<8>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            if (!std::holds_alternative<union_struct_25>(union_variant_16)) {
                union_variant_16 = union_struct_25();
            }
            std::get<9>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_26>(union_variant_16)) {
                union_variant_16 = union_struct_26();
            }
            std::get<10>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_27>(union_variant_16)) {
                union_variant_16 = union_struct_27();
            }
            std::get<11>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_28>(union_variant_16)) {
                union_variant_16 = union_struct_28();
            }
            std::get<12>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_16)) {
                union_variant_16 = union_struct_29();
            }
            std::get<13>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_30>(union_variant_16)) {
                union_variant_16 = union_struct_30();
            }
            std::get<14>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_31>(union_variant_16)) {
                union_variant_16 = union_struct_31();
            }
            std::get<15>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_32>(union_variant_16)) {
                union_variant_16 = union_struct_32();
            }
            std::get<16>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_16)) {
                union_variant_16 = union_struct_33();
            }
            std::get<17>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_36>(union_variant_16)) {
                union_variant_16 = union_struct_36();
            }
            std::get<20>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_16)) {
                union_variant_16 = union_struct_37();
            }
            std::get<21>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            if (!std::holds_alternative<union_struct_38>(union_variant_16)) {
                union_variant_16 = union_struct_38();
            }
            std::get<22>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_16)) {
                union_variant_16 = union_struct_39();
            }
            std::get<23>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_16)) {
                union_variant_16 = union_struct_41();
            }
            std::get<25>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_16)) {
                union_variant_16 = union_struct_42();
            }
            std::get<26>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_16)) {
                union_variant_16 = union_struct_44();
            }
            std::get<28>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_16)) {
                union_variant_16 = union_struct_45();
            }
            std::get<29>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_16)) {
                union_variant_16 = union_struct_46();
            }
            std::get<30>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_47>(union_variant_16)) {
                union_variant_16 = union_struct_47();
            }
            std::get<31>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_16)) {
                union_variant_16 = union_struct_49();
            }
            std::get<33>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_16)) {
                union_variant_16 = union_struct_50();
            }
            std::get<34>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_16)) {
                union_variant_16 = union_struct_51();
            }
            std::get<35>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::PHI == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_16)) {
                union_variant_16 = union_struct_52();
            }
            std::get<36>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_16)) {
                union_variant_16 = union_struct_54();
            }
            std::get<38>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_16)) {
                union_variant_16 = union_struct_55();
            }
            std::get<39>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            if (!std::holds_alternative<union_struct_56>(union_variant_16)) {
                union_variant_16 = union_struct_56();
            }
            std::get<40>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            if (!std::holds_alternative<union_struct_57>(union_variant_16)) {
                union_variant_16 = union_struct_57();
            }
            std::get<41>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_60>(union_variant_16)) {
                union_variant_16 = union_struct_60();
            }
            std::get<44>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_16)) {
                union_variant_16 = union_struct_69();
            }
            std::get<53>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_70>(union_variant_16)) {
                union_variant_16 = union_struct_70();
            }
            std::get<54>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            if (!std::holds_alternative<union_struct_75>(union_variant_16)) {
                union_variant_16 = union_struct_75();
            }
            std::get<59>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_16)) {
                union_variant_16 = union_struct_90();
            }
            std::get<74>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_16)) {
                union_variant_16 = union_struct_91();
            }
            std::get<75>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_16)) {
                union_variant_16 = union_struct_92();
            }
            std::get<76>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_16)) {
                union_variant_16 = union_struct_95();
            }
            std::get<79>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                union_variant_16 = union_struct_97();
            }
            std::get<81>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                union_variant_16 = union_struct_99();
            }
            std::get<83>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_111>(union_variant_16)) {
                union_variant_16 = union_struct_111();
            }
            std::get<95>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_117>(union_variant_16)) {
                union_variant_16 = union_struct_117();
            }
            std::get<101>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_118>(union_variant_16)) {
                union_variant_16 = union_struct_118();
            }
            std::get<102>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_119>(union_variant_16)) {
                union_variant_16 = union_struct_119();
            }
            std::get<103>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_120>(union_variant_16)) {
                union_variant_16 = union_struct_120();
            }
            std::get<104>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_121>(union_variant_16)) {
                union_variant_16 = union_struct_121();
            }
            std::get<105>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_122>(union_variant_16)) {
                union_variant_16 = union_struct_122();
            }
            std::get<106>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            return false;
        }
        if (AbstractOp::SEEK_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::SEEK_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::CAN_READ == (*this).op) {
            if (!std::holds_alternative<union_struct_128>(union_variant_16)) {
                union_variant_16 = union_struct_128();
            }
            std::get<112>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::IS_LITTLE_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_129>(union_variant_16)) {
                union_variant_16 = union_struct_129();
            }
            std::get<113>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::REMAIN_BYTES == (*this).op) {
            if (!std::holds_alternative<union_struct_130>(union_variant_16)) {
                union_variant_16 = union_struct_130();
            }
            std::get<114>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_FALLBACK == (*this).op) {
            if (!std::holds_alternative<union_struct_131>(union_variant_16)) {
                union_variant_16 = union_struct_131();
            }
            std::get<115>((*this).union_variant_16).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_COND_BLOCK == (*this).op) {
            if (!std::holds_alternative<union_struct_132>(union_variant_16)) {
                union_variant_16 = union_struct_132();
            }
            std::get<116>((*this).union_variant_16).ident = v;
            return true;
        }
        return false;
    }
    inline bool Code::ident(Varint&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_18>(union_variant_16)) {
                union_variant_16 = union_struct_18();
            }
            std::get<2>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            if (!std::holds_alternative<union_struct_19>(union_variant_16)) {
                union_variant_16 = union_struct_19();
            }
            std::get<3>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            if (!std::holds_alternative<union_struct_20>(union_variant_16)) {
                union_variant_16 = union_struct_20();
            }
            std::get<4>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_21>(union_variant_16)) {
                union_variant_16 = union_struct_21();
            }
            std::get<5>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            if (!std::holds_alternative<union_struct_22>(union_variant_16)) {
                union_variant_16 = union_struct_22();
            }
            std::get<6>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            if (!std::holds_alternative<union_struct_23>(union_variant_16)) {
                union_variant_16 = union_struct_23();
            }
            std::get<7>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            if (!std::holds_alternative<union_struct_24>(union_variant_16)) {
                union_variant_16 = union_struct_24();
            }
            std::get<8>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            if (!std::holds_alternative<union_struct_25>(union_variant_16)) {
                union_variant_16 = union_struct_25();
            }
            std::get<9>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_26>(union_variant_16)) {
                union_variant_16 = union_struct_26();
            }
            std::get<10>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_27>(union_variant_16)) {
                union_variant_16 = union_struct_27();
            }
            std::get<11>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_28>(union_variant_16)) {
                union_variant_16 = union_struct_28();
            }
            std::get<12>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_16)) {
                union_variant_16 = union_struct_29();
            }
            std::get<13>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_30>(union_variant_16)) {
                union_variant_16 = union_struct_30();
            }
            std::get<14>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_31>(union_variant_16)) {
                union_variant_16 = union_struct_31();
            }
            std::get<15>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_32>(union_variant_16)) {
                union_variant_16 = union_struct_32();
            }
            std::get<16>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_16)) {
                union_variant_16 = union_struct_33();
            }
            std::get<17>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_36>(union_variant_16)) {
                union_variant_16 = union_struct_36();
            }
            std::get<20>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_16)) {
                union_variant_16 = union_struct_37();
            }
            std::get<21>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            if (!std::holds_alternative<union_struct_38>(union_variant_16)) {
                union_variant_16 = union_struct_38();
            }
            std::get<22>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_16)) {
                union_variant_16 = union_struct_39();
            }
            std::get<23>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_16)) {
                union_variant_16 = union_struct_41();
            }
            std::get<25>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_16)) {
                union_variant_16 = union_struct_42();
            }
            std::get<26>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_16)) {
                union_variant_16 = union_struct_44();
            }
            std::get<28>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_16)) {
                union_variant_16 = union_struct_45();
            }
            std::get<29>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_16)) {
                union_variant_16 = union_struct_46();
            }
            std::get<30>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_47>(union_variant_16)) {
                union_variant_16 = union_struct_47();
            }
            std::get<31>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_16)) {
                union_variant_16 = union_struct_49();
            }
            std::get<33>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_16)) {
                union_variant_16 = union_struct_50();
            }
            std::get<34>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_16)) {
                union_variant_16 = union_struct_51();
            }
            std::get<35>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::PHI == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_16)) {
                union_variant_16 = union_struct_52();
            }
            std::get<36>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_16)) {
                union_variant_16 = union_struct_54();
            }
            std::get<38>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_16)) {
                union_variant_16 = union_struct_55();
            }
            std::get<39>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            if (!std::holds_alternative<union_struct_56>(union_variant_16)) {
                union_variant_16 = union_struct_56();
            }
            std::get<40>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            if (!std::holds_alternative<union_struct_57>(union_variant_16)) {
                union_variant_16 = union_struct_57();
            }
            std::get<41>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_60>(union_variant_16)) {
                union_variant_16 = union_struct_60();
            }
            std::get<44>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_16)) {
                union_variant_16 = union_struct_69();
            }
            std::get<53>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_70>(union_variant_16)) {
                union_variant_16 = union_struct_70();
            }
            std::get<54>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            if (!std::holds_alternative<union_struct_75>(union_variant_16)) {
                union_variant_16 = union_struct_75();
            }
            std::get<59>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_16)) {
                union_variant_16 = union_struct_90();
            }
            std::get<74>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_16)) {
                union_variant_16 = union_struct_91();
            }
            std::get<75>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_16)) {
                union_variant_16 = union_struct_92();
            }
            std::get<76>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_16)) {
                union_variant_16 = union_struct_95();
            }
            std::get<79>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                union_variant_16 = union_struct_97();
            }
            std::get<81>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                union_variant_16 = union_struct_99();
            }
            std::get<83>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_111>(union_variant_16)) {
                union_variant_16 = union_struct_111();
            }
            std::get<95>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_117>(union_variant_16)) {
                union_variant_16 = union_struct_117();
            }
            std::get<101>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_118>(union_variant_16)) {
                union_variant_16 = union_struct_118();
            }
            std::get<102>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_119>(union_variant_16)) {
                union_variant_16 = union_struct_119();
            }
            std::get<103>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_120>(union_variant_16)) {
                union_variant_16 = union_struct_120();
            }
            std::get<104>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_121>(union_variant_16)) {
                union_variant_16 = union_struct_121();
            }
            std::get<105>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_122>(union_variant_16)) {
                union_variant_16 = union_struct_122();
            }
            std::get<106>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            return false;
        }
        if (AbstractOp::SEEK_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::SEEK_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::CAN_READ == (*this).op) {
            if (!std::holds_alternative<union_struct_128>(union_variant_16)) {
                union_variant_16 = union_struct_128();
            }
            std::get<112>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::IS_LITTLE_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_129>(union_variant_16)) {
                union_variant_16 = union_struct_129();
            }
            std::get<113>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::REMAIN_BYTES == (*this).op) {
            if (!std::holds_alternative<union_struct_130>(union_variant_16)) {
                union_variant_16 = union_struct_130();
            }
            std::get<114>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_FALLBACK == (*this).op) {
            if (!std::holds_alternative<union_struct_131>(union_variant_16)) {
                union_variant_16 = union_struct_131();
            }
            std::get<115>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_COND_BLOCK == (*this).op) {
            if (!std::holds_alternative<union_struct_132>(union_variant_16)) {
                union_variant_16 = union_struct_132();
            }
            std::get<116>((*this).union_variant_16).ident = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::int_value() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            if (!std::holds_alternative<union_struct_20>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<4>((*this).union_variant_16).int_value;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_21>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<5>((*this).union_variant_16).int_value;
        }
        return std::nullopt;
    }
    inline bool Code::int_value(const Varint& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            if (!std::holds_alternative<union_struct_20>(union_variant_16)) {
                union_variant_16 = union_struct_20();
            }
            std::get<4>((*this).union_variant_16).int_value = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_21>(union_variant_16)) {
                union_variant_16 = union_struct_21();
            }
            std::get<5>((*this).union_variant_16).int_value = v;
            return true;
        }
        return false;
    }
    inline bool Code::int_value(Varint&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            if (!std::holds_alternative<union_struct_20>(union_variant_16)) {
                union_variant_16 = union_struct_20();
            }
            std::get<4>((*this).union_variant_16).int_value = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_21>(union_variant_16)) {
                union_variant_16 = union_struct_21();
            }
            std::get<5>((*this).union_variant_16).int_value = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<std::uint64_t> Code::int_value64() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            if (!std::holds_alternative<union_struct_22>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<6>((*this).union_variant_16).int_value64;
        }
        return std::nullopt;
    }
    inline bool Code::int_value64(const std::uint64_t& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            if (!std::holds_alternative<union_struct_22>(union_variant_16)) {
                union_variant_16 = union_struct_22();
            }
            std::get<6>((*this).union_variant_16).int_value64 = v;
            return true;
        }
        return false;
    }
    inline bool Code::int_value64(std::uint64_t&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            if (!std::holds_alternative<union_struct_22>(union_variant_16)) {
                union_variant_16 = union_struct_22();
            }
            std::get<6>((*this).union_variant_16).int_value64 = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::left_ref() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_32>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<16>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_34>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<18>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_35>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<19>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<28>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<29>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<30>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<33>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<34>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<35>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<37>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<46>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<47>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<48>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<49>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<52>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_71>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<55>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_72>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<56>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            if (!std::holds_alternative<union_struct_76>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<60>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            if (!std::holds_alternative<union_struct_77>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<61>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            if (!std::holds_alternative<union_struct_79>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<63>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<74>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<75>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::APPEND == (*this).op) {
            if (!std::holds_alternative<union_struct_96>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<80>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_109>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<93>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_110>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<94>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_111>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<95>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            if (!std::holds_alternative<union_struct_113>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<97>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            if (!std::holds_alternative<union_struct_114>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<98>((*this).union_variant_16).left_ref;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_123>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<107>((*this).union_variant_16).left_ref;
        }
        return std::nullopt;
    }
    inline bool Code::left_ref(const Varint& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_32>(union_variant_16)) {
                union_variant_16 = union_struct_32();
            }
            std::get<16>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_34>(union_variant_16)) {
                union_variant_16 = union_struct_34();
            }
            std::get<18>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_35>(union_variant_16)) {
                union_variant_16 = union_struct_35();
            }
            std::get<19>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_16)) {
                union_variant_16 = union_struct_44();
            }
            std::get<28>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_16)) {
                union_variant_16 = union_struct_45();
            }
            std::get<29>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_16)) {
                union_variant_16 = union_struct_46();
            }
            std::get<30>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_16)) {
                union_variant_16 = union_struct_49();
            }
            std::get<33>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_16)) {
                union_variant_16 = union_struct_50();
            }
            std::get<34>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_16)) {
                union_variant_16 = union_struct_51();
            }
            std::get<35>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_16)) {
                union_variant_16 = union_struct_53();
            }
            std::get<37>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                union_variant_16 = union_struct_62();
            }
            std::get<46>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                union_variant_16 = union_struct_63();
            }
            std::get<47>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                union_variant_16 = union_struct_64();
            }
            std::get<48>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                union_variant_16 = union_struct_65();
            }
            std::get<49>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_16)) {
                union_variant_16 = union_struct_68();
            }
            std::get<52>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_71>(union_variant_16)) {
                union_variant_16 = union_struct_71();
            }
            std::get<55>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_72>(union_variant_16)) {
                union_variant_16 = union_struct_72();
            }
            std::get<56>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            if (!std::holds_alternative<union_struct_76>(union_variant_16)) {
                union_variant_16 = union_struct_76();
            }
            std::get<60>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            if (!std::holds_alternative<union_struct_77>(union_variant_16)) {
                union_variant_16 = union_struct_77();
            }
            std::get<61>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            if (!std::holds_alternative<union_struct_79>(union_variant_16)) {
                union_variant_16 = union_struct_79();
            }
            std::get<63>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_16)) {
                union_variant_16 = union_struct_90();
            }
            std::get<74>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_16)) {
                union_variant_16 = union_struct_91();
            }
            std::get<75>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            if (!std::holds_alternative<union_struct_96>(union_variant_16)) {
                union_variant_16 = union_struct_96();
            }
            std::get<80>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_109>(union_variant_16)) {
                union_variant_16 = union_struct_109();
            }
            std::get<93>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_110>(union_variant_16)) {
                union_variant_16 = union_struct_110();
            }
            std::get<94>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_111>(union_variant_16)) {
                union_variant_16 = union_struct_111();
            }
            std::get<95>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            if (!std::holds_alternative<union_struct_113>(union_variant_16)) {
                union_variant_16 = union_struct_113();
            }
            std::get<97>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            if (!std::holds_alternative<union_struct_114>(union_variant_16)) {
                union_variant_16 = union_struct_114();
            }
            std::get<98>((*this).union_variant_16).left_ref = v;
            return true;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_123>(union_variant_16)) {
                union_variant_16 = union_struct_123();
            }
            std::get<107>((*this).union_variant_16).left_ref = v;
            return true;
        }
        return false;
    }
    inline bool Code::left_ref(Varint&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_32>(union_variant_16)) {
                union_variant_16 = union_struct_32();
            }
            std::get<16>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_34>(union_variant_16)) {
                union_variant_16 = union_struct_34();
            }
            std::get<18>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_35>(union_variant_16)) {
                union_variant_16 = union_struct_35();
            }
            std::get<19>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_16)) {
                union_variant_16 = union_struct_44();
            }
            std::get<28>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_16)) {
                union_variant_16 = union_struct_45();
            }
            std::get<29>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_16)) {
                union_variant_16 = union_struct_46();
            }
            std::get<30>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_16)) {
                union_variant_16 = union_struct_49();
            }
            std::get<33>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_16)) {
                union_variant_16 = union_struct_50();
            }
            std::get<34>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_16)) {
                union_variant_16 = union_struct_51();
            }
            std::get<35>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_16)) {
                union_variant_16 = union_struct_53();
            }
            std::get<37>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                union_variant_16 = union_struct_62();
            }
            std::get<46>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                union_variant_16 = union_struct_63();
            }
            std::get<47>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                union_variant_16 = union_struct_64();
            }
            std::get<48>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                union_variant_16 = union_struct_65();
            }
            std::get<49>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_16)) {
                union_variant_16 = union_struct_68();
            }
            std::get<52>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_71>(union_variant_16)) {
                union_variant_16 = union_struct_71();
            }
            std::get<55>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_72>(union_variant_16)) {
                union_variant_16 = union_struct_72();
            }
            std::get<56>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            if (!std::holds_alternative<union_struct_76>(union_variant_16)) {
                union_variant_16 = union_struct_76();
            }
            std::get<60>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            if (!std::holds_alternative<union_struct_77>(union_variant_16)) {
                union_variant_16 = union_struct_77();
            }
            std::get<61>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            if (!std::holds_alternative<union_struct_79>(union_variant_16)) {
                union_variant_16 = union_struct_79();
            }
            std::get<63>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_16)) {
                union_variant_16 = union_struct_90();
            }
            std::get<74>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_16)) {
                union_variant_16 = union_struct_91();
            }
            std::get<75>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            if (!std::holds_alternative<union_struct_96>(union_variant_16)) {
                union_variant_16 = union_struct_96();
            }
            std::get<80>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_109>(union_variant_16)) {
                union_variant_16 = union_struct_109();
            }
            std::get<93>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_110>(union_variant_16)) {
                union_variant_16 = union_struct_110();
            }
            std::get<94>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_111>(union_variant_16)) {
                union_variant_16 = union_struct_111();
            }
            std::get<95>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            if (!std::holds_alternative<union_struct_113>(union_variant_16)) {
                union_variant_16 = union_struct_113();
            }
            std::get<97>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            if (!std::holds_alternative<union_struct_114>(union_variant_16)) {
                union_variant_16 = union_struct_114();
            }
            std::get<98>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_123>(union_variant_16)) {
                union_variant_16 = union_struct_123();
            }
            std::get<107>((*this).union_variant_16).left_ref = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<MergeMode> Code::merge_mode() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<76>((*this).union_variant_16).merge_mode;
        }
        return std::nullopt;
    }
    inline bool Code::merge_mode(const MergeMode& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_16)) {
                union_variant_16 = union_struct_92();
            }
            std::get<76>((*this).union_variant_16).merge_mode = v;
            return true;
        }
        return false;
    }
    inline bool Code::merge_mode(MergeMode&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_16)) {
                union_variant_16 = union_struct_92();
            }
            std::get<76>((*this).union_variant_16).merge_mode = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Metadata> Code::metadata() const {
        if (AbstractOp::METADATA == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<1>((*this).union_variant_16).metadata;
        }
        return std::nullopt;
    }
    inline bool Code::metadata(const Metadata& v) {
        if (AbstractOp::METADATA == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_16)) {
                union_variant_16 = union_struct_17();
            }
            std::get<1>((*this).union_variant_16).metadata = v;
            return true;
        }
        return false;
    }
    inline bool Code::metadata(Metadata&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_16)) {
                union_variant_16 = union_struct_17();
            }
            std::get<1>((*this).union_variant_16).metadata = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<PackedOpType> Code::packed_op_type() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<81>((*this).union_variant_16).packed_op_type;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<83>((*this).union_variant_16).packed_op_type;
        }
        return std::nullopt;
    }
    inline bool Code::packed_op_type(const PackedOpType& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                union_variant_16 = union_struct_97();
            }
            std::get<81>((*this).union_variant_16).packed_op_type = v;
            return true;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                union_variant_16 = union_struct_99();
            }
            std::get<83>((*this).union_variant_16).packed_op_type = v;
            return true;
        }
        return false;
    }
    inline bool Code::packed_op_type(PackedOpType&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                union_variant_16 = union_struct_97();
            }
            std::get<81>((*this).union_variant_16).packed_op_type = std::move(v);
            return true;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                union_variant_16 = union_struct_99();
            }
            std::get<83>((*this).union_variant_16).packed_op_type = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Param> Code::param() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_70>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<54>((*this).union_variant_16).param;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<76>((*this).union_variant_16).param;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            if (!std::holds_alternative<union_struct_116>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<100>((*this).union_variant_16).param;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_117>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<101>((*this).union_variant_16).param;
        }
        return std::nullopt;
    }
    inline bool Code::param(const Param& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_70>(union_variant_16)) {
                union_variant_16 = union_struct_70();
            }
            std::get<54>((*this).union_variant_16).param = v;
            return true;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_16)) {
                union_variant_16 = union_struct_92();
            }
            std::get<76>((*this).union_variant_16).param = v;
            return true;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            if (!std::holds_alternative<union_struct_116>(union_variant_16)) {
                union_variant_16 = union_struct_116();
            }
            std::get<100>((*this).union_variant_16).param = v;
            return true;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_117>(union_variant_16)) {
                union_variant_16 = union_struct_117();
            }
            std::get<101>((*this).union_variant_16).param = v;
            return true;
        }
        return false;
    }
    inline bool Code::param(Param&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_70>(union_variant_16)) {
                union_variant_16 = union_struct_70();
            }
            std::get<54>((*this).union_variant_16).param = std::move(v);
            return true;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_16)) {
                union_variant_16 = union_struct_92();
            }
            std::get<76>((*this).union_variant_16).param = std::move(v);
            return true;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            if (!std::holds_alternative<union_struct_116>(union_variant_16)) {
                union_variant_16 = union_struct_116();
            }
            std::get<100>((*this).union_variant_16).param = std::move(v);
            return true;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_117>(union_variant_16)) {
                union_variant_16 = union_struct_117();
            }
            std::get<101>((*this).union_variant_16).param = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<PhiParams> Code::phi_params() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PHI == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<36>((*this).union_variant_16).phi_params;
        }
        return std::nullopt;
    }
    inline bool Code::phi_params(const PhiParams& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_16)) {
                union_variant_16 = union_struct_52();
            }
            std::get<36>((*this).union_variant_16).phi_params = v;
            return true;
        }
        return false;
    }
    inline bool Code::phi_params(PhiParams&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_16)) {
                union_variant_16 = union_struct_52();
            }
            std::get<36>((*this).union_variant_16).phi_params = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::ref() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            if (!std::holds_alternative<union_struct_19>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<3>((*this).union_variant_16).ref;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<21>((*this).union_variant_16).ref;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            if (!std::holds_alternative<union_struct_38>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<22>((*this).union_variant_16).ref;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<23>((*this).union_variant_16).ref;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_40>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<24>((*this).union_variant_16).ref;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_47>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<31>((*this).union_variant_16).ref;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            if (!std::holds_alternative<union_struct_48>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<32>((*this).union_variant_16).ref;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<35>((*this).union_variant_16).ref;
        }
        if (AbstractOp::PHI == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<36>((*this).union_variant_16).ref;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<38>((*this).union_variant_16).ref;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<39>((*this).union_variant_16).ref;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            if (!std::holds_alternative<union_struct_58>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<42>((*this).union_variant_16).ref;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            if (!std::holds_alternative<union_struct_59>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<43>((*this).union_variant_16).ref;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_60>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<44>((*this).union_variant_16).ref;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<45>((*this).union_variant_16).ref;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<50>((*this).union_variant_16).ref;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<51>((*this).union_variant_16).ref;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<53>((*this).union_variant_16).ref;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            if (!std::holds_alternative<union_struct_73>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<57>((*this).union_variant_16).ref;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            if (!std::holds_alternative<union_struct_74>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<58>((*this).union_variant_16).ref;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            if (!std::holds_alternative<union_struct_78>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<62>((*this).union_variant_16).ref;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            if (!std::holds_alternative<union_struct_80>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<64>((*this).union_variant_16).ref;
        }
        if (AbstractOp::ELIF == (*this).op) {
            if (!std::holds_alternative<union_struct_81>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<65>((*this).union_variant_16).ref;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_82>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<66>((*this).union_variant_16).ref;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_83>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<67>((*this).union_variant_16).ref;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_84>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<68>((*this).union_variant_16).ref;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_85>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<69>((*this).union_variant_16).ref;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_86>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<70>((*this).union_variant_16).ref;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_87>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<71>((*this).union_variant_16).ref;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_88>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<72>((*this).union_variant_16).ref;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_89>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<73>((*this).union_variant_16).ref;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CASE == (*this).op) {
            if (!std::holds_alternative<union_struct_93>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<77>((*this).union_variant_16).ref;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_94>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<78>((*this).union_variant_16).ref;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_101>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<85>((*this).union_variant_16).ref;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_102>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<86>((*this).union_variant_16).ref;
        }
        if (AbstractOp::RET == (*this).op) {
            if (!std::holds_alternative<union_struct_103>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<87>((*this).union_variant_16).ref;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_107>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<91>((*this).union_variant_16).ref;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_108>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<92>((*this).union_variant_16).ref;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_112>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<96>((*this).union_variant_16).ref;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_115>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<99>((*this).union_variant_16).ref;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_117>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<101>((*this).union_variant_16).ref;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_122>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<106>((*this).union_variant_16).ref;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_124>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<108>((*this).union_variant_16).ref;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_125>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<109>((*this).union_variant_16).ref;
        }
        if (AbstractOp::SEEK_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_126>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<110>((*this).union_variant_16).ref;
        }
        if (AbstractOp::SEEK_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_127>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<111>((*this).union_variant_16).ref;
        }
        if (AbstractOp::CAN_READ == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IS_LITTLE_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_129>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<113>((*this).union_variant_16).ref;
        }
        if (AbstractOp::REMAIN_BYTES == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FALLBACK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_COND_BLOCK == (*this).op) {
            if (!std::holds_alternative<union_struct_132>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<116>((*this).union_variant_16).ref;
        }
        return std::nullopt;
    }
    inline bool Code::ref(const Varint& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            if (!std::holds_alternative<union_struct_19>(union_variant_16)) {
                union_variant_16 = union_struct_19();
            }
            std::get<3>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_16)) {
                union_variant_16 = union_struct_37();
            }
            std::get<21>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            if (!std::holds_alternative<union_struct_38>(union_variant_16)) {
                union_variant_16 = union_struct_38();
            }
            std::get<22>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_16)) {
                union_variant_16 = union_struct_39();
            }
            std::get<23>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_40>(union_variant_16)) {
                union_variant_16 = union_struct_40();
            }
            std::get<24>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_47>(union_variant_16)) {
                union_variant_16 = union_struct_47();
            }
            std::get<31>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            if (!std::holds_alternative<union_struct_48>(union_variant_16)) {
                union_variant_16 = union_struct_48();
            }
            std::get<32>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_16)) {
                union_variant_16 = union_struct_51();
            }
            std::get<35>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::PHI == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_16)) {
                union_variant_16 = union_struct_52();
            }
            std::get<36>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_16)) {
                union_variant_16 = union_struct_54();
            }
            std::get<38>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_16)) {
                union_variant_16 = union_struct_55();
            }
            std::get<39>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            if (!std::holds_alternative<union_struct_58>(union_variant_16)) {
                union_variant_16 = union_struct_58();
            }
            std::get<42>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            if (!std::holds_alternative<union_struct_59>(union_variant_16)) {
                union_variant_16 = union_struct_59();
            }
            std::get<43>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_60>(union_variant_16)) {
                union_variant_16 = union_struct_60();
            }
            std::get<44>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_16)) {
                union_variant_16 = union_struct_61();
            }
            std::get<45>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_16)) {
                union_variant_16 = union_struct_66();
            }
            std::get<50>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_16)) {
                union_variant_16 = union_struct_67();
            }
            std::get<51>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_16)) {
                union_variant_16 = union_struct_69();
            }
            std::get<53>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            if (!std::holds_alternative<union_struct_73>(union_variant_16)) {
                union_variant_16 = union_struct_73();
            }
            std::get<57>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            if (!std::holds_alternative<union_struct_74>(union_variant_16)) {
                union_variant_16 = union_struct_74();
            }
            std::get<58>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            if (!std::holds_alternative<union_struct_78>(union_variant_16)) {
                union_variant_16 = union_struct_78();
            }
            std::get<62>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            if (!std::holds_alternative<union_struct_80>(union_variant_16)) {
                union_variant_16 = union_struct_80();
            }
            std::get<64>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::ELIF == (*this).op) {
            if (!std::holds_alternative<union_struct_81>(union_variant_16)) {
                union_variant_16 = union_struct_81();
            }
            std::get<65>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_82>(union_variant_16)) {
                union_variant_16 = union_struct_82();
            }
            std::get<66>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_83>(union_variant_16)) {
                union_variant_16 = union_struct_83();
            }
            std::get<67>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_84>(union_variant_16)) {
                union_variant_16 = union_struct_84();
            }
            std::get<68>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_85>(union_variant_16)) {
                union_variant_16 = union_struct_85();
            }
            std::get<69>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_86>(union_variant_16)) {
                union_variant_16 = union_struct_86();
            }
            std::get<70>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_87>(union_variant_16)) {
                union_variant_16 = union_struct_87();
            }
            std::get<71>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_88>(union_variant_16)) {
                union_variant_16 = union_struct_88();
            }
            std::get<72>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_89>(union_variant_16)) {
                union_variant_16 = union_struct_89();
            }
            std::get<73>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            if (!std::holds_alternative<union_struct_93>(union_variant_16)) {
                union_variant_16 = union_struct_93();
            }
            std::get<77>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_94>(union_variant_16)) {
                union_variant_16 = union_struct_94();
            }
            std::get<78>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_101>(union_variant_16)) {
                union_variant_16 = union_struct_101();
            }
            std::get<85>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_102>(union_variant_16)) {
                union_variant_16 = union_struct_102();
            }
            std::get<86>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::RET == (*this).op) {
            if (!std::holds_alternative<union_struct_103>(union_variant_16)) {
                union_variant_16 = union_struct_103();
            }
            std::get<87>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_107>(union_variant_16)) {
                union_variant_16 = union_struct_107();
            }
            std::get<91>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_108>(union_variant_16)) {
                union_variant_16 = union_struct_108();
            }
            std::get<92>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_112>(union_variant_16)) {
                union_variant_16 = union_struct_112();
            }
            std::get<96>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_115>(union_variant_16)) {
                union_variant_16 = union_struct_115();
            }
            std::get<99>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_117>(union_variant_16)) {
                union_variant_16 = union_struct_117();
            }
            std::get<101>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_122>(union_variant_16)) {
                union_variant_16 = union_struct_122();
            }
            std::get<106>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_124>(union_variant_16)) {
                union_variant_16 = union_struct_124();
            }
            std::get<108>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_125>(union_variant_16)) {
                union_variant_16 = union_struct_125();
            }
            std::get<109>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::SEEK_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_126>(union_variant_16)) {
                union_variant_16 = union_struct_126();
            }
            std::get<110>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::SEEK_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_127>(union_variant_16)) {
                union_variant_16 = union_struct_127();
            }
            std::get<111>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::CAN_READ == (*this).op) {
            return false;
        }
        if (AbstractOp::IS_LITTLE_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_129>(union_variant_16)) {
                union_variant_16 = union_struct_129();
            }
            std::get<113>((*this).union_variant_16).ref = v;
            return true;
        }
        if (AbstractOp::REMAIN_BYTES == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FALLBACK == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_COND_BLOCK == (*this).op) {
            if (!std::holds_alternative<union_struct_132>(union_variant_16)) {
                union_variant_16 = union_struct_132();
            }
            std::get<116>((*this).union_variant_16).ref = v;
            return true;
        }
        return false;
    }
    inline bool Code::ref(Varint&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            if (!std::holds_alternative<union_struct_19>(union_variant_16)) {
                union_variant_16 = union_struct_19();
            }
            std::get<3>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_16)) {
                union_variant_16 = union_struct_37();
            }
            std::get<21>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            if (!std::holds_alternative<union_struct_38>(union_variant_16)) {
                union_variant_16 = union_struct_38();
            }
            std::get<22>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_16)) {
                union_variant_16 = union_struct_39();
            }
            std::get<23>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_40>(union_variant_16)) {
                union_variant_16 = union_struct_40();
            }
            std::get<24>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_47>(union_variant_16)) {
                union_variant_16 = union_struct_47();
            }
            std::get<31>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            if (!std::holds_alternative<union_struct_48>(union_variant_16)) {
                union_variant_16 = union_struct_48();
            }
            std::get<32>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_16)) {
                union_variant_16 = union_struct_51();
            }
            std::get<35>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::PHI == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_16)) {
                union_variant_16 = union_struct_52();
            }
            std::get<36>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_16)) {
                union_variant_16 = union_struct_54();
            }
            std::get<38>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_16)) {
                union_variant_16 = union_struct_55();
            }
            std::get<39>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            if (!std::holds_alternative<union_struct_58>(union_variant_16)) {
                union_variant_16 = union_struct_58();
            }
            std::get<42>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            if (!std::holds_alternative<union_struct_59>(union_variant_16)) {
                union_variant_16 = union_struct_59();
            }
            std::get<43>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_60>(union_variant_16)) {
                union_variant_16 = union_struct_60();
            }
            std::get<44>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_16)) {
                union_variant_16 = union_struct_61();
            }
            std::get<45>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_16)) {
                union_variant_16 = union_struct_66();
            }
            std::get<50>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_16)) {
                union_variant_16 = union_struct_67();
            }
            std::get<51>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_16)) {
                union_variant_16 = union_struct_69();
            }
            std::get<53>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            if (!std::holds_alternative<union_struct_73>(union_variant_16)) {
                union_variant_16 = union_struct_73();
            }
            std::get<57>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            if (!std::holds_alternative<union_struct_74>(union_variant_16)) {
                union_variant_16 = union_struct_74();
            }
            std::get<58>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            if (!std::holds_alternative<union_struct_78>(union_variant_16)) {
                union_variant_16 = union_struct_78();
            }
            std::get<62>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            if (!std::holds_alternative<union_struct_80>(union_variant_16)) {
                union_variant_16 = union_struct_80();
            }
            std::get<64>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::ELIF == (*this).op) {
            if (!std::holds_alternative<union_struct_81>(union_variant_16)) {
                union_variant_16 = union_struct_81();
            }
            std::get<65>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_82>(union_variant_16)) {
                union_variant_16 = union_struct_82();
            }
            std::get<66>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_83>(union_variant_16)) {
                union_variant_16 = union_struct_83();
            }
            std::get<67>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_84>(union_variant_16)) {
                union_variant_16 = union_struct_84();
            }
            std::get<68>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_85>(union_variant_16)) {
                union_variant_16 = union_struct_85();
            }
            std::get<69>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_86>(union_variant_16)) {
                union_variant_16 = union_struct_86();
            }
            std::get<70>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_87>(union_variant_16)) {
                union_variant_16 = union_struct_87();
            }
            std::get<71>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_88>(union_variant_16)) {
                union_variant_16 = union_struct_88();
            }
            std::get<72>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_89>(union_variant_16)) {
                union_variant_16 = union_struct_89();
            }
            std::get<73>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            if (!std::holds_alternative<union_struct_93>(union_variant_16)) {
                union_variant_16 = union_struct_93();
            }
            std::get<77>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_94>(union_variant_16)) {
                union_variant_16 = union_struct_94();
            }
            std::get<78>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_101>(union_variant_16)) {
                union_variant_16 = union_struct_101();
            }
            std::get<85>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_102>(union_variant_16)) {
                union_variant_16 = union_struct_102();
            }
            std::get<86>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::RET == (*this).op) {
            if (!std::holds_alternative<union_struct_103>(union_variant_16)) {
                union_variant_16 = union_struct_103();
            }
            std::get<87>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_107>(union_variant_16)) {
                union_variant_16 = union_struct_107();
            }
            std::get<91>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_108>(union_variant_16)) {
                union_variant_16 = union_struct_108();
            }
            std::get<92>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_112>(union_variant_16)) {
                union_variant_16 = union_struct_112();
            }
            std::get<96>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_115>(union_variant_16)) {
                union_variant_16 = union_struct_115();
            }
            std::get<99>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_117>(union_variant_16)) {
                union_variant_16 = union_struct_117();
            }
            std::get<101>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_122>(union_variant_16)) {
                union_variant_16 = union_struct_122();
            }
            std::get<106>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_124>(union_variant_16)) {
                union_variant_16 = union_struct_124();
            }
            std::get<108>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_125>(union_variant_16)) {
                union_variant_16 = union_struct_125();
            }
            std::get<109>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::SEEK_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_126>(union_variant_16)) {
                union_variant_16 = union_struct_126();
            }
            std::get<110>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::SEEK_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_127>(union_variant_16)) {
                union_variant_16 = union_struct_127();
            }
            std::get<111>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::CAN_READ == (*this).op) {
            return false;
        }
        if (AbstractOp::IS_LITTLE_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_129>(union_variant_16)) {
                union_variant_16 = union_struct_129();
            }
            std::get<113>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        if (AbstractOp::REMAIN_BYTES == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FALLBACK == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_COND_BLOCK == (*this).op) {
            if (!std::holds_alternative<union_struct_132>(union_variant_16)) {
                union_variant_16 = union_struct_132();
            }
            std::get<116>((*this).union_variant_16).ref = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::right_ref() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_32>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<16>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_34>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<18>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_35>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<19>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<28>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<29>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<30>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<33>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<34>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<35>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<37>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<46>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<47>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<48>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<49>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<52>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_71>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<55>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_72>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<56>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            if (!std::holds_alternative<union_struct_76>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<60>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            if (!std::holds_alternative<union_struct_77>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<61>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            if (!std::holds_alternative<union_struct_79>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<63>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<74>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<75>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::APPEND == (*this).op) {
            if (!std::holds_alternative<union_struct_96>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<80>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_109>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<93>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_110>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<94>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_111>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<95>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            if (!std::holds_alternative<union_struct_113>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<97>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            if (!std::holds_alternative<union_struct_114>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<98>((*this).union_variant_16).right_ref;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_123>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<107>((*this).union_variant_16).right_ref;
        }
        return std::nullopt;
    }
    inline bool Code::right_ref(const Varint& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_32>(union_variant_16)) {
                union_variant_16 = union_struct_32();
            }
            std::get<16>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_34>(union_variant_16)) {
                union_variant_16 = union_struct_34();
            }
            std::get<18>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_35>(union_variant_16)) {
                union_variant_16 = union_struct_35();
            }
            std::get<19>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_16)) {
                union_variant_16 = union_struct_44();
            }
            std::get<28>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_16)) {
                union_variant_16 = union_struct_45();
            }
            std::get<29>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_16)) {
                union_variant_16 = union_struct_46();
            }
            std::get<30>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_16)) {
                union_variant_16 = union_struct_49();
            }
            std::get<33>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_16)) {
                union_variant_16 = union_struct_50();
            }
            std::get<34>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_16)) {
                union_variant_16 = union_struct_51();
            }
            std::get<35>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_16)) {
                union_variant_16 = union_struct_53();
            }
            std::get<37>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                union_variant_16 = union_struct_62();
            }
            std::get<46>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                union_variant_16 = union_struct_63();
            }
            std::get<47>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                union_variant_16 = union_struct_64();
            }
            std::get<48>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                union_variant_16 = union_struct_65();
            }
            std::get<49>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_16)) {
                union_variant_16 = union_struct_68();
            }
            std::get<52>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_71>(union_variant_16)) {
                union_variant_16 = union_struct_71();
            }
            std::get<55>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_72>(union_variant_16)) {
                union_variant_16 = union_struct_72();
            }
            std::get<56>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            if (!std::holds_alternative<union_struct_76>(union_variant_16)) {
                union_variant_16 = union_struct_76();
            }
            std::get<60>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            if (!std::holds_alternative<union_struct_77>(union_variant_16)) {
                union_variant_16 = union_struct_77();
            }
            std::get<61>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            if (!std::holds_alternative<union_struct_79>(union_variant_16)) {
                union_variant_16 = union_struct_79();
            }
            std::get<63>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_16)) {
                union_variant_16 = union_struct_90();
            }
            std::get<74>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_16)) {
                union_variant_16 = union_struct_91();
            }
            std::get<75>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            if (!std::holds_alternative<union_struct_96>(union_variant_16)) {
                union_variant_16 = union_struct_96();
            }
            std::get<80>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_109>(union_variant_16)) {
                union_variant_16 = union_struct_109();
            }
            std::get<93>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_110>(union_variant_16)) {
                union_variant_16 = union_struct_110();
            }
            std::get<94>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_111>(union_variant_16)) {
                union_variant_16 = union_struct_111();
            }
            std::get<95>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            if (!std::holds_alternative<union_struct_113>(union_variant_16)) {
                union_variant_16 = union_struct_113();
            }
            std::get<97>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            if (!std::holds_alternative<union_struct_114>(union_variant_16)) {
                union_variant_16 = union_struct_114();
            }
            std::get<98>((*this).union_variant_16).right_ref = v;
            return true;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_123>(union_variant_16)) {
                union_variant_16 = union_struct_123();
            }
            std::get<107>((*this).union_variant_16).right_ref = v;
            return true;
        }
        return false;
    }
    inline bool Code::right_ref(Varint&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_32>(union_variant_16)) {
                union_variant_16 = union_struct_32();
            }
            std::get<16>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_34>(union_variant_16)) {
                union_variant_16 = union_struct_34();
            }
            std::get<18>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_35>(union_variant_16)) {
                union_variant_16 = union_struct_35();
            }
            std::get<19>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_16)) {
                union_variant_16 = union_struct_44();
            }
            std::get<28>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_16)) {
                union_variant_16 = union_struct_45();
            }
            std::get<29>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_16)) {
                union_variant_16 = union_struct_46();
            }
            std::get<30>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_16)) {
                union_variant_16 = union_struct_49();
            }
            std::get<33>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_16)) {
                union_variant_16 = union_struct_50();
            }
            std::get<34>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_16)) {
                union_variant_16 = union_struct_51();
            }
            std::get<35>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_16)) {
                union_variant_16 = union_struct_53();
            }
            std::get<37>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                union_variant_16 = union_struct_62();
            }
            std::get<46>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                union_variant_16 = union_struct_63();
            }
            std::get<47>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                union_variant_16 = union_struct_64();
            }
            std::get<48>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                union_variant_16 = union_struct_65();
            }
            std::get<49>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_16)) {
                union_variant_16 = union_struct_68();
            }
            std::get<52>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_71>(union_variant_16)) {
                union_variant_16 = union_struct_71();
            }
            std::get<55>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_72>(union_variant_16)) {
                union_variant_16 = union_struct_72();
            }
            std::get<56>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            if (!std::holds_alternative<union_struct_76>(union_variant_16)) {
                union_variant_16 = union_struct_76();
            }
            std::get<60>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            if (!std::holds_alternative<union_struct_77>(union_variant_16)) {
                union_variant_16 = union_struct_77();
            }
            std::get<61>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            if (!std::holds_alternative<union_struct_79>(union_variant_16)) {
                union_variant_16 = union_struct_79();
            }
            std::get<63>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_16)) {
                union_variant_16 = union_struct_90();
            }
            std::get<74>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_16)) {
                union_variant_16 = union_struct_91();
            }
            std::get<75>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            if (!std::holds_alternative<union_struct_96>(union_variant_16)) {
                union_variant_16 = union_struct_96();
            }
            std::get<80>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_109>(union_variant_16)) {
                union_variant_16 = union_struct_109();
            }
            std::get<93>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_110>(union_variant_16)) {
                union_variant_16 = union_struct_110();
            }
            std::get<94>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_111>(union_variant_16)) {
                union_variant_16 = union_struct_111();
            }
            std::get<95>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            if (!std::holds_alternative<union_struct_113>(union_variant_16)) {
                union_variant_16 = union_struct_113();
            }
            std::get<97>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            if (!std::holds_alternative<union_struct_114>(union_variant_16)) {
                union_variant_16 = union_struct_114();
            }
            std::get<98>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_123>(union_variant_16)) {
                union_variant_16 = union_struct_123();
            }
            std::get<107>((*this).union_variant_16).right_ref = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<SubRangeType> Code::sub_range_type() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_124>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<108>((*this).union_variant_16).sub_range_type;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_125>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<109>((*this).union_variant_16).sub_range_type;
        }
        return std::nullopt;
    }
    inline bool Code::sub_range_type(const SubRangeType& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_124>(union_variant_16)) {
                union_variant_16 = union_struct_124();
            }
            std::get<108>((*this).union_variant_16).sub_range_type = v;
            return true;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_125>(union_variant_16)) {
                union_variant_16 = union_struct_125();
            }
            std::get<109>((*this).union_variant_16).sub_range_type = v;
            return true;
        }
        return false;
    }
    inline bool Code::sub_range_type(SubRangeType&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::RESERVE_SIZE == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_124>(union_variant_16)) {
                union_variant_16 = union_struct_124();
            }
            std::get<108>((*this).union_variant_16).sub_range_type = std::move(v);
            return true;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_125>(union_variant_16)) {
                union_variant_16 = union_struct_125();
            }
            std::get<109>((*this).union_variant_16).sub_range_type = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<StorageRef> Code::type() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_26>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<10>((*this).union_variant_16).type;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<13>((*this).union_variant_16).type;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_31>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<15>((*this).union_variant_16).type;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<21>((*this).union_variant_16).type;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<23>((*this).union_variant_16).type;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<25>((*this).union_variant_16).type;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_43>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<27>((*this).union_variant_16).type;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PHI == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<39>((*this).union_variant_16).type;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<53>((*this).union_variant_16).type;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_70>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<54>((*this).union_variant_16).type;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            if (!std::holds_alternative<union_struct_75>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<59>((*this).union_variant_16).type;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<76>((*this).union_variant_16).type;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<79>((*this).union_variant_16).type;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_111>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<95>((*this).union_variant_16).type;
        }
        return std::nullopt;
    }
    inline bool Code::type(const StorageRef& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_26>(union_variant_16)) {
                union_variant_16 = union_struct_26();
            }
            std::get<10>((*this).union_variant_16).type = v;
            return true;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_16)) {
                union_variant_16 = union_struct_29();
            }
            std::get<13>((*this).union_variant_16).type = v;
            return true;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_31>(union_variant_16)) {
                union_variant_16 = union_struct_31();
            }
            std::get<15>((*this).union_variant_16).type = v;
            return true;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_16)) {
                union_variant_16 = union_struct_37();
            }
            std::get<21>((*this).union_variant_16).type = v;
            return true;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_16)) {
                union_variant_16 = union_struct_39();
            }
            std::get<23>((*this).union_variant_16).type = v;
            return true;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_16)) {
                union_variant_16 = union_struct_41();
            }
            std::get<25>((*this).union_variant_16).type = v;
            return true;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_43>(union_variant_16)) {
                union_variant_16 = union_struct_43();
            }
            std::get<27>((*this).union_variant_16).type = v;
            return true;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_16)) {
                union_variant_16 = union_struct_55();
            }
            std::get<39>((*this).union_variant_16).type = v;
            return true;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_16)) {
                union_variant_16 = union_struct_69();
            }
            std::get<53>((*this).union_variant_16).type = v;
            return true;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_70>(union_variant_16)) {
                union_variant_16 = union_struct_70();
            }
            std::get<54>((*this).union_variant_16).type = v;
            return true;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            if (!std::holds_alternative<union_struct_75>(union_variant_16)) {
                union_variant_16 = union_struct_75();
            }
            std::get<59>((*this).union_variant_16).type = v;
            return true;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_16)) {
                union_variant_16 = union_struct_92();
            }
            std::get<76>((*this).union_variant_16).type = v;
            return true;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_16)) {
                union_variant_16 = union_struct_95();
            }
            std::get<79>((*this).union_variant_16).type = v;
            return true;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_111>(union_variant_16)) {
                union_variant_16 = union_struct_111();
            }
            std::get<95>((*this).union_variant_16).type = v;
            return true;
        }
        return false;
    }
    inline bool Code::type(StorageRef&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_26>(union_variant_16)) {
                union_variant_16 = union_struct_26();
            }
            std::get<10>((*this).union_variant_16).type = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_16)) {
                union_variant_16 = union_struct_29();
            }
            std::get<13>((*this).union_variant_16).type = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_31>(union_variant_16)) {
                union_variant_16 = union_struct_31();
            }
            std::get<15>((*this).union_variant_16).type = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_16)) {
                union_variant_16 = union_struct_37();
            }
            std::get<21>((*this).union_variant_16).type = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_16)) {
                union_variant_16 = union_struct_39();
            }
            std::get<23>((*this).union_variant_16).type = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_16)) {
                union_variant_16 = union_struct_41();
            }
            std::get<25>((*this).union_variant_16).type = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_43>(union_variant_16)) {
                union_variant_16 = union_struct_43();
            }
            std::get<27>((*this).union_variant_16).type = std::move(v);
            return true;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::PHI == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::ADDRESS_OF == (*this).op) {
            return false;
        }
        if (AbstractOp::OPTIONAL_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_16)) {
                union_variant_16 = union_struct_55();
            }
            std::get<39>((*this).union_variant_16).type = std::move(v);
            return true;
        }
        if (AbstractOp::EMPTY_PTR == (*this).op) {
            return false;
        }
        if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            return false;
        }
        if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_16)) {
                union_variant_16 = union_struct_69();
            }
            std::get<53>((*this).union_variant_16).type = std::move(v);
            return true;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_70>(union_variant_16)) {
                union_variant_16 = union_struct_70();
            }
            std::get<54>((*this).union_variant_16).type = std::move(v);
            return true;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            if (!std::holds_alternative<union_struct_75>(union_variant_16)) {
                union_variant_16 = union_struct_75();
            }
            std::get<59>((*this).union_variant_16).type = std::move(v);
            return true;
        }
        if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::LENGTH_CHECK == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_16)) {
                union_variant_16 = union_struct_92();
            }
            std::get<76>((*this).union_variant_16).type = std::move(v);
            return true;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_16)) {
                union_variant_16 = union_struct_95();
            }
            std::get<79>((*this).union_variant_16).type = std::move(v);
            return true;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::CHECK_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_SUCCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            return false;
        }
        if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_111>(union_variant_16)) {
                union_variant_16 = union_struct_111();
            }
            std::get<95>((*this).union_variant_16).type = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<UnaryOp> Code::uop() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_47>(union_variant_16)) {
                return std::nullopt;
            }
            return std::get<31>((*this).union_variant_16).uop;
        }
        return std::nullopt;
    }
    inline bool Code::uop(const UnaryOp& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_47>(union_variant_16)) {
                union_variant_16 = union_struct_47();
            }
            std::get<31>((*this).union_variant_16).uop = v;
            return true;
        }
        return false;
    }
    inline bool Code::uop(UnaryOp&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::RETURN_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_47>(union_variant_16)) {
                union_variant_16 = union_struct_47();
            }
            std::get<31>((*this).union_variant_16).uop = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<DebugInfo> BinaryModule::debug_info() const {
        if (((*this).has_debug_info() == 1) == true) {
            if (!std::holds_alternative<union_struct_136>(union_variant_135)) {
                return std::nullopt;
            }
            return std::get<1>((*this).union_variant_135).debug_info;
        }
        return std::nullopt;
    }
    inline bool BinaryModule::debug_info(const DebugInfo& v) {
        if (((*this).has_debug_info() == 1) == true) {
            if (!std::holds_alternative<union_struct_136>(union_variant_135)) {
                union_variant_135 = union_struct_136();
            }
            std::get<1>((*this).union_variant_135).debug_info = v;
            return true;
        }
        return false;
    }
    inline bool BinaryModule::debug_info(DebugInfo&& v) {
        if (((*this).has_debug_info() == 1) == true) {
            if (!std::holds_alternative<union_struct_136>(union_variant_135)) {
                union_variant_135 = union_struct_136();
            }
            std::get<1>((*this).union_variant_135).debug_info = std::move(v);
            return true;
        }
        return false;
    }
    inline ::futils::error::Error<> Varint::encode(::futils::binary::writer& w) const {
        if ((*this).prefix() == 0) {
            std::uint8_t tmp137 = 0;
            tmp137 = (*this).value();
            tmp137 |= std::uint8_t(0) << 6;
            if (!::futils::binary::write_num(w, tmp137, true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed", ::futils::error::Category::lib);
            }
        }
        else if ((*this).prefix() == 1) {
            std::uint16_t tmp137 = 0;
            tmp137 = (*this).value();
            tmp137 |= std::uint16_t(1) << 14;
            if (!::futils::binary::write_num(w, tmp137, true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed", ::futils::error::Category::lib);
            }
        }
        else if ((*this).prefix() == 2) {
            std::uint32_t tmp137 = 0;
            tmp137 = (*this).value();
            tmp137 |= std::uint32_t(2) << 30;
            if (!::futils::binary::write_num(w, tmp137, true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed", ::futils::error::Category::lib);
            }
        }
        else if ((*this).prefix() == 3) {
            std::uint64_t tmp137 = 0;
            tmp137 = (*this).value();
            tmp137 |= std::uint64_t(3) << 62;
            if (!::futils::binary::write_num(w, tmp137, true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed", ::futils::error::Category::lib);
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Varint::decode(::futils::binary::reader& r) {
        if (!r.load_stream(1)) {
            return ::futils::error::Error<>("decode: Varint::value: read bit field failed", ::futils::error::Category::lib);
        }
        std::uint8_t tmp138 = (r.top() >> 6) & 0x3;
        (*this).prefix(tmp138);
        if ((*this).prefix() == 0) {
            std::uint8_t tmp139 = 0;
            if (!::futils::binary::read_num(r, tmp139, true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed", ::futils::error::Category::lib);
            }
            tmp139 &= ~(std::uint8_t(0x3) << 6);
            (*this).value(tmp139);
        }
        else if ((*this).prefix() == 1) {
            std::uint16_t tmp140 = 0;
            if (!::futils::binary::read_num(r, tmp140, true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed", ::futils::error::Category::lib);
            }
            tmp140 &= ~(std::uint16_t(0x3) << 14);
            (*this).value(tmp140);
        }
        else if ((*this).prefix() == 2) {
            std::uint32_t tmp141 = 0;
            if (!::futils::binary::read_num(r, tmp141, true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed", ::futils::error::Category::lib);
            }
            tmp141 &= ~(std::uint32_t(0x3) << 30);
            (*this).value(tmp141);
        }
        else if ((*this).prefix() == 3) {
            std::uint64_t tmp142 = 0;
            if (!::futils::binary::read_num(r, tmp142, true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed", ::futils::error::Category::lib);
            }
            tmp142 &= ~(std::uint64_t(0x3) << 62);
            (*this).value(tmp142);
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> DecodeParamFlags::encode(::futils::binary::writer& w) const {
        if (!::futils::binary::write_num(w, flags_2_.as_value(), true)) {
            return ::futils::error::Error<>("encode: DecodeParamFlags::reserved: write bit field failed", ::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> DecodeParamFlags::decode(::futils::binary::reader& r) {
        if (!::futils::binary::read_num(r, flags_2_.as_value(), true)) {
            return ::futils::error::Error<>("decode: DecodeParamFlags::reserved: read bit field failed", ::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> EncodeParamFlags::encode(::futils::binary::writer& w) const {
        if (!::futils::binary::write_num(w, flags_3_.as_value(), true)) {
            return ::futils::error::Error<>("encode: EncodeParamFlags::reserved: write bit field failed", ::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> EncodeParamFlags::decode(::futils::binary::reader& r) {
        if (!::futils::binary::read_num(r, flags_3_.as_value(), true)) {
            return ::futils::error::Error<>("decode: EncodeParamFlags::reserved: read bit field failed", ::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Range::encode(::futils::binary::writer& w) const {
        if (!::futils::binary::write_num(w, static_cast<std::uint64_t>((*this).start), true)) {
            return ::futils::error::Error<>("encode: Range::start: write std::uint64_t failed", ::futils::error::Category::lib);
        }
        if (!::futils::binary::write_num(w, static_cast<std::uint64_t>((*this).end), true)) {
            return ::futils::error::Error<>("encode: Range::end: write std::uint64_t failed", ::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Range::decode(::futils::binary::reader& r) {
        if (!::futils::binary::read_num(r, (*this).start, true)) {
            return ::futils::error::Error<>("decode: Range::start: read int failed", ::futils::error::Category::lib);
        }
        if (!::futils::binary::read_num(r, (*this).end, true)) {
            return ::futils::error::Error<>("decode: Range::end: read int failed", ::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> String::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).length.encode(w)) {
            return err;
        }
        auto tmp_143_ = (*this).length.value();
        if (tmp_143_ != (*this).data.size()) {
            return ::futils::error::Error<>("encode: String::data: dynamic length is not compatible with its length; tmp_143_!=(*this).data.size()", ::futils::error::Category::lib);
        }
        if (!w.write((*this).data)) {
            return ::futils::error::Error<>("encode: String::data: write array failed", ::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> String::decode(::futils::binary::reader& r) {
        if (auto err = (*this).length.decode(r)) {
            return err;
        }
        auto tmp_144_ = (*this).length.value();
        if (!r.read((*this).data, tmp_144_)) {
            return ::futils::error::Error<>("decode: String::data: read byte array failed", ::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> IdentIndex::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).ident.encode(w)) {
            return err;
        }
        if (auto err = (*this).index.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> IdentIndex::decode(::futils::binary::reader& r) {
        if (auto err = (*this).ident.decode(r)) {
            return err;
        }
        if (auto err = (*this).index.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Storage::encode(::futils::binary::writer& w) const {
        auto tmp_145_ = static_cast<std::uint8_t>((*this).type);
        if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_145_), true)) {
            return ::futils::error::Error<>("encode: Storage::type: write std::uint8_t failed", ::futils::error::Category::lib);
        }
        if (StorageType::INT == (*this).type) {
            if (!std::holds_alternative<union_struct_6>(union_variant_5)) {
                return ::futils::error::Error<>("encode: Storage: union_variant_5 variant alternative union_struct_6 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<1>((*this).union_variant_5).size.encode(w)) {
                return err;
            }
        }
        else if (StorageType::UINT == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_5)) {
                return ::futils::error::Error<>("encode: Storage: union_variant_5 variant alternative union_struct_7 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<2>((*this).union_variant_5).size.encode(w)) {
                return err;
            }
        }
        else if (StorageType::FLOAT == (*this).type) {
            if (!std::holds_alternative<union_struct_8>(union_variant_5)) {
                return ::futils::error::Error<>("encode: Storage: union_variant_5 variant alternative union_struct_8 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<3>((*this).union_variant_5).size.encode(w)) {
                return err;
            }
        }
        else if (StorageType::STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_9>(union_variant_5)) {
                return ::futils::error::Error<>("encode: Storage: union_variant_5 variant alternative union_struct_9 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<4>((*this).union_variant_5).size.encode(w)) {
                return err;
            }
            if (auto err = std::get<4>((*this).union_variant_5).ref.encode(w)) {
                return err;
            }
        }
        else if (StorageType::RECURSIVE_STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_10>(union_variant_5)) {
                return ::futils::error::Error<>("encode: Storage: union_variant_5 variant alternative union_struct_10 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<5>((*this).union_variant_5).ref.encode(w)) {
                return err;
            }
        }
        else if (StorageType::ENUM == (*this).type) {
            if (!std::holds_alternative<union_struct_11>(union_variant_5)) {
                return ::futils::error::Error<>("encode: Storage: union_variant_5 variant alternative union_struct_11 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<6>((*this).union_variant_5).ref.encode(w)) {
                return err;
            }
        }
        else if (StorageType::ARRAY == (*this).type) {
            if (!std::holds_alternative<union_struct_12>(union_variant_5)) {
                return ::futils::error::Error<>("encode: Storage: union_variant_5 variant alternative union_struct_12 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<7>((*this).union_variant_5).size.encode(w)) {
                return err;
            }
        }
        else if (StorageType::VARIANT == (*this).type) {
            if (!std::holds_alternative<union_struct_13>(union_variant_5)) {
                return ::futils::error::Error<>("encode: Storage: union_variant_5 variant alternative union_struct_13 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<8>((*this).union_variant_5).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<8>((*this).union_variant_5).size.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Storage::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_146_ = 0;
        if (!::futils::binary::read_num(r, tmp_146_, true)) {
            return ::futils::error::Error<>("decode: Storage::type: read int failed", ::futils::error::Category::lib);
        }
        (*this).type = static_cast<StorageType>(tmp_146_);
        if (StorageType::INT == (*this).type) {
            if (!std::holds_alternative<union_struct_6>(union_variant_5)) {
                union_variant_5 = union_struct_6();
            }
            if (auto err = std::get<1>((*this).union_variant_5).size.decode(r)) {
                return err;
            }
        }
        else if (StorageType::UINT == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_5)) {
                union_variant_5 = union_struct_7();
            }
            if (auto err = std::get<2>((*this).union_variant_5).size.decode(r)) {
                return err;
            }
        }
        else if (StorageType::FLOAT == (*this).type) {
            if (!std::holds_alternative<union_struct_8>(union_variant_5)) {
                union_variant_5 = union_struct_8();
            }
            if (auto err = std::get<3>((*this).union_variant_5).size.decode(r)) {
                return err;
            }
        }
        else if (StorageType::STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_9>(union_variant_5)) {
                union_variant_5 = union_struct_9();
            }
            if (auto err = std::get<4>((*this).union_variant_5).size.decode(r)) {
                return err;
            }
            if (auto err = std::get<4>((*this).union_variant_5).ref.decode(r)) {
                return err;
            }
        }
        else if (StorageType::RECURSIVE_STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_10>(union_variant_5)) {
                union_variant_5 = union_struct_10();
            }
            if (auto err = std::get<5>((*this).union_variant_5).ref.decode(r)) {
                return err;
            }
        }
        else if (StorageType::ENUM == (*this).type) {
            if (!std::holds_alternative<union_struct_11>(union_variant_5)) {
                union_variant_5 = union_struct_11();
            }
            if (auto err = std::get<6>((*this).union_variant_5).ref.decode(r)) {
                return err;
            }
        }
        else if (StorageType::ARRAY == (*this).type) {
            if (!std::holds_alternative<union_struct_12>(union_variant_5)) {
                union_variant_5 = union_struct_12();
            }
            if (auto err = std::get<7>((*this).union_variant_5).size.decode(r)) {
                return err;
            }
        }
        else if (StorageType::VARIANT == (*this).type) {
            if (!std::holds_alternative<union_struct_13>(union_variant_5)) {
                union_variant_5 = union_struct_13();
            }
            if (auto err = std::get<8>((*this).union_variant_5).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<8>((*this).union_variant_5).size.decode(r)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Metadata::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).len.encode(w)) {
            return err;
        }
        auto tmp_147_ = (*this).len.value();
        if (tmp_147_ != (*this).refs.size()) {
            return ::futils::error::Error<>("encode: Metadata::refs: dynamic length is not compatible with its length; tmp_147_!=(*this).refs.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_148_ : (*this).refs) {
            if (auto err = tmp_148_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Metadata::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).len.decode(r)) {
            return err;
        }
        auto tmp_149_ = (*this).len.value();
        (*this).refs.clear();
        for (size_t tmp_151_ = 0; tmp_151_ < tmp_149_; ++tmp_151_) {
            Varint tmp_150_;
            if (auto err = tmp_150_.decode(r)) {
                return err;
            }
            (*this).refs.push_back(std::move(tmp_150_));
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Param::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len.encode(w)) {
            return err;
        }
        auto tmp_152_ = (*this).len.value();
        if (tmp_152_ != (*this).refs.size()) {
            return ::futils::error::Error<>("encode: Param::refs: dynamic length is not compatible with its length; tmp_152_!=(*this).refs.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_153_ : (*this).refs) {
            if (auto err = tmp_153_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Param::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len.decode(r)) {
            return err;
        }
        auto tmp_154_ = (*this).len.value();
        (*this).refs.clear();
        for (size_t tmp_156_ = 0; tmp_156_ < tmp_154_; ++tmp_156_) {
            Varint tmp_155_;
            if (auto err = tmp_155_.decode(r)) {
                return err;
            }
            (*this).refs.push_back(std::move(tmp_155_));
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> PhiParam::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).condition.encode(w)) {
            return err;
        }
        if (auto err = (*this).assign.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> PhiParam::decode(::futils::binary::reader& r) {
        if (auto err = (*this).condition.decode(r)) {
            return err;
        }
        if (auto err = (*this).assign.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> EndianExpr::encode(::futils::binary::writer& w) const {
        if (!::futils::binary::write_num(w, flags_14_.as_value(), true)) {
            return ::futils::error::Error<>("encode: EndianExpr::reserved: write bit field failed", ::futils::error::Category::lib);
        }
        if (auto err = (*this).dynamic_ref.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> EndianExpr::decode(::futils::binary::reader& r) {
        if (!::futils::binary::read_num(r, flags_14_.as_value(), true)) {
            return ::futils::error::Error<>("decode: EndianExpr::reserved: read bit field failed", ::futils::error::Category::lib);
        }
        if (auto err = (*this).dynamic_ref.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> StorageRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).ref.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> StorageRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).ref.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> RangePacked::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).start.encode(w)) {
            return err;
        }
        if (auto err = (*this).end.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> RangePacked::decode(::futils::binary::reader& r) {
        if (auto err = (*this).start.decode(r)) {
            return err;
        }
        if (auto err = (*this).end.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Loc::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).ident.encode(w)) {
            return err;
        }
        if (auto err = (*this).file_id.encode(w)) {
            return err;
        }
        if (auto err = (*this).line.encode(w)) {
            return err;
        }
        if (auto err = (*this).column.encode(w)) {
            return err;
        }
        if (auto err = (*this).start.encode(w)) {
            return err;
        }
        if (auto err = (*this).end.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Loc::decode(::futils::binary::reader& r) {
        if (auto err = (*this).ident.decode(r)) {
            return err;
        }
        if (auto err = (*this).file_id.decode(r)) {
            return err;
        }
        if (auto err = (*this).line.decode(r)) {
            return err;
        }
        if (auto err = (*this).column.decode(r)) {
            return err;
        }
        if (auto err = (*this).start.decode(r)) {
            return err;
        }
        if (auto err = (*this).end.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> StringRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).code.encode(w)) {
            return err;
        }
        if (auto err = (*this).string.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> StringRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).code.decode(r)) {
            return err;
        }
        if (auto err = (*this).string.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Storages::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).length.encode(w)) {
            return err;
        }
        auto tmp_157_ = (*this).length.value();
        if (tmp_157_ != (*this).storages.size()) {
            return ::futils::error::Error<>("encode: Storages::storages: dynamic length is not compatible with its length; tmp_157_!=(*this).storages.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_158_ : (*this).storages) {
            if (auto err = tmp_158_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Storages::decode(::futils::binary::reader& r) {
        if (auto err = (*this).length.decode(r)) {
            return err;
        }
        auto tmp_159_ = (*this).length.value();
        (*this).storages.clear();
        for (size_t tmp_161_ = 0; tmp_161_ < tmp_159_; ++tmp_161_) {
            Storage tmp_160_;
            if (auto err = tmp_160_.decode(r)) {
                return err;
            }
            (*this).storages.push_back(std::move(tmp_160_));
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> PhiParams::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).length.encode(w)) {
            return err;
        }
        auto tmp_162_ = (*this).length.value();
        if (tmp_162_ != (*this).params.size()) {
            return ::futils::error::Error<>("encode: PhiParams::params: dynamic length is not compatible with its length; tmp_162_!=(*this).params.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_163_ : (*this).params) {
            if (auto err = tmp_163_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> PhiParams::decode(::futils::binary::reader& r) {
        if (auto err = (*this).length.decode(r)) {
            return err;
        }
        auto tmp_164_ = (*this).length.value();
        (*this).params.clear();
        for (size_t tmp_166_ = 0; tmp_166_ < tmp_164_; ++tmp_166_) {
            PhiParam tmp_165_;
            if (auto err = tmp_165_.decode(r)) {
                return err;
            }
            (*this).params.push_back(std::move(tmp_165_));
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> StorageRefMap::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).code.encode(w)) {
            return err;
        }
        if (auto err = (*this).storage.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> StorageRefMap::decode(::futils::binary::reader& r) {
        if (auto err = (*this).code.decode(r)) {
            return err;
        }
        if (auto err = (*this).storage.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> StorageRefMaps::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).length.encode(w)) {
            return err;
        }
        auto tmp_167_ = (*this).length.value();
        if (tmp_167_ != (*this).maps.size()) {
            return ::futils::error::Error<>("encode: StorageRefMaps::maps: dynamic length is not compatible with its length; tmp_167_!=(*this).maps.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_168_ : (*this).maps) {
            if (auto err = tmp_168_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> StorageRefMaps::decode(::futils::binary::reader& r) {
        if (auto err = (*this).length.decode(r)) {
            return err;
        }
        auto tmp_169_ = (*this).length.value();
        (*this).maps.clear();
        for (size_t tmp_171_ = 0; tmp_171_ < tmp_169_; ++tmp_171_) {
            StorageRefMap tmp_170_;
            if (auto err = tmp_170_.decode(r)) {
                return err;
            }
            (*this).maps.push_back(std::move(tmp_170_));
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> StringRefs::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).refs_length.encode(w)) {
            return err;
        }
        auto tmp_172_ = (*this).refs_length.value();
        if (tmp_172_ != (*this).refs.size()) {
            return ::futils::error::Error<>("encode: StringRefs::refs: dynamic length is not compatible with its length; tmp_172_!=(*this).refs.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_173_ : (*this).refs) {
            if (auto err = tmp_173_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> StringRefs::decode(::futils::binary::reader& r) {
        if (auto err = (*this).refs_length.decode(r)) {
            return err;
        }
        auto tmp_174_ = (*this).refs_length.value();
        (*this).refs.clear();
        for (size_t tmp_176_ = 0; tmp_176_ < tmp_174_; ++tmp_176_) {
            StringRef tmp_175_;
            if (auto err = tmp_175_.decode(r)) {
                return err;
            }
            (*this).refs.push_back(std::move(tmp_175_));
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> IdentIndexs::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).refs_length.encode(w)) {
            return err;
        }
        auto tmp_177_ = (*this).refs_length.value();
        if (tmp_177_ != (*this).refs.size()) {
            return ::futils::error::Error<>("encode: IdentIndexs::refs: dynamic length is not compatible with its length; tmp_177_!=(*this).refs.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_178_ : (*this).refs) {
            if (auto err = tmp_178_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> IdentIndexs::decode(::futils::binary::reader& r) {
        if (auto err = (*this).refs_length.decode(r)) {
            return err;
        }
        auto tmp_179_ = (*this).refs_length.value();
        (*this).refs.clear();
        for (size_t tmp_181_ = 0; tmp_181_ < tmp_179_; ++tmp_181_) {
            IdentIndex tmp_180_;
            if (auto err = tmp_180_.decode(r)) {
                return err;
            }
            (*this).refs.push_back(std::move(tmp_180_));
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Ranges::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).length.encode(w)) {
            return err;
        }
        auto tmp_182_ = (*this).length.value();
        if (tmp_182_ != (*this).ranges.size()) {
            return ::futils::error::Error<>("encode: Ranges::ranges: dynamic length is not compatible with its length; tmp_182_!=(*this).ranges.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_183_ : (*this).ranges) {
            if (auto err = tmp_183_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Ranges::decode(::futils::binary::reader& r) {
        if (auto err = (*this).length.decode(r)) {
            return err;
        }
        auto tmp_184_ = (*this).length.value();
        (*this).ranges.clear();
        for (size_t tmp_186_ = 0; tmp_186_ < tmp_184_; ++tmp_186_) {
            RangePacked tmp_185_;
            if (auto err = tmp_185_.decode(r)) {
                return err;
            }
            (*this).ranges.push_back(std::move(tmp_185_));
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> IdentRange::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).ident.encode(w)) {
            return err;
        }
        if (auto err = (*this).range.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> IdentRange::decode(::futils::binary::reader& r) {
        if (auto err = (*this).ident.decode(r)) {
            return err;
        }
        if (auto err = (*this).range.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> IdentRanges::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).length.encode(w)) {
            return err;
        }
        auto tmp_187_ = (*this).length.value();
        if (tmp_187_ != (*this).ranges.size()) {
            return ::futils::error::Error<>("encode: IdentRanges::ranges: dynamic length is not compatible with its length; tmp_187_!=(*this).ranges.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_188_ : (*this).ranges) {
            if (auto err = tmp_188_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> IdentRanges::decode(::futils::binary::reader& r) {
        if (auto err = (*this).length.decode(r)) {
            return err;
        }
        auto tmp_189_ = (*this).length.value();
        (*this).ranges.clear();
        for (size_t tmp_191_ = 0; tmp_191_ < tmp_189_; ++tmp_191_) {
            IdentRange tmp_190_;
            if (auto err = tmp_190_.decode(r)) {
                return err;
            }
            (*this).ranges.push_back(std::move(tmp_190_));
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> DebugInfo::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len_files.encode(w)) {
            return err;
        }
        auto tmp_192_ = (*this).len_files.value();
        if (tmp_192_ != (*this).files.size()) {
            return ::futils::error::Error<>("encode: DebugInfo::files: dynamic length is not compatible with its length; tmp_192_!=(*this).files.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_193_ : (*this).files) {
            if (auto err = tmp_193_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).len_locs.encode(w)) {
            return err;
        }
        auto tmp_194_ = (*this).len_locs.value();
        if (tmp_194_ != (*this).locs.size()) {
            return ::futils::error::Error<>("encode: DebugInfo::locs: dynamic length is not compatible with its length; tmp_194_!=(*this).locs.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_195_ : (*this).locs) {
            if (auto err = tmp_195_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> DebugInfo::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len_files.decode(r)) {
            return err;
        }
        auto tmp_196_ = (*this).len_files.value();
        (*this).files.clear();
        for (size_t tmp_198_ = 0; tmp_198_ < tmp_196_; ++tmp_198_) {
            String tmp_197_;
            if (auto err = tmp_197_.decode(r)) {
                return err;
            }
            (*this).files.push_back(std::move(tmp_197_));
        }
        if (auto err = (*this).len_locs.decode(r)) {
            return err;
        }
        auto tmp_199_ = (*this).len_locs.value();
        (*this).locs.clear();
        for (size_t tmp_201_ = 0; tmp_201_ < tmp_199_; ++tmp_201_) {
            Loc tmp_200_;
            if (auto err = tmp_200_.decode(r)) {
                return err;
            }
            (*this).locs.push_back(std::move(tmp_200_));
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Code::encode(::futils::binary::writer& w) const {
        auto tmp_202_ = static_cast<std::uint8_t>((*this).op);
        if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_202_), true)) {
            return ::futils::error::Error<>("encode: Code::op: write std::uint8_t failed", ::futils::error::Category::lib);
        }
        if (AbstractOp::METADATA == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_17 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<1>((*this).union_variant_16).metadata.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_18>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_18 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<2>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IMPORT == (*this).op) {
            if (!std::holds_alternative<union_struct_19>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_19 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<3>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<3>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            if (!std::holds_alternative<union_struct_20>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_20 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<4>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<4>((*this).union_variant_16).int_value.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_21>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_21 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<5>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_16).int_value.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            if (!std::holds_alternative<union_struct_22>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_22 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<6>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (!::futils::binary::write_num(w, static_cast<std::uint64_t>(std::get<6>((*this).union_variant_16).int_value64), true)) {
                return ::futils::error::Error<>("encode: Code::int_value64: write std::uint64_t failed", ::futils::error::Category::lib);
            }
        }
        else if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            if (!std::holds_alternative<union_struct_23>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_23 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<7>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            if (!std::holds_alternative<union_struct_24>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_24 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<8>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            if (!std::holds_alternative<union_struct_25>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_25 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<9>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_26>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_26 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<10>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<10>((*this).union_variant_16).type.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_27>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_27 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<11>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_28>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_28 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<12>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_29 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<13>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<13>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
            if (auto err = std::get<13>((*this).union_variant_16).type.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_30>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_30 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<14>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<14>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_31>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_31 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<15>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<15>((*this).union_variant_16).type.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_32>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_32 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<16>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<16>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<16>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_33 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<17>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<17>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
            auto tmp_203_ = static_cast<std::uint8_t>(std::get<17>((*this).union_variant_16).func_type);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_203_), true)) {
                return ::futils::error::Error<>("encode: Code::func_type: write std::uint8_t failed", ::futils::error::Category::lib);
            }
        }
        else if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_34>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_34 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<18>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<18>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_35>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_35 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<19>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<19>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_36>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_36 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<20>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<20>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_37 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<21>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<21>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<21>((*this).union_variant_16).type.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            if (!std::holds_alternative<union_struct_38>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_38 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<22>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<22>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_39 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<23>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<23>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<23>((*this).union_variant_16).type.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_40>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_40 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<24>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_41 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<25>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<25>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
            if (auto err = std::get<25>((*this).union_variant_16).type.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_42 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<26>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<26>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::RETURN_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_43>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_43 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<27>((*this).union_variant_16).type.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_44 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<28>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<28>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<28>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_45 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<29>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            auto tmp_204_ = static_cast<std::uint8_t>(std::get<29>((*this).union_variant_16).bop);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_204_), true)) {
                return ::futils::error::Error<>("encode: Code::bop: write std::uint8_t failed", ::futils::error::Category::lib);
            }
            if (auto err = std::get<29>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<29>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_46 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<30>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<30>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<30>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_47>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_47 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<31>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            auto tmp_205_ = static_cast<std::uint8_t>(std::get<31>((*this).union_variant_16).uop);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_205_), true)) {
                return ::futils::error::Error<>("encode: Code::uop: write std::uint8_t failed", ::futils::error::Category::lib);
            }
            if (auto err = std::get<31>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::LOOP_CONDITION == (*this).op) {
            if (!std::holds_alternative<union_struct_48>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_48 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<32>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_49 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<33>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<33>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<33>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_50 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<34>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<34>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<34>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_51 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<35>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<35>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<35>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<35>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::PHI == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_52 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<36>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<36>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<36>((*this).union_variant_16).phi_params.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_53 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<37>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<37>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ADDRESS_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_54 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<38>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<38>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::OPTIONAL_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_55 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<39>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<39>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<39>((*this).union_variant_16).type.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::EMPTY_PTR == (*this).op) {
            if (!std::holds_alternative<union_struct_56>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_56 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<40>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            if (!std::holds_alternative<union_struct_57>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_57 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<41>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            if (!std::holds_alternative<union_struct_58>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_58 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<42>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            if (!std::holds_alternative<union_struct_59>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_59 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<43>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_60>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_60 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<44>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<44>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<44>((*this).union_variant_16).fallback.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_61 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<45>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<45>((*this).union_variant_16).endian.encode(w)) {
                return err;
            }
            if (auto err = std::get<45>((*this).union_variant_16).bit_size.encode(w)) {
                return err;
            }
            if (auto err = std::get<45>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
            if (auto err = std::get<45>((*this).union_variant_16).fallback.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_62 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<46>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<46>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<46>((*this).union_variant_16).endian.encode(w)) {
                return err;
            }
            if (auto err = std::get<46>((*this).union_variant_16).bit_size.encode(w)) {
                return err;
            }
            if (auto err = std::get<46>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
            if (auto err = std::get<46>((*this).union_variant_16).fallback.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_63 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<47>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<47>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<47>((*this).union_variant_16).endian.encode(w)) {
                return err;
            }
            if (auto err = std::get<47>((*this).union_variant_16).bit_size.encode(w)) {
                return err;
            }
            if (auto err = std::get<47>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
            if (auto err = std::get<47>((*this).union_variant_16).array_length.encode(w)) {
                return err;
            }
            if (auto err = std::get<47>((*this).union_variant_16).fallback.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_64 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<48>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<48>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<48>((*this).union_variant_16).endian.encode(w)) {
                return err;
            }
            if (auto err = std::get<48>((*this).union_variant_16).bit_size.encode(w)) {
                return err;
            }
            if (auto err = std::get<48>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
            if (auto err = std::get<48>((*this).union_variant_16).fallback.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_65 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<49>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<49>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<49>((*this).union_variant_16).endian.encode(w)) {
                return err;
            }
            if (auto err = std::get<49>((*this).union_variant_16).bit_size.encode(w)) {
                return err;
            }
            if (auto err = std::get<49>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
            if (auto err = std::get<49>((*this).union_variant_16).array_length.encode(w)) {
                return err;
            }
            if (auto err = std::get<49>((*this).union_variant_16).fallback.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_66 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<50>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<50>((*this).union_variant_16).endian.encode(w)) {
                return err;
            }
            if (auto err = std::get<50>((*this).union_variant_16).bit_size.encode(w)) {
                return err;
            }
            if (auto err = std::get<50>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
            if (auto err = std::get<50>((*this).union_variant_16).fallback.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_67 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<51>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<51>((*this).union_variant_16).endian.encode(w)) {
                return err;
            }
            if (auto err = std::get<51>((*this).union_variant_16).bit_size.encode(w)) {
                return err;
            }
            if (auto err = std::get<51>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
            if (auto err = std::get<51>((*this).union_variant_16).fallback.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_68 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<52>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<52>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<52>((*this).union_variant_16).endian.encode(w)) {
                return err;
            }
            if (auto err = std::get<52>((*this).union_variant_16).bit_size.encode(w)) {
                return err;
            }
            if (auto err = std::get<52>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_69 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<53>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<53>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<53>((*this).union_variant_16).type.encode(w)) {
                return err;
            }
            if (auto err = std::get<53>((*this).union_variant_16).from_type.encode(w)) {
                return err;
            }
            auto tmp_206_ = static_cast<std::uint8_t>(std::get<53>((*this).union_variant_16).cast_type);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_206_), true)) {
                return ::futils::error::Error<>("encode: Code::cast_type: write std::uint8_t failed", ::futils::error::Category::lib);
            }
        }
        else if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_70>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_70 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<54>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<54>((*this).union_variant_16).type.encode(w)) {
                return err;
            }
            if (auto err = std::get<54>((*this).union_variant_16).param.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_71>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_71 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<55>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<55>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<55>((*this).union_variant_16).bit_size_plus.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_72>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_72 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<56>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<56>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<56>((*this).union_variant_16).bit_size_plus.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::INC == (*this).op) {
            if (!std::holds_alternative<union_struct_73>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_73 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<57>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::EVAL_EXPR == (*this).op) {
            if (!std::holds_alternative<union_struct_74>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_74 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<58>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::NEW_OBJECT == (*this).op) {
            if (!std::holds_alternative<union_struct_75>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_75 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<59>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<59>((*this).union_variant_16).type.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            if (!std::holds_alternative<union_struct_76>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_76 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<60>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<60>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            if (!std::holds_alternative<union_struct_77>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_77 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<61>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<61>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ASSERT == (*this).op) {
            if (!std::holds_alternative<union_struct_78>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_78 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<62>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<62>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::LENGTH_CHECK == (*this).op) {
            if (!std::holds_alternative<union_struct_79>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_79 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<63>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<63>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<63>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IF == (*this).op) {
            if (!std::holds_alternative<union_struct_80>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_80 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<64>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ELIF == (*this).op) {
            if (!std::holds_alternative<union_struct_81>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_81 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<65>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_82>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_82 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<66>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_83>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_83 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<67>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_84>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_84 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<68>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_85>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_85 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<69>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_86>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_86 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<70>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_87>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_87 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<71>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_88>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_88 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<72>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_89>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_89 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<73>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_90 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<74>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<74>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<74>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<74>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_91 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<75>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<75>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<75>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<75>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_92 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<76>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<76>((*this).union_variant_16).type.encode(w)) {
                return err;
            }
            if (auto err = std::get<76>((*this).union_variant_16).param.encode(w)) {
                return err;
            }
            if (auto err = std::get<76>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
            auto tmp_207_ = static_cast<std::uint8_t>(std::get<76>((*this).union_variant_16).merge_mode);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_207_), true)) {
                return ::futils::error::Error<>("encode: Code::merge_mode: write std::uint8_t failed", ::futils::error::Category::lib);
            }
        }
        else if (AbstractOp::CASE == (*this).op) {
            if (!std::holds_alternative<union_struct_93>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_93 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<77>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_94>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_94 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<78>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_95 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<79>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<79>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
            if (auto err = std::get<79>((*this).union_variant_16).type.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::APPEND == (*this).op) {
            if (!std::holds_alternative<union_struct_96>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_96 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<80>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<80>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_97 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<81>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<81>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
            auto tmp_208_ = static_cast<std::uint8_t>(std::get<81>((*this).union_variant_16).packed_op_type);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_208_), true)) {
                return ::futils::error::Error<>("encode: Code::packed_op_type: write std::uint8_t failed", ::futils::error::Category::lib);
            }
            if (auto err = std::get<81>((*this).union_variant_16).endian.encode(w)) {
                return err;
            }
            if (auto err = std::get<81>((*this).union_variant_16).bit_size.encode(w)) {
                return err;
            }
            if (auto err = std::get<81>((*this).union_variant_16).fallback.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_98>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_98 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<82>((*this).union_variant_16).fallback.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_99 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<83>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<83>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
            auto tmp_209_ = static_cast<std::uint8_t>(std::get<83>((*this).union_variant_16).packed_op_type);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_209_), true)) {
                return ::futils::error::Error<>("encode: Code::packed_op_type: write std::uint8_t failed", ::futils::error::Category::lib);
            }
            if (auto err = std::get<83>((*this).union_variant_16).endian.encode(w)) {
                return err;
            }
            if (auto err = std::get<83>((*this).union_variant_16).bit_size.encode(w)) {
                return err;
            }
            if (auto err = std::get<83>((*this).union_variant_16).fallback.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_100>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_100 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<84>((*this).union_variant_16).fallback.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::SWITCH_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_101>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_101 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<85>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::CHECK_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_102>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_102 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<86>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            auto tmp_210_ = static_cast<std::uint8_t>(std::get<86>((*this).union_variant_16).check_at);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_210_), true)) {
                return ::futils::error::Error<>("encode: Code::check_at: write std::uint8_t failed", ::futils::error::Category::lib);
            }
        }
        else if (AbstractOp::RET == (*this).op) {
            if (!std::holds_alternative<union_struct_103>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_103 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<87>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
            if (auto err = std::get<87>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::RET_SUCCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_104>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_104 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<88>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            if (!std::holds_alternative<union_struct_105>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_105 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<89>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            if (!std::holds_alternative<union_struct_106>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_106 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<90>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_107>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_107 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<91>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_108>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_108 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<92>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_109>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_109 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<93>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<93>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<93>((*this).union_variant_16).encode_flags.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_110>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_110 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<94>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<94>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<94>((*this).union_variant_16).decode_flags.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_111>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_111 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<95>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<95>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<95>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<95>((*this).union_variant_16).type.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_112>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_112 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<96>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            if (!std::holds_alternative<union_struct_113>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_113 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<97>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<97>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            if (!std::holds_alternative<union_struct_114>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_114 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<98>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<98>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_115>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_115 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<99>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            if (!std::holds_alternative<union_struct_116>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_116 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<100>((*this).union_variant_16).param.encode(w)) {
                return err;
            }
            if (auto err = std::get<100>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_117>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_117 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<101>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<101>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<101>((*this).union_variant_16).param.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_118>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_118 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<102>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_119>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_119 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<103>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_120>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_120 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<104>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_121>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_121 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<105>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ARRAY_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_122>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_122 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<106>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<106>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::RESERVE_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_123>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_123 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<107>((*this).union_variant_16).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<107>((*this).union_variant_16).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_124>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_124 is not set", ::futils::error::Category::lib);
            }
            auto tmp_211_ = static_cast<std::uint8_t>(std::get<108>((*this).union_variant_16).sub_range_type);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_211_), true)) {
                return ::futils::error::Error<>("encode: Code::sub_range_type: write std::uint8_t failed", ::futils::error::Category::lib);
            }
            if (auto err = std::get<108>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<108>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_125>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_125 is not set", ::futils::error::Category::lib);
            }
            auto tmp_212_ = static_cast<std::uint8_t>(std::get<109>((*this).union_variant_16).sub_range_type);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_212_), true)) {
                return ::futils::error::Error<>("encode: Code::sub_range_type: write std::uint8_t failed", ::futils::error::Category::lib);
            }
            if (auto err = std::get<109>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<109>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::SEEK_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_126>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_126 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<110>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<110>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::SEEK_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_127>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_127 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<111>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<111>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::CAN_READ == (*this).op) {
            if (!std::holds_alternative<union_struct_128>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_128 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<112>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<112>((*this).union_variant_16).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IS_LITTLE_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_129>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_129 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<113>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<113>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<113>((*this).union_variant_16).fallback.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::REMAIN_BYTES == (*this).op) {
            if (!std::holds_alternative<union_struct_130>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_130 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<114>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_FALLBACK == (*this).op) {
            if (!std::holds_alternative<union_struct_131>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_131 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<115>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_COND_BLOCK == (*this).op) {
            if (!std::holds_alternative<union_struct_132>(union_variant_16)) {
                return ::futils::error::Error<>("encode: Code: union_variant_16 variant alternative union_struct_132 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<116>((*this).union_variant_16).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<116>((*this).union_variant_16).ref.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Code::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_213_ = 0;
        if (!::futils::binary::read_num(r, tmp_213_, true)) {
            return ::futils::error::Error<>("decode: Code::op: read int failed", ::futils::error::Category::lib);
        }
        (*this).op = static_cast<AbstractOp>(tmp_213_);
        if (AbstractOp::METADATA == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_16)) {
                union_variant_16 = union_struct_17();
            }
            if (auto err = std::get<1>((*this).union_variant_16).metadata.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_18>(union_variant_16)) {
                union_variant_16 = union_struct_18();
            }
            if (auto err = std::get<2>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IMPORT == (*this).op) {
            if (!std::holds_alternative<union_struct_19>(union_variant_16)) {
                union_variant_16 = union_struct_19();
            }
            if (auto err = std::get<3>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<3>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            if (!std::holds_alternative<union_struct_20>(union_variant_16)) {
                union_variant_16 = union_struct_20();
            }
            if (auto err = std::get<4>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<4>((*this).union_variant_16).int_value.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_21>(union_variant_16)) {
                union_variant_16 = union_struct_21();
            }
            if (auto err = std::get<5>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_16).int_value.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            if (!std::holds_alternative<union_struct_22>(union_variant_16)) {
                union_variant_16 = union_struct_22();
            }
            if (auto err = std::get<6>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (!::futils::binary::read_num(r, std::get<6>((*this).union_variant_16).int_value64, true)) {
                return ::futils::error::Error<>("decode: Code::int_value64: read int failed", ::futils::error::Category::lib);
            }
        }
        else if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            if (!std::holds_alternative<union_struct_23>(union_variant_16)) {
                union_variant_16 = union_struct_23();
            }
            if (auto err = std::get<7>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            if (!std::holds_alternative<union_struct_24>(union_variant_16)) {
                union_variant_16 = union_struct_24();
            }
            if (auto err = std::get<8>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            if (!std::holds_alternative<union_struct_25>(union_variant_16)) {
                union_variant_16 = union_struct_25();
            }
            if (auto err = std::get<9>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_26>(union_variant_16)) {
                union_variant_16 = union_struct_26();
            }
            if (auto err = std::get<10>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<10>((*this).union_variant_16).type.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_27>(union_variant_16)) {
                union_variant_16 = union_struct_27();
            }
            if (auto err = std::get<11>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_28>(union_variant_16)) {
                union_variant_16 = union_struct_28();
            }
            if (auto err = std::get<12>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_16)) {
                union_variant_16 = union_struct_29();
            }
            if (auto err = std::get<13>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<13>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
            if (auto err = std::get<13>((*this).union_variant_16).type.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_30>(union_variant_16)) {
                union_variant_16 = union_struct_30();
            }
            if (auto err = std::get<14>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<14>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_31>(union_variant_16)) {
                union_variant_16 = union_struct_31();
            }
            if (auto err = std::get<15>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<15>((*this).union_variant_16).type.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_32>(union_variant_16)) {
                union_variant_16 = union_struct_32();
            }
            if (auto err = std::get<16>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<16>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<16>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_16)) {
                union_variant_16 = union_struct_33();
            }
            if (auto err = std::get<17>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<17>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
            std::uint8_t tmp_214_ = 0;
            if (!::futils::binary::read_num(r, tmp_214_, true)) {
                return ::futils::error::Error<>("decode: Code::func_type: read int failed", ::futils::error::Category::lib);
            }
            std::get<17>((*this).union_variant_16).func_type = static_cast<FunctionType>(tmp_214_);
        }
        else if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_34>(union_variant_16)) {
                union_variant_16 = union_struct_34();
            }
            if (auto err = std::get<18>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<18>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_35>(union_variant_16)) {
                union_variant_16 = union_struct_35();
            }
            if (auto err = std::get<19>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<19>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_36>(union_variant_16)) {
                union_variant_16 = union_struct_36();
            }
            if (auto err = std::get<20>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<20>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_16)) {
                union_variant_16 = union_struct_37();
            }
            if (auto err = std::get<21>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<21>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<21>((*this).union_variant_16).type.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_VARIABLE_REF == (*this).op) {
            if (!std::holds_alternative<union_struct_38>(union_variant_16)) {
                union_variant_16 = union_struct_38();
            }
            if (auto err = std::get<22>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<22>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_CONSTANT == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_16)) {
                union_variant_16 = union_struct_39();
            }
            if (auto err = std::get<23>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<23>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<23>((*this).union_variant_16).type.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_40>(union_variant_16)) {
                union_variant_16 = union_struct_40();
            }
            if (auto err = std::get<24>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_16)) {
                union_variant_16 = union_struct_41();
            }
            if (auto err = std::get<25>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<25>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
            if (auto err = std::get<25>((*this).union_variant_16).type.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_16)) {
                union_variant_16 = union_struct_42();
            }
            if (auto err = std::get<26>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<26>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::RETURN_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_43>(union_variant_16)) {
                union_variant_16 = union_struct_43();
            }
            if (auto err = std::get<27>((*this).union_variant_16).type.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::FIELD_AVAILABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_16)) {
                union_variant_16 = union_struct_44();
            }
            if (auto err = std::get<28>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<28>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<28>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_16)) {
                union_variant_16 = union_struct_45();
            }
            if (auto err = std::get<29>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            std::uint8_t tmp_215_ = 0;
            if (!::futils::binary::read_num(r, tmp_215_, true)) {
                return ::futils::error::Error<>("decode: Code::bop: read int failed", ::futils::error::Category::lib);
            }
            std::get<29>((*this).union_variant_16).bop = static_cast<BinaryOp>(tmp_215_);
            if (auto err = std::get<29>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<29>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::NOT_PREV_THEN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_16)) {
                union_variant_16 = union_struct_46();
            }
            if (auto err = std::get<30>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<30>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<30>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_47>(union_variant_16)) {
                union_variant_16 = union_struct_47();
            }
            if (auto err = std::get<31>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            std::uint8_t tmp_216_ = 0;
            if (!::futils::binary::read_num(r, tmp_216_, true)) {
                return ::futils::error::Error<>("decode: Code::uop: read int failed", ::futils::error::Category::lib);
            }
            std::get<31>((*this).union_variant_16).uop = static_cast<UnaryOp>(tmp_216_);
            if (auto err = std::get<31>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::LOOP_CONDITION == (*this).op) {
            if (!std::holds_alternative<union_struct_48>(union_variant_16)) {
                union_variant_16 = union_struct_48();
            }
            if (auto err = std::get<32>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_16)) {
                union_variant_16 = union_struct_49();
            }
            if (auto err = std::get<33>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<33>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<33>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_16)) {
                union_variant_16 = union_struct_50();
            }
            if (auto err = std::get<34>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<34>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<34>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_16)) {
                union_variant_16 = union_struct_51();
            }
            if (auto err = std::get<35>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<35>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<35>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<35>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::PHI == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_16)) {
                union_variant_16 = union_struct_52();
            }
            if (auto err = std::get<36>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<36>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<36>((*this).union_variant_16).phi_params.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::PROPERTY_ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_16)) {
                union_variant_16 = union_struct_53();
            }
            if (auto err = std::get<37>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<37>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ADDRESS_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_16)) {
                union_variant_16 = union_struct_54();
            }
            if (auto err = std::get<38>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<38>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::OPTIONAL_OF == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_16)) {
                union_variant_16 = union_struct_55();
            }
            if (auto err = std::get<39>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<39>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<39>((*this).union_variant_16).type.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::EMPTY_PTR == (*this).op) {
            if (!std::holds_alternative<union_struct_56>(union_variant_16)) {
                union_variant_16 = union_struct_56();
            }
            if (auto err = std::get<40>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::EMPTY_OPTIONAL == (*this).op) {
            if (!std::holds_alternative<union_struct_57>(union_variant_16)) {
                union_variant_16 = union_struct_57();
            }
            if (auto err = std::get<41>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::BACKWARD_INPUT == (*this).op) {
            if (!std::holds_alternative<union_struct_58>(union_variant_16)) {
                union_variant_16 = union_struct_58();
            }
            if (auto err = std::get<42>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::BACKWARD_OUTPUT == (*this).op) {
            if (!std::holds_alternative<union_struct_59>(union_variant_16)) {
                union_variant_16 = union_struct_59();
            }
            if (auto err = std::get<43>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DYNAMIC_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_60>(union_variant_16)) {
                union_variant_16 = union_struct_60();
            }
            if (auto err = std::get<44>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<44>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<44>((*this).union_variant_16).fallback.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_16)) {
                union_variant_16 = union_struct_61();
            }
            if (auto err = std::get<45>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<45>((*this).union_variant_16).endian.decode(r)) {
                return err;
            }
            if (auto err = std::get<45>((*this).union_variant_16).bit_size.decode(r)) {
                return err;
            }
            if (auto err = std::get<45>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
            if (auto err = std::get<45>((*this).union_variant_16).fallback.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_16)) {
                union_variant_16 = union_struct_62();
            }
            if (auto err = std::get<46>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<46>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<46>((*this).union_variant_16).endian.decode(r)) {
                return err;
            }
            if (auto err = std::get<46>((*this).union_variant_16).bit_size.decode(r)) {
                return err;
            }
            if (auto err = std::get<46>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
            if (auto err = std::get<46>((*this).union_variant_16).fallback.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ENCODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_16)) {
                union_variant_16 = union_struct_63();
            }
            if (auto err = std::get<47>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<47>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<47>((*this).union_variant_16).endian.decode(r)) {
                return err;
            }
            if (auto err = std::get<47>((*this).union_variant_16).bit_size.decode(r)) {
                return err;
            }
            if (auto err = std::get<47>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
            if (auto err = std::get<47>((*this).union_variant_16).array_length.decode(r)) {
                return err;
            }
            if (auto err = std::get<47>((*this).union_variant_16).fallback.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_16)) {
                union_variant_16 = union_struct_64();
            }
            if (auto err = std::get<48>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<48>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<48>((*this).union_variant_16).endian.decode(r)) {
                return err;
            }
            if (auto err = std::get<48>((*this).union_variant_16).bit_size.decode(r)) {
                return err;
            }
            if (auto err = std::get<48>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
            if (auto err = std::get<48>((*this).union_variant_16).fallback.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECODE_INT_VECTOR_FIXED == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_16)) {
                union_variant_16 = union_struct_65();
            }
            if (auto err = std::get<49>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<49>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<49>((*this).union_variant_16).endian.decode(r)) {
                return err;
            }
            if (auto err = std::get<49>((*this).union_variant_16).bit_size.decode(r)) {
                return err;
            }
            if (auto err = std::get<49>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
            if (auto err = std::get<49>((*this).union_variant_16).array_length.decode(r)) {
                return err;
            }
            if (auto err = std::get<49>((*this).union_variant_16).fallback.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_16)) {
                union_variant_16 = union_struct_66();
            }
            if (auto err = std::get<50>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<50>((*this).union_variant_16).endian.decode(r)) {
                return err;
            }
            if (auto err = std::get<50>((*this).union_variant_16).bit_size.decode(r)) {
                return err;
            }
            if (auto err = std::get<50>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
            if (auto err = std::get<50>((*this).union_variant_16).fallback.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_16)) {
                union_variant_16 = union_struct_67();
            }
            if (auto err = std::get<51>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<51>((*this).union_variant_16).endian.decode(r)) {
                return err;
            }
            if (auto err = std::get<51>((*this).union_variant_16).bit_size.decode(r)) {
                return err;
            }
            if (auto err = std::get<51>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
            if (auto err = std::get<51>((*this).union_variant_16).fallback.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_16)) {
                union_variant_16 = union_struct_68();
            }
            if (auto err = std::get<52>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<52>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<52>((*this).union_variant_16).endian.decode(r)) {
                return err;
            }
            if (auto err = std::get<52>((*this).union_variant_16).bit_size.decode(r)) {
                return err;
            }
            if (auto err = std::get<52>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_16)) {
                union_variant_16 = union_struct_69();
            }
            if (auto err = std::get<53>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<53>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<53>((*this).union_variant_16).type.decode(r)) {
                return err;
            }
            if (auto err = std::get<53>((*this).union_variant_16).from_type.decode(r)) {
                return err;
            }
            std::uint8_t tmp_217_ = 0;
            if (!::futils::binary::read_num(r, tmp_217_, true)) {
                return ::futils::error::Error<>("decode: Code::cast_type: read int failed", ::futils::error::Category::lib);
            }
            std::get<53>((*this).union_variant_16).cast_type = static_cast<CastType>(tmp_217_);
        }
        else if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_70>(union_variant_16)) {
                union_variant_16 = union_struct_70();
            }
            if (auto err = std::get<54>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<54>((*this).union_variant_16).type.decode(r)) {
                return err;
            }
            if (auto err = std::get<54>((*this).union_variant_16).param.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_71>(union_variant_16)) {
                union_variant_16 = union_struct_71();
            }
            if (auto err = std::get<55>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<55>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<55>((*this).union_variant_16).bit_size_plus.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_72>(union_variant_16)) {
                union_variant_16 = union_struct_72();
            }
            if (auto err = std::get<56>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<56>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<56>((*this).union_variant_16).bit_size_plus.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::INC == (*this).op) {
            if (!std::holds_alternative<union_struct_73>(union_variant_16)) {
                union_variant_16 = union_struct_73();
            }
            if (auto err = std::get<57>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::EVAL_EXPR == (*this).op) {
            if (!std::holds_alternative<union_struct_74>(union_variant_16)) {
                union_variant_16 = union_struct_74();
            }
            if (auto err = std::get<58>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::NEW_OBJECT == (*this).op) {
            if (!std::holds_alternative<union_struct_75>(union_variant_16)) {
                union_variant_16 = union_struct_75();
            }
            if (auto err = std::get<59>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<59>((*this).union_variant_16).type.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::INIT_RECURSIVE_STRUCT == (*this).op) {
            if (!std::holds_alternative<union_struct_76>(union_variant_16)) {
                union_variant_16 = union_struct_76();
            }
            if (auto err = std::get<60>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<60>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::CHECK_RECURSIVE_STRUCT == (*this).op) {
            if (!std::holds_alternative<union_struct_77>(union_variant_16)) {
                union_variant_16 = union_struct_77();
            }
            if (auto err = std::get<61>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<61>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ASSERT == (*this).op) {
            if (!std::holds_alternative<union_struct_78>(union_variant_16)) {
                union_variant_16 = union_struct_78();
            }
            if (auto err = std::get<62>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<62>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::LENGTH_CHECK == (*this).op) {
            if (!std::holds_alternative<union_struct_79>(union_variant_16)) {
                union_variant_16 = union_struct_79();
            }
            if (auto err = std::get<63>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<63>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<63>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IF == (*this).op) {
            if (!std::holds_alternative<union_struct_80>(union_variant_16)) {
                union_variant_16 = union_struct_80();
            }
            if (auto err = std::get<64>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ELIF == (*this).op) {
            if (!std::holds_alternative<union_struct_81>(union_variant_16)) {
                union_variant_16 = union_struct_81();
            }
            if (auto err = std::get<65>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_82>(union_variant_16)) {
                union_variant_16 = union_struct_82();
            }
            if (auto err = std::get<66>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_83>(union_variant_16)) {
                union_variant_16 = union_struct_83();
            }
            if (auto err = std::get<67>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_84>(union_variant_16)) {
                union_variant_16 = union_struct_84();
            }
            if (auto err = std::get<68>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_85>(union_variant_16)) {
                union_variant_16 = union_struct_85();
            }
            if (auto err = std::get<69>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_86>(union_variant_16)) {
                union_variant_16 = union_struct_86();
            }
            if (auto err = std::get<70>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_87>(union_variant_16)) {
                union_variant_16 = union_struct_87();
            }
            if (auto err = std::get<71>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_88>(union_variant_16)) {
                union_variant_16 = union_struct_88();
            }
            if (auto err = std::get<72>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_89>(union_variant_16)) {
                union_variant_16 = union_struct_89();
            }
            if (auto err = std::get<73>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_16)) {
                union_variant_16 = union_struct_90();
            }
            if (auto err = std::get<74>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<74>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<74>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<74>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::CONDITIONAL_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_16)) {
                union_variant_16 = union_struct_91();
            }
            if (auto err = std::get<75>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<75>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<75>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<75>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::MERGED_CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_16)) {
                union_variant_16 = union_struct_92();
            }
            if (auto err = std::get<76>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<76>((*this).union_variant_16).type.decode(r)) {
                return err;
            }
            if (auto err = std::get<76>((*this).union_variant_16).param.decode(r)) {
                return err;
            }
            if (auto err = std::get<76>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
            std::uint8_t tmp_218_ = 0;
            if (!::futils::binary::read_num(r, tmp_218_, true)) {
                return ::futils::error::Error<>("decode: Code::merge_mode: read int failed", ::futils::error::Category::lib);
            }
            std::get<76>((*this).union_variant_16).merge_mode = static_cast<MergeMode>(tmp_218_);
        }
        else if (AbstractOp::CASE == (*this).op) {
            if (!std::holds_alternative<union_struct_93>(union_variant_16)) {
                union_variant_16 = union_struct_93();
            }
            if (auto err = std::get<77>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_94>(union_variant_16)) {
                union_variant_16 = union_struct_94();
            }
            if (auto err = std::get<78>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_16)) {
                union_variant_16 = union_struct_95();
            }
            if (auto err = std::get<79>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<79>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
            if (auto err = std::get<79>((*this).union_variant_16).type.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::APPEND == (*this).op) {
            if (!std::holds_alternative<union_struct_96>(union_variant_16)) {
                union_variant_16 = union_struct_96();
            }
            if (auto err = std::get<80>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<80>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::BEGIN_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_16)) {
                union_variant_16 = union_struct_97();
            }
            if (auto err = std::get<81>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<81>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
            std::uint8_t tmp_219_ = 0;
            if (!::futils::binary::read_num(r, tmp_219_, true)) {
                return ::futils::error::Error<>("decode: Code::packed_op_type: read int failed", ::futils::error::Category::lib);
            }
            std::get<81>((*this).union_variant_16).packed_op_type = static_cast<PackedOpType>(tmp_219_);
            if (auto err = std::get<81>((*this).union_variant_16).endian.decode(r)) {
                return err;
            }
            if (auto err = std::get<81>((*this).union_variant_16).bit_size.decode(r)) {
                return err;
            }
            if (auto err = std::get<81>((*this).union_variant_16).fallback.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::END_ENCODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_98>(union_variant_16)) {
                union_variant_16 = union_struct_98();
            }
            if (auto err = std::get<82>((*this).union_variant_16).fallback.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::BEGIN_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_16)) {
                union_variant_16 = union_struct_99();
            }
            if (auto err = std::get<83>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<83>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
            std::uint8_t tmp_220_ = 0;
            if (!::futils::binary::read_num(r, tmp_220_, true)) {
                return ::futils::error::Error<>("decode: Code::packed_op_type: read int failed", ::futils::error::Category::lib);
            }
            std::get<83>((*this).union_variant_16).packed_op_type = static_cast<PackedOpType>(tmp_220_);
            if (auto err = std::get<83>((*this).union_variant_16).endian.decode(r)) {
                return err;
            }
            if (auto err = std::get<83>((*this).union_variant_16).bit_size.decode(r)) {
                return err;
            }
            if (auto err = std::get<83>((*this).union_variant_16).fallback.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::END_DECODE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_100>(union_variant_16)) {
                union_variant_16 = union_struct_100();
            }
            if (auto err = std::get<84>((*this).union_variant_16).fallback.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::SWITCH_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_101>(union_variant_16)) {
                union_variant_16 = union_struct_101();
            }
            if (auto err = std::get<85>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::CHECK_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_102>(union_variant_16)) {
                union_variant_16 = union_struct_102();
            }
            if (auto err = std::get<86>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            std::uint8_t tmp_221_ = 0;
            if (!::futils::binary::read_num(r, tmp_221_, true)) {
                return ::futils::error::Error<>("decode: Code::check_at: read int failed", ::futils::error::Category::lib);
            }
            std::get<86>((*this).union_variant_16).check_at = static_cast<UnionCheckAt>(tmp_221_);
        }
        else if (AbstractOp::RET == (*this).op) {
            if (!std::holds_alternative<union_struct_103>(union_variant_16)) {
                union_variant_16 = union_struct_103();
            }
            if (auto err = std::get<87>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
            if (auto err = std::get<87>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::RET_SUCCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_104>(union_variant_16)) {
                union_variant_16 = union_struct_104();
            }
            if (auto err = std::get<88>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::RET_PROPERTY_SETTER_OK == (*this).op) {
            if (!std::holds_alternative<union_struct_105>(union_variant_16)) {
                union_variant_16 = union_struct_105();
            }
            if (auto err = std::get<89>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::RET_PROPERTY_SETTER_FAIL == (*this).op) {
            if (!std::holds_alternative<union_struct_106>(union_variant_16)) {
                union_variant_16 = union_struct_106();
            }
            if (auto err = std::get<90>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_107>(union_variant_16)) {
                union_variant_16 = union_struct_107();
            }
            if (auto err = std::get<91>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_108>(union_variant_16)) {
                union_variant_16 = union_struct_108();
            }
            if (auto err = std::get<92>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_109>(union_variant_16)) {
                union_variant_16 = union_struct_109();
            }
            if (auto err = std::get<93>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<93>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<93>((*this).union_variant_16).encode_flags.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_110>(union_variant_16)) {
                union_variant_16 = union_struct_110();
            }
            if (auto err = std::get<94>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<94>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<94>((*this).union_variant_16).decode_flags.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::PROPERTY_INPUT_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_111>(union_variant_16)) {
                union_variant_16 = union_struct_111();
            }
            if (auto err = std::get<95>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<95>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<95>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<95>((*this).union_variant_16).type.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::PROPERTY_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_112>(union_variant_16)) {
                union_variant_16 = union_struct_112();
            }
            if (auto err = std::get<96>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PROPERTY_SETTER == (*this).op) {
            if (!std::holds_alternative<union_struct_113>(union_variant_16)) {
                union_variant_16 = union_struct_113();
            }
            if (auto err = std::get<97>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<97>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PROPERTY_GETTER == (*this).op) {
            if (!std::holds_alternative<union_struct_114>(union_variant_16)) {
                union_variant_16 = union_struct_114();
            }
            if (auto err = std::get<98>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<98>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_115>(union_variant_16)) {
                union_variant_16 = union_struct_115();
            }
            if (auto err = std::get<99>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            if (!std::holds_alternative<union_struct_116>(union_variant_16)) {
                union_variant_16 = union_struct_116();
            }
            if (auto err = std::get<100>((*this).union_variant_16).param.decode(r)) {
                return err;
            }
            if (auto err = std::get<100>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_117>(union_variant_16)) {
                union_variant_16 = union_struct_117();
            }
            if (auto err = std::get<101>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<101>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<101>((*this).union_variant_16).param.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::INPUT_BIT_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_118>(union_variant_16)) {
                union_variant_16 = union_struct_118();
            }
            if (auto err = std::get<102>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::OUTPUT_BIT_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_119>(union_variant_16)) {
                union_variant_16 = union_struct_119();
            }
            if (auto err = std::get<103>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::INPUT_BYTE_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_120>(union_variant_16)) {
                union_variant_16 = union_struct_120();
            }
            if (auto err = std::get<104>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::OUTPUT_BYTE_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_121>(union_variant_16)) {
                union_variant_16 = union_struct_121();
            }
            if (auto err = std::get<105>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ARRAY_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_122>(union_variant_16)) {
                union_variant_16 = union_struct_122();
            }
            if (auto err = std::get<106>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<106>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::RESERVE_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_123>(union_variant_16)) {
                union_variant_16 = union_struct_123();
            }
            if (auto err = std::get<107>((*this).union_variant_16).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<107>((*this).union_variant_16).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_124>(union_variant_16)) {
                union_variant_16 = union_struct_124();
            }
            std::uint8_t tmp_222_ = 0;
            if (!::futils::binary::read_num(r, tmp_222_, true)) {
                return ::futils::error::Error<>("decode: Code::sub_range_type: read int failed", ::futils::error::Category::lib);
            }
            std::get<108>((*this).union_variant_16).sub_range_type = static_cast<SubRangeType>(tmp_222_);
            if (auto err = std::get<108>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<108>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_125>(union_variant_16)) {
                union_variant_16 = union_struct_125();
            }
            std::uint8_t tmp_223_ = 0;
            if (!::futils::binary::read_num(r, tmp_223_, true)) {
                return ::futils::error::Error<>("decode: Code::sub_range_type: read int failed", ::futils::error::Category::lib);
            }
            std::get<109>((*this).union_variant_16).sub_range_type = static_cast<SubRangeType>(tmp_223_);
            if (auto err = std::get<109>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<109>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::SEEK_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_126>(union_variant_16)) {
                union_variant_16 = union_struct_126();
            }
            if (auto err = std::get<110>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<110>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::SEEK_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_127>(union_variant_16)) {
                union_variant_16 = union_struct_127();
            }
            if (auto err = std::get<111>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<111>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::CAN_READ == (*this).op) {
            if (!std::holds_alternative<union_struct_128>(union_variant_16)) {
                union_variant_16 = union_struct_128();
            }
            if (auto err = std::get<112>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<112>((*this).union_variant_16).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IS_LITTLE_ENDIAN == (*this).op) {
            if (!std::holds_alternative<union_struct_129>(union_variant_16)) {
                union_variant_16 = union_struct_129();
            }
            if (auto err = std::get<113>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<113>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<113>((*this).union_variant_16).fallback.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::REMAIN_BYTES == (*this).op) {
            if (!std::holds_alternative<union_struct_130>(union_variant_16)) {
                union_variant_16 = union_struct_130();
            }
            if (auto err = std::get<114>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_FALLBACK == (*this).op) {
            if (!std::holds_alternative<union_struct_131>(union_variant_16)) {
                union_variant_16 = union_struct_131();
            }
            if (auto err = std::get<115>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_COND_BLOCK == (*this).op) {
            if (!std::holds_alternative<union_struct_132>(union_variant_16)) {
                union_variant_16 = union_struct_132();
            }
            if (auto err = std::get<116>((*this).union_variant_16).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<116>((*this).union_variant_16).ref.decode(r)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> BinaryModule::encode(::futils::binary::writer& w) const {
        if (!w.write(::futils::view::rvec("RBGM", 4))) {
            return ::futils::error::Error<>("encode: BinaryModule::magic: write string failed; \"RBGM\"", ::futils::error::Category::lib);
        }
        if (auto err = (*this).max_id.encode(w)) {
            return err;
        }
        if (auto err = (*this).metadata.encode(w)) {
            return err;
        }
        if (auto err = (*this).strings.encode(w)) {
            return err;
        }
        if (auto err = (*this).identifiers.encode(w)) {
            return err;
        }
        if (auto err = (*this).ident_indexes.encode(w)) {
            return err;
        }
        if (auto err = (*this).types.encode(w)) {
            return err;
        }
        if (auto err = (*this).programs.encode(w)) {
            return err;
        }
        if (auto err = (*this).ident_ranges.encode(w)) {
            return err;
        }
        if (!::futils::binary::write_num(w, flags_133_.as_value(), true)) {
            return ::futils::error::Error<>("encode: BinaryModule::reserved: write bit field failed", ::futils::error::Category::lib);
        }
        if ((*this).has_debug_info() == 1) {
            if (!std::holds_alternative<union_struct_136>(union_variant_135)) {
                return ::futils::error::Error<>("encode: BinaryModule: union_variant_135 variant alternative union_struct_136 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<1>((*this).union_variant_135).debug_info.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).code_length.encode(w)) {
            return err;
        }
        auto tmp_224_ = (*this).code_length.value();
        if (tmp_224_ != (*this).code.size()) {
            return ::futils::error::Error<>("encode: BinaryModule::code: dynamic length is not compatible with its length; tmp_224_!=(*this).code.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_225_ : (*this).code) {
            if (auto err = tmp_225_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> BinaryModule::decode(::futils::binary::reader& r) {
        ::futils::view::rvec tmp_226_ = {};
        if (!r.read_direct(tmp_226_, 4)) {
            return ::futils::error::Error<>("decode: BinaryModule::magic: read string failed", ::futils::error::Category::lib);
        }
        if (tmp_226_ != ::futils::view::rvec("RBGM", 4)) {
            return ::futils::error::Error<>("decode: BinaryModule::magic: read string failed; not match to \"RBGM\"", ::futils::error::Category::lib);
        }
        if (auto err = (*this).max_id.decode(r)) {
            return err;
        }
        if (auto err = (*this).metadata.decode(r)) {
            return err;
        }
        if (auto err = (*this).strings.decode(r)) {
            return err;
        }
        if (auto err = (*this).identifiers.decode(r)) {
            return err;
        }
        if (auto err = (*this).ident_indexes.decode(r)) {
            return err;
        }
        if (auto err = (*this).types.decode(r)) {
            return err;
        }
        if (auto err = (*this).programs.decode(r)) {
            return err;
        }
        if (auto err = (*this).ident_ranges.decode(r)) {
            return err;
        }
        if (!::futils::binary::read_num(r, flags_133_.as_value(), true)) {
            return ::futils::error::Error<>("decode: BinaryModule::reserved: read bit field failed", ::futils::error::Category::lib);
        }
        if ((*this).has_debug_info() == 1) {
            if (!std::holds_alternative<union_struct_136>(union_variant_135)) {
                union_variant_135 = union_struct_136();
            }
            if (auto err = std::get<1>((*this).union_variant_135).debug_info.decode(r)) {
                return err;
            }
        }
        if (auto err = (*this).code_length.decode(r)) {
            return err;
        }
        auto tmp_227_ = (*this).code_length.value();
        (*this).code.clear();
        for (size_t tmp_229_ = 0; tmp_229_ < tmp_227_; ++tmp_229_) {
            Code tmp_228_;
            if (auto err = tmp_228_.decode(r)) {
                return err;
            }
            (*this).code.push_back(std::move(tmp_228_));
        }
        return ::futils::error::Error<>();
    }
}  // namespace rebgn
