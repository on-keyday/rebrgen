!@section block_define_enum_member.txt
w.writeln(ident," ",enum_ident," = ",evaluated.result);
!@section block_define_enum.txt
w.writeln("type ",ident," ", *base_type);
w.writeln("const (");
defer.push_back(w.indent_scope_ex());
!@section block_define_format.txt
w.writeln("type ",ident," struct {");
defer.push_back(w.indent_scope_ex());
!@section block_define_state.txt
!@include block_define_format.txt
!@section block_define_union_member.txt
!@include block_define_format.txt
!@section block_define_union.txt
w.writeln("type ",ident," interface {");
defer.push_back(w.indent_scope_ex());
!@section block_end_enum.txt
defer.pop_back();
w.writeln(")");
!@section cmptest_build.txt
run_command(["go", "build", "-o", f"{TMPDIR}/save", "save/go/save.go"])
!@section escape_ident.txt
if(code.op==rebgn::AbstractOp::DEFINE_FIELD||code.op==rebgn::AbstractOp::DEFINE_FUNCTION) {
    str[0] = std::toupper(str[0]);
    if(code.op==rebgn::AbstractOp::DEFINE_FUNCTION) {
       auto typ = code.func_type().value();
       if(typ == rebgn::FunctionType::UNION_SETTER || typ == rebgn::FunctionType::VECTOR_SETTER || typ == rebgn::FunctionType::BIT_SETTER) {
         str = "Set" + str;
       }
       else if(typ == rebgn::FunctionType::UNION_GETTER) {
         str = "Get" + str;
       }
    }
    return;
}

if(code.op == rebgn::AbstractOp::DEFINE_ENUM_MEMBER) {
    auto belong_ident = ctx.ident(code.belong().value());
    str = belong_ident + "_"+ str;
}
!@section field_accessor_define_union_member.txt
result = make_eval_result(std::format("{}.(*{})",union_field_eval.result,ident));
!@section file_top.txt
package main

import (
    "io"
)
!@section func_define_function.txt
w.write("func ");
if(belong_name) {
    w.write("(this_ *",*belong_name,") ");
}
w.write(ident);
w.write("(");
add_parameter(ctx,w,range);
w.write(") ");
if(type) {
    w.write(*type);
}
w.writeln("{");
!@section generator_top.txt

!@section param_state_variable_parameter.txt
w.write(ident," *",type);
params++;
!@section keywords.txt
break
default
func
interface
select
case
defer
go
map
struct
chan
else
goto
package
switch
const
fallthrough
if
range
type
continue
for
import
return
var
