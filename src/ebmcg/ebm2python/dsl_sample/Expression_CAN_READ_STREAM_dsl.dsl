{%
/*DO NOT EDIT BELOW SECTION MANUALLY*/
/*license*/
// Template generated by ebmcodegen at https://github.com/on-keyday/rebrgen
/*
  Name: Expression_CAN_READ_STREAM_dsl
  Available variables:
    *this: Visitor
    module_: MappingTable
    item_id: ExpressionRef
    type: TypeRef
    kind: ExpressionKind
    io_ref: StatementRef
    num_bytes: Size
      unit: SizeUnit
      ref: *ExpressionRef
      size: *Varint
    stream_type: StreamType
*/
/*DO NOT EDIT ABOVE SECTION MANUALLY*/

/*here to write the hook*/
%}
{! io_val := module_.get_identifier_or(io_ref) !}
{! tmp_id := std::format("{}", get_id(item_id)) !}
{! size_str := get_size_str(*this,num_bytes) !}
{! current_offset := std::format("current_offset_{}", tmp_id) !}
{! end_offset := std::format("end_offset_{}", tmp_id) !}
{! result := std::format("result_{}", tmp_id) !}


if isinstance({{io_val}},io.BytesIO) and {{io_val}}.seekable():
  {{current_offset}} = {{io_val}}.tell()
  {{end_offset}} = {{io_val}}.seek(0,2)
  {{io_val}}.seek({{current_offset}})
  {{result}} = {{end_offset}} - {{current_offset}} 
elif isinstance({{io_val}},io.BufferedReader):
  {{result}} = builtins.len({{io_val}}.peek({{size_str}}))
else:
  {! if !is_nil(io_ref) !}{%/*this is added for example*/%}
  raise ValueError("Unsupported stream type for CAN_READ_STREAM: {}",type({{io_val}}))
  {! else !}
  raise ValueError("Broken!")
  {! endif !}

{! transfer_and_reset_writer !}
bool({{result}} >= {{size_str}})