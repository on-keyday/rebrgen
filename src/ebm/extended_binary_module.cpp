//Code generated by json2cpp2
#ifndef EBM_API
#ifdef _WIN32
#define EBM_API __declspec(dllexport)
#else
#define EBM_API __attribute__((visibility("default")))
#endif
#endif
#include "extended_binary_module.hpp"
namespace ebm {
    std::optional<Varint> ExpressionBody::args_len() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        if(!std::holds_alternative<union_struct_13>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<8>((*this).union_variant_5).args_len;
        }
        return std::nullopt;
    }
    bool ExpressionBody::args_len(const Varint& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            if(!std::holds_alternative<union_struct_13>(union_variant_5)) {
                union_variant_5 = union_struct_13();
            }
            std::get<8>((*this).union_variant_5).args_len = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::args_len(Varint&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            if(!std::holds_alternative<union_struct_13>(union_variant_5)) {
                union_variant_5 = union_struct_13();
            }
            std::get<8>((*this).union_variant_5).args_len = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<std::vector<ExpressionRef>> ExpressionBody::arguments() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        if(!std::holds_alternative<union_struct_13>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<8>((*this).union_variant_5).arguments;
        }
        return std::nullopt;
    }
    bool ExpressionBody::arguments(const std::vector<ExpressionRef>& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            if(!std::holds_alternative<union_struct_13>(union_variant_5)) {
                union_variant_5 = union_struct_13();
            }
            std::get<8>((*this).union_variant_5).arguments = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::arguments(std::vector<ExpressionRef>&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            if(!std::holds_alternative<union_struct_13>(union_variant_5)) {
                union_variant_5 = union_struct_13();
            }
            std::get<8>((*this).union_variant_5).arguments = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::base() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        if(!std::holds_alternative<union_struct_14>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<9>((*this).union_variant_5).base;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        if(!std::holds_alternative<union_struct_15>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<10>((*this).union_variant_5).base;
        }
        return std::nullopt;
    }
    bool ExpressionBody::base(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_14>(union_variant_5)) {
                union_variant_5 = union_struct_14();
            }
            std::get<9>((*this).union_variant_5).base = v;
            return true;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_15>(union_variant_5)) {
                union_variant_5 = union_struct_15();
            }
            std::get<10>((*this).union_variant_5).base = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::base(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_14>(union_variant_5)) {
                union_variant_5 = union_struct_14();
            }
            std::get<9>((*this).union_variant_5).base = std::move(v);
            return true;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_15>(union_variant_5)) {
                union_variant_5 = union_struct_15();
            }
            std::get<10>((*this).union_variant_5).base = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<std::uint8_t> ExpressionBody::bool_value() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        if(!std::holds_alternative<union_struct_7>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<2>((*this).union_variant_5).bool_value;
        }
        return std::nullopt;
    }
    bool ExpressionBody::bool_value(const std::uint8_t& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            if(!std::holds_alternative<union_struct_7>(union_variant_5)) {
                union_variant_5 = union_struct_7();
            }
            std::get<2>((*this).union_variant_5).bool_value = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::bool_value(std::uint8_t&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            if(!std::holds_alternative<union_struct_7>(union_variant_5)) {
                union_variant_5 = union_struct_7();
            }
            std::get<2>((*this).union_variant_5).bool_value = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<BinaryOp> ExpressionBody::bop() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        if(!std::holds_alternative<union_struct_11>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<6>((*this).union_variant_5).bop;
        }
        return std::nullopt;
    }
    bool ExpressionBody::bop(const BinaryOp& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_11>(union_variant_5)) {
                union_variant_5 = union_struct_11();
            }
            std::get<6>((*this).union_variant_5).bop = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::bop(BinaryOp&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_11>(union_variant_5)) {
                union_variant_5 = union_struct_11();
            }
            std::get<6>((*this).union_variant_5).bop = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::callee() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        if(!std::holds_alternative<union_struct_13>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<8>((*this).union_variant_5).callee;
        }
        return std::nullopt;
    }
    bool ExpressionBody::callee(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            if(!std::holds_alternative<union_struct_13>(union_variant_5)) {
                union_variant_5 = union_struct_13();
            }
            std::get<8>((*this).union_variant_5).callee = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::callee(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            if(!std::holds_alternative<union_struct_13>(union_variant_5)) {
                union_variant_5 = union_struct_13();
            }
            std::get<8>((*this).union_variant_5).callee = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<CastType> ExpressionBody::cast_kind() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
        if(!std::holds_alternative<union_struct_16>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<11>((*this).union_variant_5).cast_kind;
        }
        return std::nullopt;
    }
    bool ExpressionBody::cast_kind(const CastType& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            if(!std::holds_alternative<union_struct_16>(union_variant_5)) {
                union_variant_5 = union_struct_16();
            }
            std::get<11>((*this).union_variant_5).cast_kind = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::cast_kind(CastType&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            if(!std::holds_alternative<union_struct_16>(union_variant_5)) {
                union_variant_5 = union_struct_16();
            }
            std::get<11>((*this).union_variant_5).cast_kind = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::end() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::RANGE==(*this).op) {
        if(!std::holds_alternative<union_struct_17>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<12>((*this).union_variant_5).end;
        }
        return std::nullopt;
    }
    bool ExpressionBody::end(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            if(!std::holds_alternative<union_struct_17>(union_variant_5)) {
                union_variant_5 = union_struct_17();
            }
            std::get<12>((*this).union_variant_5).end = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::end(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            if(!std::holds_alternative<union_struct_17>(union_variant_5)) {
                union_variant_5 = union_struct_17();
            }
            std::get<12>((*this).union_variant_5).end = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<StatementRef> ExpressionBody::id() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        if(!std::holds_alternative<union_struct_10>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<5>((*this).union_variant_5).id;
        }
        return std::nullopt;
    }
    bool ExpressionBody::id(const StatementRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            if(!std::holds_alternative<union_struct_10>(union_variant_5)) {
                union_variant_5 = union_struct_10();
            }
            std::get<5>((*this).union_variant_5).id = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::id(StatementRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            if(!std::holds_alternative<union_struct_10>(union_variant_5)) {
                union_variant_5 = union_struct_10();
            }
            std::get<5>((*this).union_variant_5).id = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::index() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        if(!std::holds_alternative<union_struct_14>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<9>((*this).union_variant_5).index;
        }
        return std::nullopt;
    }
    bool ExpressionBody::index(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_14>(union_variant_5)) {
                union_variant_5 = union_struct_14();
            }
            std::get<9>((*this).union_variant_5).index = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::index(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_14>(union_variant_5)) {
                union_variant_5 = union_struct_14();
            }
            std::get<9>((*this).union_variant_5).index = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<std::uint64_t> ExpressionBody::int_value() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        if(!std::holds_alternative<union_struct_6>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<1>((*this).union_variant_5).int_value;
        }
        return std::nullopt;
    }
    bool ExpressionBody::int_value(const std::uint64_t& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            if(!std::holds_alternative<union_struct_6>(union_variant_5)) {
                union_variant_5 = union_struct_6();
            }
            std::get<1>((*this).union_variant_5).int_value = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::int_value(std::uint64_t&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            if(!std::holds_alternative<union_struct_6>(union_variant_5)) {
                union_variant_5 = union_struct_6();
            }
            std::get<1>((*this).union_variant_5).int_value = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::left() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        if(!std::holds_alternative<union_struct_11>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<6>((*this).union_variant_5).left;
        }
        return std::nullopt;
    }
    bool ExpressionBody::left(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_11>(union_variant_5)) {
                union_variant_5 = union_struct_11();
            }
            std::get<6>((*this).union_variant_5).left = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::left(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_11>(union_variant_5)) {
                union_variant_5 = union_struct_11();
            }
            std::get<6>((*this).union_variant_5).left = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<IdentifierRef> ExpressionBody::member() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        if(!std::holds_alternative<union_struct_15>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<10>((*this).union_variant_5).member;
        }
        return std::nullopt;
    }
    bool ExpressionBody::member(const IdentifierRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_15>(union_variant_5)) {
                union_variant_5 = union_struct_15();
            }
            std::get<10>((*this).union_variant_5).member = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::member(IdentifierRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_15>(union_variant_5)) {
                union_variant_5 = union_struct_15();
            }
            std::get<10>((*this).union_variant_5).member = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::operand() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        if(!std::holds_alternative<union_struct_12>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<7>((*this).union_variant_5).operand;
        }
        return std::nullopt;
    }
    bool ExpressionBody::operand(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_12>(union_variant_5)) {
                union_variant_5 = union_struct_12();
            }
            std::get<7>((*this).union_variant_5).operand = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::operand(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_12>(union_variant_5)) {
                union_variant_5 = union_struct_12();
            }
            std::get<7>((*this).union_variant_5).operand = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::right() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        if(!std::holds_alternative<union_struct_11>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<6>((*this).union_variant_5).right;
        }
        return std::nullopt;
    }
    bool ExpressionBody::right(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_11>(union_variant_5)) {
                union_variant_5 = union_struct_11();
            }
            std::get<6>((*this).union_variant_5).right = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::right(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_11>(union_variant_5)) {
                union_variant_5 = union_struct_11();
            }
            std::get<6>((*this).union_variant_5).right = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::source_expr() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
        if(!std::holds_alternative<union_struct_16>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<11>((*this).union_variant_5).source_expr;
        }
        return std::nullopt;
    }
    bool ExpressionBody::source_expr(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            if(!std::holds_alternative<union_struct_16>(union_variant_5)) {
                union_variant_5 = union_struct_16();
            }
            std::get<11>((*this).union_variant_5).source_expr = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::source_expr(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            if(!std::holds_alternative<union_struct_16>(union_variant_5)) {
                union_variant_5 = union_struct_16();
            }
            std::get<11>((*this).union_variant_5).source_expr = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::start() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::RANGE==(*this).op) {
        if(!std::holds_alternative<union_struct_17>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<12>((*this).union_variant_5).start;
        }
        return std::nullopt;
    }
    bool ExpressionBody::start(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            if(!std::holds_alternative<union_struct_17>(union_variant_5)) {
                union_variant_5 = union_struct_17();
            }
            std::get<12>((*this).union_variant_5).start = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::start(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            if(!std::holds_alternative<union_struct_17>(union_variant_5)) {
                union_variant_5 = union_struct_17();
            }
            std::get<12>((*this).union_variant_5).start = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<StringRef> ExpressionBody::string_value() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        if(!std::holds_alternative<union_struct_8>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<3>((*this).union_variant_5).string_value;
        }
        return std::nullopt;
    }
    bool ExpressionBody::string_value(const StringRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            if(!std::holds_alternative<union_struct_8>(union_variant_5)) {
                union_variant_5 = union_struct_8();
            }
            std::get<3>((*this).union_variant_5).string_value = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::string_value(StringRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            if(!std::holds_alternative<union_struct_8>(union_variant_5)) {
                union_variant_5 = union_struct_8();
            }
            std::get<3>((*this).union_variant_5).string_value = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> ExpressionBody::target_type() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
        if(!std::holds_alternative<union_struct_16>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<11>((*this).union_variant_5).target_type;
        }
        return std::nullopt;
    }
    bool ExpressionBody::target_type(const TypeRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            if(!std::holds_alternative<union_struct_16>(union_variant_5)) {
                union_variant_5 = union_struct_16();
            }
            std::get<11>((*this).union_variant_5).target_type = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::target_type(TypeRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            if(!std::holds_alternative<union_struct_16>(union_variant_5)) {
                union_variant_5 = union_struct_16();
            }
            std::get<11>((*this).union_variant_5).target_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> ExpressionBody::type_ref() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        if(!std::holds_alternative<union_struct_9>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<4>((*this).union_variant_5).type_ref;
        }
        return std::nullopt;
    }
    bool ExpressionBody::type_ref(const TypeRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            if(!std::holds_alternative<union_struct_9>(union_variant_5)) {
                union_variant_5 = union_struct_9();
            }
            std::get<4>((*this).union_variant_5).type_ref = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::type_ref(TypeRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            if(!std::holds_alternative<union_struct_9>(union_variant_5)) {
                union_variant_5 = union_struct_9();
            }
            std::get<4>((*this).union_variant_5).type_ref = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<UnaryOp> ExpressionBody::uop() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        if(!std::holds_alternative<union_struct_12>(union_variant_5)) {
            return std::nullopt;
        }
        return std::get<7>((*this).union_variant_5).uop;
        }
        return std::nullopt;
    }
    bool ExpressionBody::uop(const UnaryOp& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_12>(union_variant_5)) {
                union_variant_5 = union_struct_12();
            }
            std::get<7>((*this).union_variant_5).uop = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::uop(UnaryOp&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_12>(union_variant_5)) {
                union_variant_5 = union_struct_12();
            }
            std::get<7>((*this).union_variant_5).uop = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> LoopStatement::collection() const {
        if (LoopType::INFINITE==(*this).loop_type) {
        return std::nullopt;
        }
        if (LoopType::WHILE==(*this).loop_type) {
        return std::nullopt;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
        if(!std::holds_alternative<union_struct_24>(union_variant_21)) {
            return std::nullopt;
        }
        return std::get<3>((*this).union_variant_21).collection;
        }
        return std::nullopt;
    }
    bool LoopStatement::collection(const ExpressionRef& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_24>(union_variant_21)) {
                union_variant_21 = union_struct_24();
            }
            std::get<3>((*this).union_variant_21).collection = v;
            return true;
        }
        return false;
    }
    bool LoopStatement::collection(ExpressionRef&& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_24>(union_variant_21)) {
                union_variant_21 = union_struct_24();
            }
            std::get<3>((*this).union_variant_21).collection = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> LoopStatement::condition() const {
        if (LoopType::INFINITE==(*this).loop_type) {
        return std::nullopt;
        }
        if (LoopType::WHILE==(*this).loop_type) {
        if(!std::holds_alternative<union_struct_23>(union_variant_21)) {
            return std::nullopt;
        }
        return std::get<2>((*this).union_variant_21).condition;
        }
        return std::nullopt;
    }
    bool LoopStatement::condition(const ExpressionRef& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_23>(union_variant_21)) {
                union_variant_21 = union_struct_23();
            }
            std::get<2>((*this).union_variant_21).condition = v;
            return true;
        }
        return false;
    }
    bool LoopStatement::condition(ExpressionRef&& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_23>(union_variant_21)) {
                union_variant_21 = union_struct_23();
            }
            std::get<2>((*this).union_variant_21).condition = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<IdentifierRef> LoopStatement::item_var() const {
        if (LoopType::INFINITE==(*this).loop_type) {
        return std::nullopt;
        }
        if (LoopType::WHILE==(*this).loop_type) {
        return std::nullopt;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
        if(!std::holds_alternative<union_struct_24>(union_variant_21)) {
            return std::nullopt;
        }
        return std::get<3>((*this).union_variant_21).item_var;
        }
        return std::nullopt;
    }
    bool LoopStatement::item_var(const IdentifierRef& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_24>(union_variant_21)) {
                union_variant_21 = union_struct_24();
            }
            std::get<3>((*this).union_variant_21).item_var = v;
            return true;
        }
        return false;
    }
    bool LoopStatement::item_var(IdentifierRef&& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_24>(union_variant_21)) {
                union_variant_21 = union_struct_24();
            }
            std::get<3>((*this).union_variant_21).item_var = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<IdentifierRef> StatementBody::alias() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_59>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<30>((*this).union_variant_29).alias;
        }
        return std::nullopt;
    }
    bool StatementBody::alias(const IdentifierRef& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_59>(union_variant_29)) {
                union_variant_29 = union_struct_59();
            }
            std::get<30>((*this).union_variant_29).alias = v;
            return true;
        }
        return false;
    }
    bool StatementBody::alias(IdentifierRef&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_59>(union_variant_29)) {
                union_variant_29 = union_struct_59();
            }
            std::get<30>((*this).union_variant_29).alias = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<BitFieldDecl> StatementBody::bit_field_decl() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_56>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<27>((*this).union_variant_29).bit_field_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::bit_field_decl(const BitFieldDecl& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_56>(union_variant_29)) {
                union_variant_29 = union_struct_56();
            }
            std::get<27>((*this).union_variant_29).bit_field_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::bit_field_decl(BitFieldDecl&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_56>(union_variant_29)) {
                union_variant_29 = union_struct_56();
            }
            std::get<27>((*this).union_variant_29).bit_field_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<Varint> StatementBody::bit_size() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_34>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<5>((*this).union_variant_29).bit_size;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_35>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<6>((*this).union_variant_29).bit_size;
        }
        return std::nullopt;
    }
    bool StatementBody::bit_size(const Varint& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_34>(union_variant_29)) {
                union_variant_29 = union_struct_34();
            }
            std::get<5>((*this).union_variant_29).bit_size = v;
            return true;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_29)) {
                union_variant_29 = union_struct_35();
            }
            std::get<6>((*this).union_variant_29).bit_size = v;
            return true;
        }
        return false;
    }
    bool StatementBody::bit_size(Varint&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_34>(union_variant_29)) {
                union_variant_29 = union_struct_34();
            }
            std::get<5>((*this).union_variant_29).bit_size = std::move(v);
            return true;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_29)) {
                union_variant_29 = union_struct_35();
            }
            std::get<6>((*this).union_variant_29).bit_size = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<Block> StatementBody::body() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_54>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<25>((*this).union_variant_29).body;
        }
        return std::nullopt;
    }
    bool StatementBody::body(const Block& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_54>(union_variant_29)) {
                union_variant_29 = union_struct_54();
            }
            std::get<25>((*this).union_variant_29).body = v;
            return true;
        }
        return false;
    }
    bool StatementBody::body(Block&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_54>(union_variant_29)) {
                union_variant_29 = union_struct_54();
            }
            std::get<25>((*this).union_variant_29).body = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<LoopFlowControl> StatementBody::break_() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_44>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<15>((*this).union_variant_29).break_;
        }
        return std::nullopt;
    }
    bool StatementBody::break_(const LoopFlowControl& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_44>(union_variant_29)) {
                union_variant_29 = union_struct_44();
            }
            std::get<15>((*this).union_variant_29).break_ = v;
            return true;
        }
        return false;
    }
    bool StatementBody::break_(LoopFlowControl&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_44>(union_variant_29)) {
                union_variant_29 = union_struct_44();
            }
            std::get<15>((*this).union_variant_29).break_ = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> StatementBody::condition() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_32>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<3>((*this).union_variant_29).condition;
        }
        return std::nullopt;
    }
    bool StatementBody::condition(const ExpressionRef& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_32>(union_variant_29)) {
                union_variant_29 = union_struct_32();
            }
            std::get<3>((*this).union_variant_29).condition = v;
            return true;
        }
        return false;
    }
    bool StatementBody::condition(ExpressionRef&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_32>(union_variant_29)) {
                union_variant_29 = union_struct_32();
            }
            std::get<3>((*this).union_variant_29).condition = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<LoopFlowControl> StatementBody::continue_() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_45>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<16>((*this).union_variant_29).continue_;
        }
        return std::nullopt;
    }
    bool StatementBody::continue_(const LoopFlowControl& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_45>(union_variant_29)) {
                union_variant_29 = union_struct_45();
            }
            std::get<16>((*this).union_variant_29).continue_ = v;
            return true;
        }
        return false;
    }
    bool StatementBody::continue_(LoopFlowControl&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_45>(union_variant_29)) {
                union_variant_29 = union_struct_45();
            }
            std::get<16>((*this).union_variant_29).continue_ = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> StatementBody::data_type() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_34>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<5>((*this).union_variant_29).data_type;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_35>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<6>((*this).union_variant_29).data_type;
        }
        return std::nullopt;
    }
    bool StatementBody::data_type(const TypeRef& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_34>(union_variant_29)) {
                union_variant_29 = union_struct_34();
            }
            std::get<5>((*this).union_variant_29).data_type = v;
            return true;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_29)) {
                union_variant_29 = union_struct_35();
            }
            std::get<6>((*this).union_variant_29).data_type = v;
            return true;
        }
        return false;
    }
    bool StatementBody::data_type(TypeRef&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_34>(union_variant_29)) {
                union_variant_29 = union_struct_34();
            }
            std::get<5>((*this).union_variant_29).data_type = std::move(v);
            return true;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_29)) {
                union_variant_29 = union_struct_35();
            }
            std::get<6>((*this).union_variant_29).data_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<EndianExpr> StatementBody::endian() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_34>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<5>((*this).union_variant_29).endian;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_35>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<6>((*this).union_variant_29).endian;
        }
        return std::nullopt;
    }
    bool StatementBody::endian(const EndianExpr& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_34>(union_variant_29)) {
                union_variant_29 = union_struct_34();
            }
            std::get<5>((*this).union_variant_29).endian = v;
            return true;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_29)) {
                union_variant_29 = union_struct_35();
            }
            std::get<6>((*this).union_variant_29).endian = v;
            return true;
        }
        return false;
    }
    bool StatementBody::endian(EndianExpr&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_34>(union_variant_29)) {
                union_variant_29 = union_struct_34();
            }
            std::get<5>((*this).union_variant_29).endian = std::move(v);
            return true;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_29)) {
                union_variant_29 = union_struct_35();
            }
            std::get<6>((*this).union_variant_29).endian = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<EnumDecl> StatementBody::enum_decl() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_49>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<20>((*this).union_variant_29).enum_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::enum_decl(const EnumDecl& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_49>(union_variant_29)) {
                union_variant_29 = union_struct_49();
            }
            std::get<20>((*this).union_variant_29).enum_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::enum_decl(EnumDecl&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_49>(union_variant_29)) {
                union_variant_29 = union_struct_49();
            }
            std::get<20>((*this).union_variant_29).enum_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<EnumMemberDecl> StatementBody::enum_member_decl() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_50>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<21>((*this).union_variant_29).enum_member_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::enum_member_decl(const EnumMemberDecl& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_50>(union_variant_29)) {
                union_variant_29 = union_struct_50();
            }
            std::get<21>((*this).union_variant_29).enum_member_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::enum_member_decl(EnumMemberDecl&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_50>(union_variant_29)) {
                union_variant_29 = union_struct_50();
            }
            std::get<21>((*this).union_variant_29).enum_member_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ErrorReport> StatementBody::error_report() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_61>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<32>((*this).union_variant_29).error_report;
        }
        return std::nullopt;
    }
    bool StatementBody::error_report(const ErrorReport& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_61>(union_variant_29)) {
                union_variant_29 = union_struct_61();
            }
            std::get<32>((*this).union_variant_29).error_report = v;
            return true;
        }
        return false;
    }
    bool StatementBody::error_report(ErrorReport&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_61>(union_variant_29)) {
                union_variant_29 = union_struct_61();
            }
            std::get<32>((*this).union_variant_29).error_report = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> StatementBody::expression() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::EXPRESSION==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_62>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<33>((*this).union_variant_29).expression;
        }
        return std::nullopt;
    }
    bool StatementBody::expression(const ExpressionRef& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::EXPRESSION==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_62>(union_variant_29)) {
                union_variant_29 = union_struct_62();
            }
            std::get<33>((*this).union_variant_29).expression = v;
            return true;
        }
        return false;
    }
    bool StatementBody::expression(ExpressionRef&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::EXPRESSION==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_62>(union_variant_29)) {
                union_variant_29 = union_struct_62();
            }
            std::get<33>((*this).union_variant_29).expression = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<FallbackStatements> StatementBody::fallback_stmt() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_34>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<5>((*this).union_variant_29).fallback_stmt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_35>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<6>((*this).union_variant_29).fallback_stmt;
        }
        return std::nullopt;
    }
    bool StatementBody::fallback_stmt(const FallbackStatements& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_34>(union_variant_29)) {
                union_variant_29 = union_struct_34();
            }
            std::get<5>((*this).union_variant_29).fallback_stmt = v;
            return true;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_29)) {
                union_variant_29 = union_struct_35();
            }
            std::get<6>((*this).union_variant_29).fallback_stmt = v;
            return true;
        }
        return false;
    }
    bool StatementBody::fallback_stmt(FallbackStatements&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_34>(union_variant_29)) {
                union_variant_29 = union_struct_34();
            }
            std::get<5>((*this).union_variant_29).fallback_stmt = std::move(v);
            return true;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_29)) {
                union_variant_29 = union_struct_35();
            }
            std::get<6>((*this).union_variant_29).fallback_stmt = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<FieldDecl> StatementBody::field_decl() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_48>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<19>((*this).union_variant_29).field_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::field_decl(const FieldDecl& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_48>(union_variant_29)) {
                union_variant_29 = union_struct_48();
            }
            std::get<19>((*this).union_variant_29).field_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::field_decl(FieldDecl&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_48>(union_variant_29)) {
                union_variant_29 = union_struct_48();
            }
            std::get<19>((*this).union_variant_29).field_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<FunctionDecl> StatementBody::func_decl() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_46>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<17>((*this).union_variant_29).func_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::func_decl(const FunctionDecl& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_46>(union_variant_29)) {
                union_variant_29 = union_struct_46();
            }
            std::get<17>((*this).union_variant_29).func_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::func_decl(FunctionDecl&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_46>(union_variant_29)) {
                union_variant_29 = union_struct_46();
            }
            std::get<17>((*this).union_variant_29).func_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<IfStatement> StatementBody::if_statement() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_40>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<11>((*this).union_variant_29).if_statement;
        }
        return std::nullopt;
    }
    bool StatementBody::if_statement(const IfStatement& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_40>(union_variant_29)) {
                union_variant_29 = union_struct_40();
            }
            std::get<11>((*this).union_variant_29).if_statement = v;
            return true;
        }
        return false;
    }
    bool StatementBody::if_statement(IfStatement&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_40>(union_variant_29)) {
                union_variant_29 = union_struct_40();
            }
            std::get<11>((*this).union_variant_29).if_statement = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<LoopStatement> StatementBody::loop() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_41>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<12>((*this).union_variant_29).loop;
        }
        return std::nullopt;
    }
    bool StatementBody::loop(const LoopStatement& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_41>(union_variant_29)) {
                union_variant_29 = union_struct_41();
            }
            std::get<12>((*this).union_variant_29).loop = v;
            return true;
        }
        return false;
    }
    bool StatementBody::loop(LoopStatement&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_41>(union_variant_29)) {
                union_variant_29 = union_struct_41();
            }
            std::get<12>((*this).union_variant_29).loop = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<MatchBranch> StatementBody::match_branch() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_43>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<14>((*this).union_variant_29).match_branch;
        }
        return std::nullopt;
    }
    bool StatementBody::match_branch(const MatchBranch& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_43>(union_variant_29)) {
                union_variant_29 = union_struct_43();
            }
            std::get<14>((*this).union_variant_29).match_branch = v;
            return true;
        }
        return false;
    }
    bool StatementBody::match_branch(MatchBranch&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_43>(union_variant_29)) {
                union_variant_29 = union_struct_43();
            }
            std::get<14>((*this).union_variant_29).match_branch = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<MatchStatement> StatementBody::match_statement() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_42>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<13>((*this).union_variant_29).match_statement;
        }
        return std::nullopt;
    }
    bool StatementBody::match_statement(const MatchStatement& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_42>(union_variant_29)) {
                union_variant_29 = union_struct_42();
            }
            std::get<13>((*this).union_variant_29).match_statement = v;
            return true;
        }
        return false;
    }
    bool StatementBody::match_statement(MatchStatement&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_42>(union_variant_29)) {
                union_variant_29 = union_struct_42();
            }
            std::get<13>((*this).union_variant_29).match_statement = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<Metadata> StatementBody::metadata() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_58>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<29>((*this).union_variant_29).metadata;
        }
        return std::nullopt;
    }
    bool StatementBody::metadata(const Metadata& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_58>(union_variant_29)) {
                union_variant_29 = union_struct_58();
            }
            std::get<29>((*this).union_variant_29).metadata = v;
            return true;
        }
        return false;
    }
    bool StatementBody::metadata(Metadata&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_58>(union_variant_29)) {
                union_variant_29 = union_struct_58();
            }
            std::get<29>((*this).union_variant_29).metadata = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<IdentifierRef> StatementBody::module_name() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_59>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<30>((*this).union_variant_29).module_name;
        }
        return std::nullopt;
    }
    bool StatementBody::module_name(const IdentifierRef& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_59>(union_variant_29)) {
                union_variant_29 = union_struct_59();
            }
            std::get<30>((*this).union_variant_29).module_name = v;
            return true;
        }
        return false;
    }
    bool StatementBody::module_name(IdentifierRef&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_59>(union_variant_29)) {
                union_variant_29 = union_struct_59();
            }
            std::get<30>((*this).union_variant_29).module_name = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> StatementBody::num_bytes() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_39>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<10>((*this).union_variant_29).num_bytes;
        }
        return std::nullopt;
    }
    bool StatementBody::num_bytes(const ExpressionRef& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_39>(union_variant_29)) {
                union_variant_29 = union_struct_39();
            }
            std::get<10>((*this).union_variant_29).num_bytes = v;
            return true;
        }
        return false;
    }
    bool StatementBody::num_bytes(ExpressionRef&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_39>(union_variant_29)) {
                union_variant_29 = union_struct_39();
            }
            std::get<10>((*this).union_variant_29).num_bytes = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> StatementBody::object_type() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_33>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<4>((*this).union_variant_29).object_type;
        }
        return std::nullopt;
    }
    bool StatementBody::object_type(const TypeRef& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_33>(union_variant_29)) {
                union_variant_29 = union_struct_33();
            }
            std::get<4>((*this).union_variant_29).object_type = v;
            return true;
        }
        return false;
    }
    bool StatementBody::object_type(TypeRef&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_33>(union_variant_29)) {
                union_variant_29 = union_struct_33();
            }
            std::get<4>((*this).union_variant_29).object_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> StatementBody::offset() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_36>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<7>((*this).union_variant_29).offset;
        }
        return std::nullopt;
    }
    bool StatementBody::offset(const ExpressionRef& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_36>(union_variant_29)) {
                union_variant_29 = union_struct_36();
            }
            std::get<7>((*this).union_variant_29).offset = v;
            return true;
        }
        return false;
    }
    bool StatementBody::offset(ExpressionRef&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_36>(union_variant_29)) {
                union_variant_29 = union_struct_36();
            }
            std::get<7>((*this).union_variant_29).offset = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<std::vector<PhiParam>> StatementBody::params() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_60>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<31>((*this).union_variant_29).params;
        }
        return std::nullopt;
    }
    bool StatementBody::params(const std::vector<PhiParam>& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_60>(union_variant_29)) {
                union_variant_29 = union_struct_60();
            }
            std::get<31>((*this).union_variant_29).params = v;
            return true;
        }
        return false;
    }
    bool StatementBody::params(std::vector<PhiParam>&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_60>(union_variant_29)) {
                union_variant_29 = union_struct_60();
            }
            std::get<31>((*this).union_variant_29).params = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<Varint> StatementBody::params_len() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_60>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<31>((*this).union_variant_29).params_len;
        }
        return std::nullopt;
    }
    bool StatementBody::params_len(const Varint& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_60>(union_variant_29)) {
                union_variant_29 = union_struct_60();
            }
            std::get<31>((*this).union_variant_29).params_len = v;
            return true;
        }
        return false;
    }
    bool StatementBody::params_len(Varint&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_60>(union_variant_29)) {
                union_variant_29 = union_struct_60();
            }
            std::get<31>((*this).union_variant_29).params_len = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<PropertyDecl> StatementBody::property_decl() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_57>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<28>((*this).union_variant_29).property_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::property_decl(const PropertyDecl& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_57>(union_variant_29)) {
                union_variant_29 = union_struct_57();
            }
            std::get<28>((*this).union_variant_29).property_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::property_decl(PropertyDecl&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_57>(union_variant_29)) {
                union_variant_29 = union_struct_57();
            }
            std::get<28>((*this).union_variant_29).property_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> StatementBody::source_expr() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_35>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<6>((*this).union_variant_29).source_expr;
        }
        return std::nullopt;
    }
    bool StatementBody::source_expr(const ExpressionRef& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_29)) {
                union_variant_29 = union_struct_35();
            }
            std::get<6>((*this).union_variant_29).source_expr = v;
            return true;
        }
        return false;
    }
    bool StatementBody::source_expr(ExpressionRef&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_29)) {
                union_variant_29 = union_struct_35();
            }
            std::get<6>((*this).union_variant_29).source_expr = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<StateDecl> StatementBody::state_decl() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_55>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<26>((*this).union_variant_29).state_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::state_decl(const StateDecl& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_55>(union_variant_29)) {
                union_variant_29 = union_struct_55();
            }
            std::get<26>((*this).union_variant_29).state_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::state_decl(StateDecl&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_55>(union_variant_29)) {
                union_variant_29 = union_struct_55();
            }
            std::get<26>((*this).union_variant_29).state_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<IdentifierRef> StatementBody::stream_type() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_36>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<7>((*this).union_variant_29).stream_type;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_37>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<8>((*this).union_variant_29).stream_type;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_38>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<9>((*this).union_variant_29).stream_type;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_39>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<10>((*this).union_variant_29).stream_type;
        }
        return std::nullopt;
    }
    bool StatementBody::stream_type(const IdentifierRef& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_36>(union_variant_29)) {
                union_variant_29 = union_struct_36();
            }
            std::get<7>((*this).union_variant_29).stream_type = v;
            return true;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_37>(union_variant_29)) {
                union_variant_29 = union_struct_37();
            }
            std::get<8>((*this).union_variant_29).stream_type = v;
            return true;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_38>(union_variant_29)) {
                union_variant_29 = union_struct_38();
            }
            std::get<9>((*this).union_variant_29).stream_type = v;
            return true;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_39>(union_variant_29)) {
                union_variant_29 = union_struct_39();
            }
            std::get<10>((*this).union_variant_29).stream_type = v;
            return true;
        }
        return false;
    }
    bool StatementBody::stream_type(IdentifierRef&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_36>(union_variant_29)) {
                union_variant_29 = union_struct_36();
            }
            std::get<7>((*this).union_variant_29).stream_type = std::move(v);
            return true;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_37>(union_variant_29)) {
                union_variant_29 = union_struct_37();
            }
            std::get<8>((*this).union_variant_29).stream_type = std::move(v);
            return true;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_38>(union_variant_29)) {
                union_variant_29 = union_struct_38();
            }
            std::get<9>((*this).union_variant_29).stream_type = std::move(v);
            return true;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_39>(union_variant_29)) {
                union_variant_29 = union_struct_39();
            }
            std::get<10>((*this).union_variant_29).stream_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<StructDecl> StatementBody::struct_decl() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_51>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<22>((*this).union_variant_29).struct_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::struct_decl(const StructDecl& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_51>(union_variant_29)) {
                union_variant_29 = union_struct_51();
            }
            std::get<22>((*this).union_variant_29).struct_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::struct_decl(StructDecl&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_51>(union_variant_29)) {
                union_variant_29 = union_struct_51();
            }
            std::get<22>((*this).union_variant_29).struct_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> StatementBody::target() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_30>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<1>((*this).union_variant_29).target;
        }
        return std::nullopt;
    }
    bool StatementBody::target(const ExpressionRef& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_30>(union_variant_29)) {
                union_variant_29 = union_struct_30();
            }
            std::get<1>((*this).union_variant_29).target = v;
            return true;
        }
        return false;
    }
    bool StatementBody::target(ExpressionRef&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_30>(union_variant_29)) {
                union_variant_29 = union_struct_30();
            }
            std::get<1>((*this).union_variant_29).target = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<UnionDecl> StatementBody::union_decl() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_52>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<23>((*this).union_variant_29).union_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::union_decl(const UnionDecl& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_52>(union_variant_29)) {
                union_variant_29 = union_struct_52();
            }
            std::get<23>((*this).union_variant_29).union_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::union_decl(UnionDecl&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_52>(union_variant_29)) {
                union_variant_29 = union_struct_52();
            }
            std::get<23>((*this).union_variant_29).union_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<UnionMemberDecl> StatementBody::union_member_decl() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_53>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<24>((*this).union_variant_29).union_member_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::union_member_decl(const UnionMemberDecl& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_53>(union_variant_29)) {
                union_variant_29 = union_struct_53();
            }
            std::get<24>((*this).union_variant_29).union_member_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::union_member_decl(UnionMemberDecl&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_53>(union_variant_29)) {
                union_variant_29 = union_struct_53();
            }
            std::get<24>((*this).union_variant_29).union_member_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> StatementBody::value() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_30>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<1>((*this).union_variant_29).value;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_31>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<2>((*this).union_variant_29).value;
        }
        return std::nullopt;
    }
    bool StatementBody::value(const ExpressionRef& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_30>(union_variant_29)) {
                union_variant_29 = union_struct_30();
            }
            std::get<1>((*this).union_variant_29).value = v;
            return true;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_31>(union_variant_29)) {
                union_variant_29 = union_struct_31();
            }
            std::get<2>((*this).union_variant_29).value = v;
            return true;
        }
        return false;
    }
    bool StatementBody::value(ExpressionRef&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_30>(union_variant_29)) {
                union_variant_29 = union_struct_30();
            }
            std::get<1>((*this).union_variant_29).value = std::move(v);
            return true;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_31>(union_variant_29)) {
                union_variant_29 = union_struct_31();
            }
            std::get<2>((*this).union_variant_29).value = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<VariableDecl> StatementBody::var_decl() const {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_47>(union_variant_29)) {
            return std::nullopt;
        }
        return std::get<18>((*this).union_variant_29).var_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::var_decl(const VariableDecl& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_47>(union_variant_29)) {
                union_variant_29 = union_struct_47();
            }
            std::get<18>((*this).union_variant_29).var_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::var_decl(VariableDecl&& v) {
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_47>(union_variant_29)) {
                union_variant_29 = union_struct_47();
            }
            std::get<18>((*this).union_variant_29).var_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> TypeBody::base_type() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ENUM==(*this).kind) {
        if(!std::holds_alternative<union_struct_73>(union_variant_64)) {
            return std::nullopt;
        }
        return std::get<9>((*this).union_variant_64).base_type;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::CODER_RETURN==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::PTR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RANGE==(*this).kind) {
        if(!std::holds_alternative<union_struct_79>(union_variant_64)) {
            return std::nullopt;
        }
        return std::get<15>((*this).union_variant_64).base_type;
        }
        return std::nullopt;
    }
    bool TypeBody::base_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_73>(union_variant_64)) {
                union_variant_64 = union_struct_73();
            }
            std::get<9>((*this).union_variant_64).base_type = v;
            return true;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::CODER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            return false;
        }
        if (TypeKind::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_79>(union_variant_64)) {
                union_variant_64 = union_struct_79();
            }
            std::get<15>((*this).union_variant_64).base_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::base_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_73>(union_variant_64)) {
                union_variant_64 = union_struct_73();
            }
            std::get<9>((*this).union_variant_64).base_type = std::move(v);
            return true;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::CODER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            return false;
        }
        if (TypeKind::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_79>(union_variant_64)) {
                union_variant_64 = union_struct_79();
            }
            std::get<15>((*this).union_variant_64).base_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> TypeBody::coder_type() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::CODER_RETURN==(*this).kind) {
        if(!std::holds_alternative<union_struct_75>(union_variant_64)) {
            return std::nullopt;
        }
        return std::get<11>((*this).union_variant_64).coder_type;
        }
        return std::nullopt;
    }
    bool TypeBody::coder_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::CODER_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_75>(union_variant_64)) {
                union_variant_64 = union_struct_75();
            }
            std::get<11>((*this).union_variant_64).coder_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::coder_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::CODER_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_75>(union_variant_64)) {
                union_variant_64 = union_struct_75();
            }
            std::get<11>((*this).union_variant_64).coder_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> TypeBody::common_type() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        if(!std::holds_alternative<union_struct_74>(union_variant_64)) {
            return std::nullopt;
        }
        return std::get<10>((*this).union_variant_64).common_type;
        }
        return std::nullopt;
    }
    bool TypeBody::common_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_74>(union_variant_64)) {
                union_variant_64 = union_struct_74();
            }
            std::get<10>((*this).union_variant_64).common_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::common_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_74>(union_variant_64)) {
                union_variant_64 = union_struct_74();
            }
            std::get<10>((*this).union_variant_64).common_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> TypeBody::element_type() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        if(!std::holds_alternative<union_struct_69>(union_variant_64)) {
            return std::nullopt;
        }
        return std::get<5>((*this).union_variant_64).element_type;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        if(!std::holds_alternative<union_struct_70>(union_variant_64)) {
            return std::nullopt;
        }
        return std::get<6>((*this).union_variant_64).element_type;
        }
        return std::nullopt;
    }
    bool TypeBody::element_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_69>(union_variant_64)) {
                union_variant_64 = union_struct_69();
            }
            std::get<5>((*this).union_variant_64).element_type = v;
            return true;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            if(!std::holds_alternative<union_struct_70>(union_variant_64)) {
                union_variant_64 = union_struct_70();
            }
            std::get<6>((*this).union_variant_64).element_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::element_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_69>(union_variant_64)) {
                union_variant_64 = union_struct_69();
            }
            std::get<5>((*this).union_variant_64).element_type = std::move(v);
            return true;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            if(!std::holds_alternative<union_struct_70>(union_variant_64)) {
                union_variant_64 = union_struct_70();
            }
            std::get<6>((*this).union_variant_64).element_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<StatementRef> TypeBody::id() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        if(!std::holds_alternative<union_struct_71>(union_variant_64)) {
            return std::nullopt;
        }
        return std::get<7>((*this).union_variant_64).id;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        if(!std::holds_alternative<union_struct_72>(union_variant_64)) {
            return std::nullopt;
        }
        return std::get<8>((*this).union_variant_64).id;
        }
        if (TypeKind::ENUM==(*this).kind) {
        if(!std::holds_alternative<union_struct_73>(union_variant_64)) {
            return std::nullopt;
        }
        return std::get<9>((*this).union_variant_64).id;
        }
        return std::nullopt;
    }
    bool TypeBody::id(const StatementRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_71>(union_variant_64)) {
                union_variant_64 = union_struct_71();
            }
            std::get<7>((*this).union_variant_64).id = v;
            return true;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_72>(union_variant_64)) {
                union_variant_64 = union_struct_72();
            }
            std::get<8>((*this).union_variant_64).id = v;
            return true;
        }
        if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_73>(union_variant_64)) {
                union_variant_64 = union_struct_73();
            }
            std::get<9>((*this).union_variant_64).id = v;
            return true;
        }
        return false;
    }
    bool TypeBody::id(StatementRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_71>(union_variant_64)) {
                union_variant_64 = union_struct_71();
            }
            std::get<7>((*this).union_variant_64).id = std::move(v);
            return true;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_72>(union_variant_64)) {
                union_variant_64 = union_struct_72();
            }
            std::get<8>((*this).union_variant_64).id = std::move(v);
            return true;
        }
        if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_73>(union_variant_64)) {
                union_variant_64 = union_struct_73();
            }
            std::get<9>((*this).union_variant_64).id = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> TypeBody::inner_type() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::CODER_RETURN==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
        if(!std::holds_alternative<union_struct_77>(union_variant_64)) {
            return std::nullopt;
        }
        return std::get<13>((*this).union_variant_64).inner_type;
        }
        return std::nullopt;
    }
    bool TypeBody::inner_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::CODER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_77>(union_variant_64)) {
                union_variant_64 = union_struct_77();
            }
            std::get<13>((*this).union_variant_64).inner_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::inner_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::CODER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_77>(union_variant_64)) {
                union_variant_64 = union_struct_77();
            }
            std::get<13>((*this).union_variant_64).inner_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<Varint> TypeBody::length() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        if(!std::holds_alternative<union_struct_69>(union_variant_64)) {
            return std::nullopt;
        }
        return std::get<5>((*this).union_variant_64).length;
        }
        return std::nullopt;
    }
    bool TypeBody::length(const Varint& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_69>(union_variant_64)) {
                union_variant_64 = union_struct_69();
            }
            std::get<5>((*this).union_variant_64).length = v;
            return true;
        }
        return false;
    }
    bool TypeBody::length(Varint&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_69>(union_variant_64)) {
                union_variant_64 = union_struct_69();
            }
            std::get<5>((*this).union_variant_64).length = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<Types> TypeBody::members() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        if(!std::holds_alternative<union_struct_74>(union_variant_64)) {
            return std::nullopt;
        }
        return std::get<10>((*this).union_variant_64).members;
        }
        return std::nullopt;
    }
    bool TypeBody::members(const Types& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_74>(union_variant_64)) {
                union_variant_64 = union_struct_74();
            }
            std::get<10>((*this).union_variant_64).members = v;
            return true;
        }
        return false;
    }
    bool TypeBody::members(Types&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_74>(union_variant_64)) {
                union_variant_64 = union_struct_74();
            }
            std::get<10>((*this).union_variant_64).members = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> TypeBody::pointee_type() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::CODER_RETURN==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::PTR==(*this).kind) {
        if(!std::holds_alternative<union_struct_78>(union_variant_64)) {
            return std::nullopt;
        }
        return std::get<14>((*this).union_variant_64).pointee_type;
        }
        return std::nullopt;
    }
    bool TypeBody::pointee_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::CODER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            if(!std::holds_alternative<union_struct_78>(union_variant_64)) {
                union_variant_64 = union_struct_78();
            }
            std::get<14>((*this).union_variant_64).pointee_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::pointee_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::CODER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            if(!std::holds_alternative<union_struct_78>(union_variant_64)) {
                union_variant_64 = union_struct_78();
            }
            std::get<14>((*this).union_variant_64).pointee_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> TypeBody::property_type() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::CODER_RETURN==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
        if(!std::holds_alternative<union_struct_76>(union_variant_64)) {
            return std::nullopt;
        }
        return std::get<12>((*this).union_variant_64).property_type;
        }
        return std::nullopt;
    }
    bool TypeBody::property_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::CODER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_76>(union_variant_64)) {
                union_variant_64 = union_struct_76();
            }
            std::get<12>((*this).union_variant_64).property_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::property_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::CODER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_76>(union_variant_64)) {
                union_variant_64 = union_struct_76();
            }
            std::get<12>((*this).union_variant_64).property_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<std::uint8_t> TypeBody::size() const {
        if (TypeKind::INT==(*this).kind) {
        if(!std::holds_alternative<union_struct_65>(union_variant_64)) {
            return std::nullopt;
        }
        return std::get<1>((*this).union_variant_64).size;
        }
        if (TypeKind::UINT==(*this).kind) {
        if(!std::holds_alternative<union_struct_66>(union_variant_64)) {
            return std::nullopt;
        }
        return std::get<2>((*this).union_variant_64).size;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        if(!std::holds_alternative<union_struct_67>(union_variant_64)) {
            return std::nullopt;
        }
        return std::get<3>((*this).union_variant_64).size;
        }
        return std::nullopt;
    }
    bool TypeBody::size(const std::uint8_t& v) {
        if (TypeKind::INT==(*this).kind) {
            if(!std::holds_alternative<union_struct_65>(union_variant_64)) {
                union_variant_64 = union_struct_65();
            }
            std::get<1>((*this).union_variant_64).size = v;
            return true;
        }
        if (TypeKind::UINT==(*this).kind) {
            if(!std::holds_alternative<union_struct_66>(union_variant_64)) {
                union_variant_64 = union_struct_66();
            }
            std::get<2>((*this).union_variant_64).size = v;
            return true;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            if(!std::holds_alternative<union_struct_67>(union_variant_64)) {
                union_variant_64 = union_struct_67();
            }
            std::get<3>((*this).union_variant_64).size = v;
            return true;
        }
        return false;
    }
    bool TypeBody::size(std::uint8_t&& v) {
        if (TypeKind::INT==(*this).kind) {
            if(!std::holds_alternative<union_struct_65>(union_variant_64)) {
                union_variant_64 = union_struct_65();
            }
            std::get<1>((*this).union_variant_64).size = std::move(v);
            return true;
        }
        if (TypeKind::UINT==(*this).kind) {
            if(!std::holds_alternative<union_struct_66>(union_variant_64)) {
                union_variant_64 = union_struct_66();
            }
            std::get<2>((*this).union_variant_64).size = std::move(v);
            return true;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            if(!std::holds_alternative<union_struct_67>(union_variant_64)) {
                union_variant_64 = union_struct_67();
            }
            std::get<3>((*this).union_variant_64).size = std::move(v);
            return true;
        }
        return false;
    }
    //sort DEBUG: struct Varint code
    //sort DEBUG: struct EndianExpr code
    //sort DEBUG: struct String code
    //sort DEBUG: struct IdentifierRef code
    //sort DEBUG: struct TypeRef code
    //sort DEBUG: struct ExpressionRef code
    //sort DEBUG: struct StringRef code
    //sort DEBUG: struct StatementRef code
    //sort DEBUG: struct Block code
    //sort DEBUG: struct FallbackStatement code
    //sort DEBUG: struct FallbackExpression code
    //sort DEBUG: struct LoopFlowControl code
    //sort DEBUG: struct PhiParam code
    //sort DEBUG: struct AnyRef code
    //sort DEBUG: struct ExpressionBody code
    //sort DEBUG: struct Expression code
    //sort DEBUG: struct IfStatement code
    //sort DEBUG: struct MatchStatement code
    //sort DEBUG: struct StructDecl code
    //sort DEBUG: struct StateDecl code
    //sort DEBUG: struct Expressions code
    //sort DEBUG: struct Metadata code
    //sort DEBUG: struct FallbackStatements code
    //sort DEBUG: struct FallbackExpressions code
    //sort DEBUG: struct LoopStatement code
    //sort DEBUG: struct MatchBranch code
    //sort DEBUG: struct FunctionDecl code
    //sort DEBUG: struct VariableDecl code
    //sort DEBUG: struct FieldDecl code
    //sort DEBUG: struct EnumDecl code
    //sort DEBUG: struct EnumMemberDecl code
    //sort DEBUG: struct UnionDecl code
    //sort DEBUG: struct UnionMemberDecl code
    //sort DEBUG: struct BitFieldDecl code
    //sort DEBUG: struct PropertyDecl code
    //sort DEBUG: struct ErrorReport code
    //sort DEBUG: struct StatementBody code
    //sort DEBUG: struct Statement code
    //sort DEBUG: struct Types code
    //sort DEBUG: struct TypeBody code
    //sort DEBUG: struct Type code
    //sort DEBUG: struct Loc code
    //sort DEBUG: struct Identifier code
    //sort DEBUG: struct StringLiteral code
    //sort DEBUG: struct DebugInfo code
    //sort DEBUG: struct ExtendedBinaryModule code
    ::futils::error::Error<> Varint::encode(::futils::binary::writer& w) const {
        if((*this).prefix()==0) {
            std::uint8_t tmp80 = 0;
            tmp80 = (*this).value();
            tmp80 |= std::uint8_t(0)<<6;
            if (!::futils::binary::write_num(w,tmp80,true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed",::futils::error::Category::lib);
            }
        }
        else 
        if((*this).prefix()==1) {
            std::uint16_t tmp80 = 0;
            tmp80 = (*this).value();
            tmp80 |= std::uint16_t(1)<<14;
            if (!::futils::binary::write_num(w,tmp80,true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed",::futils::error::Category::lib);
            }
        }
        else 
        if((*this).prefix()==2) {
            std::uint32_t tmp80 = 0;
            tmp80 = (*this).value();
            tmp80 |= std::uint32_t(2)<<30;
            if (!::futils::binary::write_num(w,tmp80,true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed",::futils::error::Category::lib);
            }
        }
        else 
        if((*this).prefix()==3) {
            std::uint64_t tmp80 = 0;
            tmp80 = (*this).value();
            tmp80 |= std::uint64_t(3)<<62;
            if (!::futils::binary::write_num(w,tmp80,true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed",::futils::error::Category::lib);
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Varint::decode(::futils::binary::reader& r) {
        if(!r.load_stream(1)) {
            return ::futils::error::Error<>("decode: Varint::value: read bit field failed",::futils::error::Category::lib);
        }
        std::uint8_t tmp81 = (r.top() >> 6 ) & 0x3;
        (*this).prefix(tmp81);
        if((*this).prefix()==0) {
            std::uint8_t tmp82 = 0;
            if(!::futils::binary::read_num(r,tmp82,true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed",::futils::error::Category::lib);
            }
            tmp82 &= ~(std::uint8_t(0x3)<<6);
            (*this).value(tmp82);
        }
        else 
        if((*this).prefix()==1) {
            std::uint16_t tmp83 = 0;
            if(!::futils::binary::read_num(r,tmp83,true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed",::futils::error::Category::lib);
            }
            tmp83 &= ~(std::uint16_t(0x3)<<14);
            (*this).value(tmp83);
        }
        else 
        if((*this).prefix()==2) {
            std::uint32_t tmp84 = 0;
            if(!::futils::binary::read_num(r,tmp84,true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed",::futils::error::Category::lib);
            }
            tmp84 &= ~(std::uint32_t(0x3)<<30);
            (*this).value(tmp84);
        }
        else 
        if((*this).prefix()==3) {
            std::uint64_t tmp85 = 0;
            if(!::futils::binary::read_num(r,tmp85,true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed",::futils::error::Category::lib);
            }
            tmp85 &= ~(std::uint64_t(0x3)<<62);
            (*this).value(tmp85);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> EndianExpr::encode(::futils::binary::writer& w) const {
        if (!::futils::binary::write_num(w,flags_2_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: EndianExpr::reserved: write bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).dynamic_ref.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> EndianExpr::decode(::futils::binary::reader& r) {
        if (!::futils::binary::read_num(r,flags_2_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: EndianExpr::reserved: read bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).dynamic_ref.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> String::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).length.encode(w)) {
            return err;
        }
        auto tmp_86_ = (*this).length.value();
        if (tmp_86_!=(*this).data.size()) {
            return ::futils::error::Error<>("encode: String::data: dynamic length is not compatible with its length; tmp_86_!=(*this).data.size()",::futils::error::Category::lib);
        }
        if (!w.write((*this).data)) {
            return ::futils::error::Error<>("encode: String::data: write array failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> String::decode(::futils::binary::reader& r) {
        if (auto err = (*this).length.decode(r)) {
            return err;
        }
        auto tmp_87_ = (*this).length.value();
        if (!r.read((*this).data, tmp_87_)) {
            return ::futils::error::Error<>("decode: String::data: read byte array failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IdentifierRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        if (!::futils::binary::write_num(w,flags_3_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: IdentifierRef::reserved: write bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IdentifierRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        if (!::futils::binary::read_num(r,flags_3_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: IdentifierRef::reserved: read bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> TypeRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> TypeRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExpressionRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExpressionRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StringRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StringRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StatementRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StatementRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Block::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len.encode(w)) {
            return err;
        }
        auto tmp_88_ = (*this).len.value();
        if (tmp_88_!=(*this).container.size()) {
            return ::futils::error::Error<>("encode: Block::container: dynamic length is not compatible with its length; tmp_88_!=(*this).container.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_89_ : (*this).container) {
            if (auto err = tmp_89_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Block::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len.decode(r)) {
            return err;
        }
        auto tmp_90_ = (*this).len.value();
        (*this).container.clear();
        for (size_t  tmp_92_= 0; tmp_92_<tmp_90_; ++tmp_92_ ) {
            StatementRef tmp_91_;
            if (auto err = tmp_91_.decode(r)) {
                return err;
            }
            (*this).container.push_back(std::move(tmp_91_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FallbackStatement::encode(::futils::binary::writer& w) const {
        auto tmp_93_ = static_cast<std::uint8_t>((*this).fallback_type);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_93_) ,true)) {
            return ::futils::error::Error<>("encode: FallbackStatement::fallback_type: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).block.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FallbackStatement::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_94_ = 0;
        if (!::futils::binary::read_num(r,tmp_94_ ,true)) {
            return ::futils::error::Error<>("decode: FallbackStatement::fallback_type: read int failed",::futils::error::Category::lib);
        }
        (*this).fallback_type = static_cast<FallbackType>(tmp_94_);
        if (auto err = (*this).block.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FallbackExpression::encode(::futils::binary::writer& w) const {
        auto tmp_95_ = static_cast<std::uint8_t>((*this).fallback_type);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_95_) ,true)) {
            return ::futils::error::Error<>("encode: FallbackExpression::fallback_type: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).expression.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FallbackExpression::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_96_ = 0;
        if (!::futils::binary::read_num(r,tmp_96_ ,true)) {
            return ::futils::error::Error<>("decode: FallbackExpression::fallback_type: read int failed",::futils::error::Category::lib);
        }
        (*this).fallback_type = static_cast<FallbackType>(tmp_96_);
        if (auto err = (*this).expression.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoopFlowControl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).related_statement.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoopFlowControl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).related_statement.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> PhiParam::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).condition.encode(w)) {
            return err;
        }
        if (auto err = (*this).value.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> PhiParam::decode(::futils::binary::reader& r) {
        if (auto err = (*this).condition.decode(r)) {
            return err;
        }
        if (auto err = (*this).value.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> AnyRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> AnyRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExpressionBody::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).type.encode(w)) {
            return err;
        }
        auto tmp_97_ = static_cast<std::uint8_t>((*this).op);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_97_) ,true)) {
            return ::futils::error::Error<>("encode: ExpressionBody::op: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            if(!std::holds_alternative<union_struct_6>(union_variant_5)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_5 variant alternative union_struct_6 is not set",::futils::error::Category::lib);
            }
            if (!::futils::binary::write_num(w,static_cast<std::uint64_t>(std::get<1>((*this).union_variant_5).int_value) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::int_value: write std::uint64_t failed",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            if(!std::holds_alternative<union_struct_7>(union_variant_5)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_5 variant alternative union_struct_7 is not set",::futils::error::Category::lib);
            }
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(std::get<2>((*this).union_variant_5).bool_value) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::bool_value: write std::uint8_t failed",::futils::error::Category::lib);
            }
            if (!((std::get<2>((*this).union_variant_5).bool_value == 0) || (std::get<2>((*this).union_variant_5).bool_value == 1))) {
                return ::futils::error::Error<>("encode: ExpressionBody: assertion failed; (std::get<2>((*this).union_variant_5).bool_value == 0) || (std::get<2>((*this).union_variant_5).bool_value == 1)",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::LITERAL_STRING==(*this).op) {
            if(!std::holds_alternative<union_struct_8>(union_variant_5)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_5 variant alternative union_struct_8 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<3>((*this).union_variant_5).string_value.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            if(!std::holds_alternative<union_struct_9>(union_variant_5)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_5 variant alternative union_struct_9 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<4>((*this).union_variant_5).type_ref.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::IDENTIFIER==(*this).op) {
            if(!std::holds_alternative<union_struct_10>(union_variant_5)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_5 variant alternative union_struct_10 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<5>((*this).union_variant_5).id.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::BINARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_11>(union_variant_5)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_5 variant alternative union_struct_11 is not set",::futils::error::Category::lib);
            }
            auto tmp_98_ = static_cast<std::uint8_t>(std::get<6>((*this).union_variant_5).bop);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_98_) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::bop: write std::uint8_t failed",::futils::error::Category::lib);
            }
            if (auto err = std::get<6>((*this).union_variant_5).left.encode(w)) {
                return err;
            }
            if (auto err = std::get<6>((*this).union_variant_5).right.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::UNARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_12>(union_variant_5)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_5 variant alternative union_struct_12 is not set",::futils::error::Category::lib);
            }
            auto tmp_99_ = static_cast<std::uint8_t>(std::get<7>((*this).union_variant_5).uop);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_99_) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::uop: write std::uint8_t failed",::futils::error::Category::lib);
            }
            if (auto err = std::get<7>((*this).union_variant_5).operand.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::CALL==(*this).op) {
            if(!std::holds_alternative<union_struct_13>(union_variant_5)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_5 variant alternative union_struct_13 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<8>((*this).union_variant_5).callee.encode(w)) {
                return err;
            }
            if (auto err = std::get<8>((*this).union_variant_5).args_len.encode(w)) {
                return err;
            }
            auto tmp_100_ = std::get<8>((*this).union_variant_5).args_len.value();
            if (tmp_100_!=std::get<8>((*this).union_variant_5).arguments.size()) {
                return ::futils::error::Error<>("encode: ExpressionBody::arguments: dynamic length is not compatible with its length; tmp_100_!=std::get<8>((*this).union_variant_5).arguments.size()",::futils::error::Category::lib);
            }
            for (auto& tmp_101_ : std::get<8>((*this).union_variant_5).arguments) {
                if (auto err = tmp_101_.encode(w)) {
                    return err;
                }
            }
        }
        else if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_14>(union_variant_5)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_5 variant alternative union_struct_14 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<9>((*this).union_variant_5).base.encode(w)) {
                return err;
            }
            if (auto err = std::get<9>((*this).union_variant_5).index.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_15>(union_variant_5)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_5 variant alternative union_struct_15 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<10>((*this).union_variant_5).base.encode(w)) {
                return err;
            }
            if (auto err = std::get<10>((*this).union_variant_5).member.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::TYPE_CAST==(*this).op) {
            if(!std::holds_alternative<union_struct_16>(union_variant_5)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_5 variant alternative union_struct_16 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<11>((*this).union_variant_5).target_type.encode(w)) {
                return err;
            }
            if (auto err = std::get<11>((*this).union_variant_5).source_expr.encode(w)) {
                return err;
            }
            auto tmp_102_ = static_cast<std::uint8_t>(std::get<11>((*this).union_variant_5).cast_kind);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_102_) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::cast_kind: write std::uint8_t failed",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::RANGE==(*this).op) {
            if(!std::holds_alternative<union_struct_17>(union_variant_5)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_5 variant alternative union_struct_17 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<12>((*this).union_variant_5).start.encode(w)) {
                return err;
            }
            if (auto err = std::get<12>((*this).union_variant_5).end.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExpressionBody::decode(::futils::binary::reader& r) {
        if (auto err = (*this).type.decode(r)) {
            return err;
        }
        std::uint8_t tmp_103_ = 0;
        if (!::futils::binary::read_num(r,tmp_103_ ,true)) {
            return ::futils::error::Error<>("decode: ExpressionBody::op: read int failed",::futils::error::Category::lib);
        }
        (*this).op = static_cast<ExpressionOp>(tmp_103_);
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            if(!std::holds_alternative<union_struct_6>(union_variant_5)) {
                union_variant_5 = union_struct_6();
            }
            if (!::futils::binary::read_num(r,std::get<1>((*this).union_variant_5).int_value ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::int_value: read int failed",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            if(!std::holds_alternative<union_struct_7>(union_variant_5)) {
                union_variant_5 = union_struct_7();
            }
            if (!::futils::binary::read_num(r,std::get<2>((*this).union_variant_5).bool_value ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::bool_value: read int failed",::futils::error::Category::lib);
            }
            if (!((std::get<2>((*this).union_variant_5).bool_value == 0) || (std::get<2>((*this).union_variant_5).bool_value == 1))) {
                return ::futils::error::Error<>("decode: ExpressionBody: assertion failed; (std::get<2>((*this).union_variant_5).bool_value == 0) || (std::get<2>((*this).union_variant_5).bool_value == 1)",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::LITERAL_STRING==(*this).op) {
            if(!std::holds_alternative<union_struct_8>(union_variant_5)) {
                union_variant_5 = union_struct_8();
            }
            if (auto err = std::get<3>((*this).union_variant_5).string_value.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            if(!std::holds_alternative<union_struct_9>(union_variant_5)) {
                union_variant_5 = union_struct_9();
            }
            if (auto err = std::get<4>((*this).union_variant_5).type_ref.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::IDENTIFIER==(*this).op) {
            if(!std::holds_alternative<union_struct_10>(union_variant_5)) {
                union_variant_5 = union_struct_10();
            }
            if (auto err = std::get<5>((*this).union_variant_5).id.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::BINARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_11>(union_variant_5)) {
                union_variant_5 = union_struct_11();
            }
            std::uint8_t tmp_104_ = 0;
            if (!::futils::binary::read_num(r,tmp_104_ ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::bop: read int failed",::futils::error::Category::lib);
            }
            std::get<6>((*this).union_variant_5).bop = static_cast<BinaryOp>(tmp_104_);
            if (auto err = std::get<6>((*this).union_variant_5).left.decode(r)) {
                return err;
            }
            if (auto err = std::get<6>((*this).union_variant_5).right.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::UNARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_12>(union_variant_5)) {
                union_variant_5 = union_struct_12();
            }
            std::uint8_t tmp_105_ = 0;
            if (!::futils::binary::read_num(r,tmp_105_ ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::uop: read int failed",::futils::error::Category::lib);
            }
            std::get<7>((*this).union_variant_5).uop = static_cast<UnaryOp>(tmp_105_);
            if (auto err = std::get<7>((*this).union_variant_5).operand.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::CALL==(*this).op) {
            if(!std::holds_alternative<union_struct_13>(union_variant_5)) {
                union_variant_5 = union_struct_13();
            }
            if (auto err = std::get<8>((*this).union_variant_5).callee.decode(r)) {
                return err;
            }
            if (auto err = std::get<8>((*this).union_variant_5).args_len.decode(r)) {
                return err;
            }
            auto tmp_106_ = std::get<8>((*this).union_variant_5).args_len.value();
            std::get<8>((*this).union_variant_5).arguments.clear();
            for (size_t  tmp_108_= 0; tmp_108_<tmp_106_; ++tmp_108_ ) {
                ExpressionRef tmp_107_;
                if (auto err = tmp_107_.decode(r)) {
                    return err;
                }
                std::get<8>((*this).union_variant_5).arguments.push_back(std::move(tmp_107_));
            }
        }
        else if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_14>(union_variant_5)) {
                union_variant_5 = union_struct_14();
            }
            if (auto err = std::get<9>((*this).union_variant_5).base.decode(r)) {
                return err;
            }
            if (auto err = std::get<9>((*this).union_variant_5).index.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_15>(union_variant_5)) {
                union_variant_5 = union_struct_15();
            }
            if (auto err = std::get<10>((*this).union_variant_5).base.decode(r)) {
                return err;
            }
            if (auto err = std::get<10>((*this).union_variant_5).member.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::TYPE_CAST==(*this).op) {
            if(!std::holds_alternative<union_struct_16>(union_variant_5)) {
                union_variant_5 = union_struct_16();
            }
            if (auto err = std::get<11>((*this).union_variant_5).target_type.decode(r)) {
                return err;
            }
            if (auto err = std::get<11>((*this).union_variant_5).source_expr.decode(r)) {
                return err;
            }
            std::uint8_t tmp_109_ = 0;
            if (!::futils::binary::read_num(r,tmp_109_ ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::cast_kind: read int failed",::futils::error::Category::lib);
            }
            std::get<11>((*this).union_variant_5).cast_kind = static_cast<CastType>(tmp_109_);
        }
        else if (ExpressionOp::RANGE==(*this).op) {
            if(!std::holds_alternative<union_struct_17>(union_variant_5)) {
                union_variant_5 = union_struct_17();
            }
            if (auto err = std::get<12>((*this).union_variant_5).start.decode(r)) {
                return err;
            }
            if (auto err = std::get<12>((*this).union_variant_5).end.decode(r)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Expression::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Expression::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IfStatement::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).condition.encode(w)) {
            return err;
        }
        if (auto err = (*this).then_block.encode(w)) {
            return err;
        }
        if (auto err = (*this).else_block.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IfStatement::decode(::futils::binary::reader& r) {
        if (auto err = (*this).condition.decode(r)) {
            return err;
        }
        if (auto err = (*this).then_block.decode(r)) {
            return err;
        }
        if (auto err = (*this).else_block.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> MatchStatement::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).target.encode(w)) {
            return err;
        }
        if (!::futils::binary::write_num(w,flags_18_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: MatchStatement::reserved: write bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).branches.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> MatchStatement::decode(::futils::binary::reader& r) {
        if (auto err = (*this).target.decode(r)) {
            return err;
        }
        if (!::futils::binary::read_num(r,flags_18_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: MatchStatement::reserved: read bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).branches.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StructDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).fields.encode(w)) {
            return err;
        }
        if (!::futils::binary::write_num(w,flags_19_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: StructDecl::reserved: write bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StructDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).fields.decode(r)) {
            return err;
        }
        if (!::futils::binary::read_num(r,flags_19_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: StructDecl::reserved: read bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StateDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StateDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Expressions::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len.encode(w)) {
            return err;
        }
        auto tmp_110_ = (*this).len.value();
        if (tmp_110_!=(*this).container.size()) {
            return ::futils::error::Error<>("encode: Expressions::container: dynamic length is not compatible with its length; tmp_110_!=(*this).container.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_111_ : (*this).container) {
            if (auto err = tmp_111_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Expressions::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len.decode(r)) {
            return err;
        }
        auto tmp_112_ = (*this).len.value();
        (*this).container.clear();
        for (size_t  tmp_114_= 0; tmp_114_<tmp_112_; ++tmp_114_ ) {
            ExpressionRef tmp_113_;
            if (auto err = tmp_113_.decode(r)) {
                return err;
            }
            (*this).container.push_back(std::move(tmp_113_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Metadata::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).values.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Metadata::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).values.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FallbackStatements::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len.encode(w)) {
            return err;
        }
        auto tmp_115_ = (*this).len.value();
        if (tmp_115_!=(*this).container.size()) {
            return ::futils::error::Error<>("encode: FallbackStatements::container: dynamic length is not compatible with its length; tmp_115_!=(*this).container.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_116_ : (*this).container) {
            if (auto err = tmp_116_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FallbackStatements::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len.decode(r)) {
            return err;
        }
        auto tmp_117_ = (*this).len.value();
        (*this).container.clear();
        for (size_t  tmp_119_= 0; tmp_119_<tmp_117_; ++tmp_119_ ) {
            FallbackStatement tmp_118_;
            if (auto err = tmp_118_.decode(r)) {
                return err;
            }
            (*this).container.push_back(std::move(tmp_118_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FallbackExpressions::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len.encode(w)) {
            return err;
        }
        auto tmp_120_ = (*this).len.value();
        if (tmp_120_!=(*this).container.size()) {
            return ::futils::error::Error<>("encode: FallbackExpressions::container: dynamic length is not compatible with its length; tmp_120_!=(*this).container.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_121_ : (*this).container) {
            if (auto err = tmp_121_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FallbackExpressions::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len.decode(r)) {
            return err;
        }
        auto tmp_122_ = (*this).len.value();
        (*this).container.clear();
        for (size_t  tmp_124_= 0; tmp_124_<tmp_122_; ++tmp_124_ ) {
            FallbackExpression tmp_123_;
            if (auto err = tmp_123_.decode(r)) {
                return err;
            }
            (*this).container.push_back(std::move(tmp_123_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoopStatement::encode(::futils::binary::writer& w) const {
        auto tmp_125_ = static_cast<std::uint8_t>((*this).loop_type);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_125_) ,true)) {
            return ::futils::error::Error<>("encode: LoopStatement::loop_type: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (LoopType::INFINITE==(*this).loop_type) {
        }
        else if (LoopType::WHILE==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_23>(union_variant_21)) {
                return ::futils::error::Error<>("encode: LoopStatement: union_variant_21 variant alternative union_struct_23 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<2>((*this).union_variant_21).condition.encode(w)) {
                return err;
            }
        }
        else if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_24>(union_variant_21)) {
                return ::futils::error::Error<>("encode: LoopStatement: union_variant_21 variant alternative union_struct_24 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<3>((*this).union_variant_21).item_var.encode(w)) {
                return err;
            }
            if (auto err = std::get<3>((*this).union_variant_21).collection.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoopStatement::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_126_ = 0;
        if (!::futils::binary::read_num(r,tmp_126_ ,true)) {
            return ::futils::error::Error<>("decode: LoopStatement::loop_type: read int failed",::futils::error::Category::lib);
        }
        (*this).loop_type = static_cast<LoopType>(tmp_126_);
        if (LoopType::INFINITE==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_22>(union_variant_21)) {
                union_variant_21 = union_struct_22();
            }
        }
        else if (LoopType::WHILE==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_23>(union_variant_21)) {
                union_variant_21 = union_struct_23();
            }
            if (auto err = std::get<2>((*this).union_variant_21).condition.decode(r)) {
                return err;
            }
        }
        else if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_24>(union_variant_21)) {
                union_variant_21 = union_struct_24();
            }
            if (auto err = std::get<3>((*this).union_variant_21).item_var.decode(r)) {
                return err;
            }
            if (auto err = std::get<3>((*this).union_variant_21).collection.decode(r)) {
                return err;
            }
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> MatchBranch::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).condition.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> MatchBranch::decode(::futils::binary::reader& r) {
        if (auto err = (*this).condition.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FunctionDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).return_type.encode(w)) {
            return err;
        }
        if (auto err = (*this).params.encode(w)) {
            return err;
        }
        if (auto err = (*this).parent_format.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FunctionDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).return_type.decode(r)) {
            return err;
        }
        if (auto err = (*this).params.decode(r)) {
            return err;
        }
        if (auto err = (*this).parent_format.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> VariableDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).var_type.encode(w)) {
            return err;
        }
        if (auto err = (*this).initial_value.encode(w)) {
            return err;
        }
        if (!::futils::binary::write_num(w,flags_25_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: VariableDecl::reserved: write bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> VariableDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).var_type.decode(r)) {
            return err;
        }
        if (auto err = (*this).initial_value.decode(r)) {
            return err;
        }
        if (!::futils::binary::read_num(r,flags_25_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: VariableDecl::reserved: read bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FieldDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).field_type.encode(w)) {
            return err;
        }
        if (auto err = (*this).parent_struct.encode(w)) {
            return err;
        }
        if (!::futils::binary::write_num(w,flags_26_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: FieldDecl::reserved: write bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FieldDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).field_type.decode(r)) {
            return err;
        }
        if (auto err = (*this).parent_struct.decode(r)) {
            return err;
        }
        if (!::futils::binary::read_num(r,flags_26_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: FieldDecl::reserved: read bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> EnumDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).base_type.encode(w)) {
            return err;
        }
        if (auto err = (*this).members.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> EnumDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).base_type.decode(r)) {
            return err;
        }
        if (auto err = (*this).members.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> EnumMemberDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).value.encode(w)) {
            return err;
        }
        if (auto err = (*this).string_repr.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> EnumMemberDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).value.decode(r)) {
            return err;
        }
        if (auto err = (*this).string_repr.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> UnionDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).parent_field.encode(w)) {
            return err;
        }
        if (auto err = (*this).members.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> UnionDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).parent_field.decode(r)) {
            return err;
        }
        if (auto err = (*this).members.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> UnionMemberDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).field_type.encode(w)) {
            return err;
        }
        if (!::futils::binary::write_num(w,flags_27_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: UnionMemberDecl::reserved: write bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).parent_union.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> UnionMemberDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).field_type.decode(r)) {
            return err;
        }
        if (!::futils::binary::read_num(r,flags_27_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: UnionMemberDecl::reserved: read bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).parent_union.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> BitFieldDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).parent_format.encode(w)) {
            return err;
        }
        if (auto err = (*this).bit_size.encode(w)) {
            return err;
        }
        auto tmp_127_ = static_cast<std::uint8_t>((*this).packed_op_type);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_127_) ,true)) {
            return ::futils::error::Error<>("encode: BitFieldDecl::packed_op_type: write std::uint8_t failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> BitFieldDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).parent_format.decode(r)) {
            return err;
        }
        if (auto err = (*this).bit_size.decode(r)) {
            return err;
        }
        std::uint8_t tmp_128_ = 0;
        if (!::futils::binary::read_num(r,tmp_128_ ,true)) {
            return ::futils::error::Error<>("decode: BitFieldDecl::packed_op_type: read int failed",::futils::error::Category::lib);
        }
        (*this).packed_op_type = static_cast<PackedOpType>(tmp_128_);
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> PropertyDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).parent_format.encode(w)) {
            return err;
        }
        if (auto err = (*this).property_type.encode(w)) {
            return err;
        }
        auto tmp_129_ = static_cast<std::uint8_t>((*this).merge_mode);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_129_) ,true)) {
            return ::futils::error::Error<>("encode: PropertyDecl::merge_mode: write std::uint8_t failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> PropertyDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).parent_format.decode(r)) {
            return err;
        }
        if (auto err = (*this).property_type.decode(r)) {
            return err;
        }
        std::uint8_t tmp_130_ = 0;
        if (!::futils::binary::read_num(r,tmp_130_ ,true)) {
            return ::futils::error::Error<>("decode: PropertyDecl::merge_mode: read int failed",::futils::error::Category::lib);
        }
        (*this).merge_mode = static_cast<MergeMode>(tmp_130_);
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ErrorReport::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).message.encode(w)) {
            return err;
        }
        if (auto err = (*this).arguments.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ErrorReport::decode(::futils::binary::reader& r) {
        if (auto err = (*this).message.decode(r)) {
            return err;
        }
        if (auto err = (*this).arguments.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StatementBody::encode(::futils::binary::writer& w) const {
        auto tmp_131_ = static_cast<std::uint8_t>((*this).statement_kind);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_131_) ,true)) {
            return ::futils::error::Error<>("encode: StatementBody::statement_kind: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_30>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_30 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<1>((*this).union_variant_29).target.encode(w)) {
                return err;
            }
            if (auto err = std::get<1>((*this).union_variant_29).value.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::RETURN==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_31>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_31 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<2>((*this).union_variant_29).value.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::ASSERT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_32>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_32 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<3>((*this).union_variant_29).condition.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_33>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_33 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<4>((*this).union_variant_29).target_var.encode(w)) {
                return err;
            }
            if (auto err = std::get<4>((*this).union_variant_29).object_type.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::READ_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_34>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_34 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<5>((*this).union_variant_29).target_var.encode(w)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_29).data_type.encode(w)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_29).endian.encode(w)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_29).bit_size.encode(w)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_29).fallback_stmt.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_35 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<6>((*this).union_variant_29).source_expr.encode(w)) {
                return err;
            }
            if (auto err = std::get<6>((*this).union_variant_29).data_type.encode(w)) {
                return err;
            }
            if (auto err = std::get<6>((*this).union_variant_29).endian.encode(w)) {
                return err;
            }
            if (auto err = std::get<6>((*this).union_variant_29).bit_size.encode(w)) {
                return err;
            }
            if (auto err = std::get<6>((*this).union_variant_29).fallback_stmt.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_36>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_36 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<7>((*this).union_variant_29).offset.encode(w)) {
                return err;
            }
            if (auto err = std::get<7>((*this).union_variant_29).stream_type.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_37>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_37 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<8>((*this).union_variant_29).target_var.encode(w)) {
                return err;
            }
            if (auto err = std::get<8>((*this).union_variant_29).stream_type.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_38>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_38 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<9>((*this).union_variant_29).target_var.encode(w)) {
                return err;
            }
            if (auto err = std::get<9>((*this).union_variant_29).stream_type.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_39>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_39 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<10>((*this).union_variant_29).target_var.encode(w)) {
                return err;
            }
            if (auto err = std::get<10>((*this).union_variant_29).stream_type.encode(w)) {
                return err;
            }
            if (auto err = std::get<10>((*this).union_variant_29).num_bytes.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_40>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_40 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<11>((*this).union_variant_29).if_statement.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_41>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_41 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<12>((*this).union_variant_29).loop.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_42>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_42 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<13>((*this).union_variant_29).match_statement.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_43>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_43 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<14>((*this).union_variant_29).match_branch.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::BREAK==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_44>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_44 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<15>((*this).union_variant_29).break_.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::CONTINUE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_45>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_45 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<16>((*this).union_variant_29).continue_.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_46>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_46 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<17>((*this).union_variant_29).func_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_47>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_47 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<18>((*this).union_variant_29).var_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_48>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_48 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<19>((*this).union_variant_29).field_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_49>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_49 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<20>((*this).union_variant_29).enum_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_50>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_50 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<21>((*this).union_variant_29).enum_member_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_51>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_51 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<22>((*this).union_variant_29).struct_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::UNION_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_52>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_52 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<23>((*this).union_variant_29).union_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_53>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_53 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<24>((*this).union_variant_29).union_member_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_54>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_54 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<25>((*this).union_variant_29).body.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::STATE_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_55>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_55 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<26>((*this).union_variant_29).state_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_56>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_56 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<27>((*this).union_variant_29).bit_field_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_57>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_57 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<28>((*this).union_variant_29).property_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::METADATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_58>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_58 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<29>((*this).union_variant_29).metadata.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_59>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_59 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<30>((*this).union_variant_29).module_name.encode(w)) {
                return err;
            }
            if (auto err = std::get<30>((*this).union_variant_29).alias.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::PHI_NODE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_60>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_60 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<31>((*this).union_variant_29).target_var.encode(w)) {
                return err;
            }
            if (auto err = std::get<31>((*this).union_variant_29).params_len.encode(w)) {
                return err;
            }
            auto tmp_132_ = std::get<31>((*this).union_variant_29).params_len.value();
            if (tmp_132_!=std::get<31>((*this).union_variant_29).params.size()) {
                return ::futils::error::Error<>("encode: StatementBody::params: dynamic length is not compatible with its length; tmp_132_!=std::get<31>((*this).union_variant_29).params.size()",::futils::error::Category::lib);
            }
            for (auto& tmp_133_ : std::get<31>((*this).union_variant_29).params) {
                if (auto err = tmp_133_.encode(w)) {
                    return err;
                }
            }
        }
        else if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_61>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_61 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<32>((*this).union_variant_29).error_report.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::EXPRESSION==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_62>(union_variant_29)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_29 variant alternative union_struct_62 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<33>((*this).union_variant_29).expression.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StatementBody::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_134_ = 0;
        if (!::futils::binary::read_num(r,tmp_134_ ,true)) {
            return ::futils::error::Error<>("decode: StatementBody::statement_kind: read int failed",::futils::error::Category::lib);
        }
        (*this).statement_kind = static_cast<StatementOp>(tmp_134_);
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_30>(union_variant_29)) {
                union_variant_29 = union_struct_30();
            }
            if (auto err = std::get<1>((*this).union_variant_29).target.decode(r)) {
                return err;
            }
            if (auto err = std::get<1>((*this).union_variant_29).value.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::RETURN==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_31>(union_variant_29)) {
                union_variant_29 = union_struct_31();
            }
            if (auto err = std::get<2>((*this).union_variant_29).value.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::ASSERT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_32>(union_variant_29)) {
                union_variant_29 = union_struct_32();
            }
            if (auto err = std::get<3>((*this).union_variant_29).condition.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::NEW_OBJECT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_33>(union_variant_29)) {
                union_variant_29 = union_struct_33();
            }
            if (auto err = std::get<4>((*this).union_variant_29).target_var.decode(r)) {
                return err;
            }
            if (auto err = std::get<4>((*this).union_variant_29).object_type.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::READ_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_34>(union_variant_29)) {
                union_variant_29 = union_struct_34();
            }
            if (auto err = std::get<5>((*this).union_variant_29).target_var.decode(r)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_29).data_type.decode(r)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_29).endian.decode(r)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_29).bit_size.decode(r)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_29).fallback_stmt.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_29)) {
                union_variant_29 = union_struct_35();
            }
            if (auto err = std::get<6>((*this).union_variant_29).source_expr.decode(r)) {
                return err;
            }
            if (auto err = std::get<6>((*this).union_variant_29).data_type.decode(r)) {
                return err;
            }
            if (auto err = std::get<6>((*this).union_variant_29).endian.decode(r)) {
                return err;
            }
            if (auto err = std::get<6>((*this).union_variant_29).bit_size.decode(r)) {
                return err;
            }
            if (auto err = std::get<6>((*this).union_variant_29).fallback_stmt.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_36>(union_variant_29)) {
                union_variant_29 = union_struct_36();
            }
            if (auto err = std::get<7>((*this).union_variant_29).offset.decode(r)) {
                return err;
            }
            if (auto err = std::get<7>((*this).union_variant_29).stream_type.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::GET_STREAM_OFFSET==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_37>(union_variant_29)) {
                union_variant_29 = union_struct_37();
            }
            if (auto err = std::get<8>((*this).union_variant_29).target_var.decode(r)) {
                return err;
            }
            if (auto err = std::get<8>((*this).union_variant_29).stream_type.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::GET_REMAINING_BYTES==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_38>(union_variant_29)) {
                union_variant_29 = union_struct_38();
            }
            if (auto err = std::get<9>((*this).union_variant_29).target_var.decode(r)) {
                return err;
            }
            if (auto err = std::get<9>((*this).union_variant_29).stream_type.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::CAN_READ_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_39>(union_variant_29)) {
                union_variant_29 = union_struct_39();
            }
            if (auto err = std::get<10>((*this).union_variant_29).target_var.decode(r)) {
                return err;
            }
            if (auto err = std::get<10>((*this).union_variant_29).stream_type.decode(r)) {
                return err;
            }
            if (auto err = std::get<10>((*this).union_variant_29).num_bytes.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_40>(union_variant_29)) {
                union_variant_29 = union_struct_40();
            }
            if (auto err = std::get<11>((*this).union_variant_29).if_statement.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_41>(union_variant_29)) {
                union_variant_29 = union_struct_41();
            }
            if (auto err = std::get<12>((*this).union_variant_29).loop.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_42>(union_variant_29)) {
                union_variant_29 = union_struct_42();
            }
            if (auto err = std::get<13>((*this).union_variant_29).match_statement.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_43>(union_variant_29)) {
                union_variant_29 = union_struct_43();
            }
            if (auto err = std::get<14>((*this).union_variant_29).match_branch.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::BREAK==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_44>(union_variant_29)) {
                union_variant_29 = union_struct_44();
            }
            if (auto err = std::get<15>((*this).union_variant_29).break_.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::CONTINUE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_45>(union_variant_29)) {
                union_variant_29 = union_struct_45();
            }
            if (auto err = std::get<16>((*this).union_variant_29).continue_.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_46>(union_variant_29)) {
                union_variant_29 = union_struct_46();
            }
            if (auto err = std::get<17>((*this).union_variant_29).func_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_47>(union_variant_29)) {
                union_variant_29 = union_struct_47();
            }
            if (auto err = std::get<18>((*this).union_variant_29).var_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_48>(union_variant_29)) {
                union_variant_29 = union_struct_48();
            }
            if (auto err = std::get<19>((*this).union_variant_29).field_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_49>(union_variant_29)) {
                union_variant_29 = union_struct_49();
            }
            if (auto err = std::get<20>((*this).union_variant_29).enum_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_50>(union_variant_29)) {
                union_variant_29 = union_struct_50();
            }
            if (auto err = std::get<21>((*this).union_variant_29).enum_member_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_51>(union_variant_29)) {
                union_variant_29 = union_struct_51();
            }
            if (auto err = std::get<22>((*this).union_variant_29).struct_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::UNION_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_52>(union_variant_29)) {
                union_variant_29 = union_struct_52();
            }
            if (auto err = std::get<23>((*this).union_variant_29).union_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_53>(union_variant_29)) {
                union_variant_29 = union_struct_53();
            }
            if (auto err = std::get<24>((*this).union_variant_29).union_member_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_54>(union_variant_29)) {
                union_variant_29 = union_struct_54();
            }
            if (auto err = std::get<25>((*this).union_variant_29).body.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::STATE_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_55>(union_variant_29)) {
                union_variant_29 = union_struct_55();
            }
            if (auto err = std::get<26>((*this).union_variant_29).state_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_56>(union_variant_29)) {
                union_variant_29 = union_struct_56();
            }
            if (auto err = std::get<27>((*this).union_variant_29).bit_field_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_57>(union_variant_29)) {
                union_variant_29 = union_struct_57();
            }
            if (auto err = std::get<28>((*this).union_variant_29).property_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::METADATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_58>(union_variant_29)) {
                union_variant_29 = union_struct_58();
            }
            if (auto err = std::get<29>((*this).union_variant_29).metadata.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_59>(union_variant_29)) {
                union_variant_29 = union_struct_59();
            }
            if (auto err = std::get<30>((*this).union_variant_29).module_name.decode(r)) {
                return err;
            }
            if (auto err = std::get<30>((*this).union_variant_29).alias.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::PHI_NODE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_60>(union_variant_29)) {
                union_variant_29 = union_struct_60();
            }
            if (auto err = std::get<31>((*this).union_variant_29).target_var.decode(r)) {
                return err;
            }
            if (auto err = std::get<31>((*this).union_variant_29).params_len.decode(r)) {
                return err;
            }
            auto tmp_135_ = std::get<31>((*this).union_variant_29).params_len.value();
            std::get<31>((*this).union_variant_29).params.clear();
            for (size_t  tmp_137_= 0; tmp_137_<tmp_135_; ++tmp_137_ ) {
                PhiParam tmp_136_;
                if (auto err = tmp_136_.decode(r)) {
                    return err;
                }
                std::get<31>((*this).union_variant_29).params.push_back(std::move(tmp_136_));
            }
        }
        else if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_61>(union_variant_29)) {
                union_variant_29 = union_struct_61();
            }
            if (auto err = std::get<32>((*this).union_variant_29).error_report.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::EXPRESSION==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_62>(union_variant_29)) {
                union_variant_29 = union_struct_62();
            }
            if (auto err = std::get<33>((*this).union_variant_29).expression.decode(r)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Statement::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Statement::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Types::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len.encode(w)) {
            return err;
        }
        auto tmp_138_ = (*this).len.value();
        if (tmp_138_!=(*this).container.size()) {
            return ::futils::error::Error<>("encode: Types::container: dynamic length is not compatible with its length; tmp_138_!=(*this).container.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_139_ : (*this).container) {
            if (auto err = tmp_139_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Types::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len.decode(r)) {
            return err;
        }
        auto tmp_140_ = (*this).len.value();
        (*this).container.clear();
        for (size_t  tmp_142_= 0; tmp_142_<tmp_140_; ++tmp_142_ ) {
            TypeRef tmp_141_;
            if (auto err = tmp_141_.decode(r)) {
                return err;
            }
            (*this).container.push_back(std::move(tmp_141_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> TypeBody::encode(::futils::binary::writer& w) const {
        auto tmp_143_ = static_cast<std::uint8_t>((*this).kind);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_143_) ,true)) {
            return ::futils::error::Error<>("encode: TypeBody::kind: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (TypeKind::INT==(*this).kind) {
            if(!std::holds_alternative<union_struct_65>(union_variant_64)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_64 variant alternative union_struct_65 is not set",::futils::error::Category::lib);
            }
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(std::get<1>((*this).union_variant_64).size) ,true)) {
                return ::futils::error::Error<>("encode: TypeBody::size: write std::uint8_t failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::UINT==(*this).kind) {
            if(!std::holds_alternative<union_struct_66>(union_variant_64)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_64 variant alternative union_struct_66 is not set",::futils::error::Category::lib);
            }
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(std::get<2>((*this).union_variant_64).size) ,true)) {
                return ::futils::error::Error<>("encode: TypeBody::size: write std::uint8_t failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::FLOAT==(*this).kind) {
            if(!std::holds_alternative<union_struct_67>(union_variant_64)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_64 variant alternative union_struct_67 is not set",::futils::error::Category::lib);
            }
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(std::get<3>((*this).union_variant_64).size) ,true)) {
                return ::futils::error::Error<>("encode: TypeBody::size: write std::uint8_t failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::BOOL==(*this).kind) {
        }
        else if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_69>(union_variant_64)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_64 variant alternative union_struct_69 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<5>((*this).union_variant_64).element_type.encode(w)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_64).length.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::VECTOR==(*this).kind) {
            if(!std::holds_alternative<union_struct_70>(union_variant_64)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_64 variant alternative union_struct_70 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<6>((*this).union_variant_64).element_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_71>(union_variant_64)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_64 variant alternative union_struct_71 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<7>((*this).union_variant_64).id.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_72>(union_variant_64)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_64 variant alternative union_struct_72 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<8>((*this).union_variant_64).id.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_73>(union_variant_64)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_64 variant alternative union_struct_73 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<9>((*this).union_variant_64).id.encode(w)) {
                return err;
            }
            if (auto err = std::get<9>((*this).union_variant_64).base_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_74>(union_variant_64)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_64 variant alternative union_struct_74 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<10>((*this).union_variant_64).common_type.encode(w)) {
                return err;
            }
            if (auto err = std::get<10>((*this).union_variant_64).members.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::CODER_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_75>(union_variant_64)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_64 variant alternative union_struct_75 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<11>((*this).union_variant_64).coder_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_76>(union_variant_64)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_64 variant alternative union_struct_76 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<12>((*this).union_variant_64).property_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::OPTIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_77>(union_variant_64)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_64 variant alternative union_struct_77 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<13>((*this).union_variant_64).inner_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::PTR==(*this).kind) {
            if(!std::holds_alternative<union_struct_78>(union_variant_64)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_64 variant alternative union_struct_78 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<14>((*this).union_variant_64).pointee_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_79>(union_variant_64)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_64 variant alternative union_struct_79 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<15>((*this).union_variant_64).base_type.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> TypeBody::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_144_ = 0;
        if (!::futils::binary::read_num(r,tmp_144_ ,true)) {
            return ::futils::error::Error<>("decode: TypeBody::kind: read int failed",::futils::error::Category::lib);
        }
        (*this).kind = static_cast<TypeKind>(tmp_144_);
        if (TypeKind::INT==(*this).kind) {
            if(!std::holds_alternative<union_struct_65>(union_variant_64)) {
                union_variant_64 = union_struct_65();
            }
            if (!::futils::binary::read_num(r,std::get<1>((*this).union_variant_64).size ,true)) {
                return ::futils::error::Error<>("decode: TypeBody::size: read int failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::UINT==(*this).kind) {
            if(!std::holds_alternative<union_struct_66>(union_variant_64)) {
                union_variant_64 = union_struct_66();
            }
            if (!::futils::binary::read_num(r,std::get<2>((*this).union_variant_64).size ,true)) {
                return ::futils::error::Error<>("decode: TypeBody::size: read int failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::FLOAT==(*this).kind) {
            if(!std::holds_alternative<union_struct_67>(union_variant_64)) {
                union_variant_64 = union_struct_67();
            }
            if (!::futils::binary::read_num(r,std::get<3>((*this).union_variant_64).size ,true)) {
                return ::futils::error::Error<>("decode: TypeBody::size: read int failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::BOOL==(*this).kind) {
            if(!std::holds_alternative<union_struct_68>(union_variant_64)) {
                union_variant_64 = union_struct_68();
            }
        }
        else if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_69>(union_variant_64)) {
                union_variant_64 = union_struct_69();
            }
            if (auto err = std::get<5>((*this).union_variant_64).element_type.decode(r)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_64).length.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::VECTOR==(*this).kind) {
            if(!std::holds_alternative<union_struct_70>(union_variant_64)) {
                union_variant_64 = union_struct_70();
            }
            if (auto err = std::get<6>((*this).union_variant_64).element_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_71>(union_variant_64)) {
                union_variant_64 = union_struct_71();
            }
            if (auto err = std::get<7>((*this).union_variant_64).id.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_72>(union_variant_64)) {
                union_variant_64 = union_struct_72();
            }
            if (auto err = std::get<8>((*this).union_variant_64).id.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_73>(union_variant_64)) {
                union_variant_64 = union_struct_73();
            }
            if (auto err = std::get<9>((*this).union_variant_64).id.decode(r)) {
                return err;
            }
            if (auto err = std::get<9>((*this).union_variant_64).base_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_74>(union_variant_64)) {
                union_variant_64 = union_struct_74();
            }
            if (auto err = std::get<10>((*this).union_variant_64).common_type.decode(r)) {
                return err;
            }
            if (auto err = std::get<10>((*this).union_variant_64).members.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::CODER_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_75>(union_variant_64)) {
                union_variant_64 = union_struct_75();
            }
            if (auto err = std::get<11>((*this).union_variant_64).coder_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_76>(union_variant_64)) {
                union_variant_64 = union_struct_76();
            }
            if (auto err = std::get<12>((*this).union_variant_64).property_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::OPTIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_77>(union_variant_64)) {
                union_variant_64 = union_struct_77();
            }
            if (auto err = std::get<13>((*this).union_variant_64).inner_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::PTR==(*this).kind) {
            if(!std::holds_alternative<union_struct_78>(union_variant_64)) {
                union_variant_64 = union_struct_78();
            }
            if (auto err = std::get<14>((*this).union_variant_64).pointee_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_79>(union_variant_64)) {
                union_variant_64 = union_struct_79();
            }
            if (auto err = std::get<15>((*this).union_variant_64).base_type.decode(r)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Type::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Type::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Loc::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).ident.encode(w)) {
            return err;
        }
        if (auto err = (*this).file_id.encode(w)) {
            return err;
        }
        if (auto err = (*this).line.encode(w)) {
            return err;
        }
        if (auto err = (*this).column.encode(w)) {
            return err;
        }
        if (auto err = (*this).start.encode(w)) {
            return err;
        }
        if (auto err = (*this).end.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Loc::decode(::futils::binary::reader& r) {
        if (auto err = (*this).ident.decode(r)) {
            return err;
        }
        if (auto err = (*this).file_id.decode(r)) {
            return err;
        }
        if (auto err = (*this).line.decode(r)) {
            return err;
        }
        if (auto err = (*this).column.decode(r)) {
            return err;
        }
        if (auto err = (*this).start.decode(r)) {
            return err;
        }
        if (auto err = (*this).end.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Identifier::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Identifier::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StringLiteral::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        if (auto err = (*this).value.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StringLiteral::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        if (auto err = (*this).value.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> DebugInfo::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len_files.encode(w)) {
            return err;
        }
        auto tmp_145_ = (*this).len_files.value();
        if (tmp_145_!=(*this).files.size()) {
            return ::futils::error::Error<>("encode: DebugInfo::files: dynamic length is not compatible with its length; tmp_145_!=(*this).files.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_146_ : (*this).files) {
            if (auto err = tmp_146_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).len_locs.encode(w)) {
            return err;
        }
        auto tmp_147_ = (*this).len_locs.value();
        if (tmp_147_!=(*this).locs.size()) {
            return ::futils::error::Error<>("encode: DebugInfo::locs: dynamic length is not compatible with its length; tmp_147_!=(*this).locs.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_148_ : (*this).locs) {
            if (auto err = tmp_148_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> DebugInfo::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len_files.decode(r)) {
            return err;
        }
        auto tmp_149_ = (*this).len_files.value();
        (*this).files.clear();
        for (size_t  tmp_151_= 0; tmp_151_<tmp_149_; ++tmp_151_ ) {
            String tmp_150_;
            if (auto err = tmp_150_.decode(r)) {
                return err;
            }
            (*this).files.push_back(std::move(tmp_150_));
        }
        if (auto err = (*this).len_locs.decode(r)) {
            return err;
        }
        auto tmp_152_ = (*this).len_locs.value();
        (*this).locs.clear();
        for (size_t  tmp_154_= 0; tmp_154_<tmp_152_; ++tmp_154_ ) {
            Loc tmp_153_;
            if (auto err = tmp_153_.decode(r)) {
                return err;
            }
            (*this).locs.push_back(std::move(tmp_153_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExtendedBinaryModule::encode(::futils::binary::writer& w) const {
        if (!w.write(::futils::view::rvec("EBMG", 4))) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::magic: write string failed; \"EBMG\"",::futils::error::Category::lib);
        }
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>((*this).version) ,true)) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::version: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).max_id.encode(w)) {
            return err;
        }
        if (auto err = (*this).identifiers_len.encode(w)) {
            return err;
        }
        auto tmp_155_ = (*this).identifiers_len.value();
        if (tmp_155_!=(*this).identifiers.size()) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::identifiers: dynamic length is not compatible with its length; tmp_155_!=(*this).identifiers.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_156_ : (*this).identifiers) {
            if (auto err = tmp_156_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).strings_len.encode(w)) {
            return err;
        }
        auto tmp_157_ = (*this).strings_len.value();
        if (tmp_157_!=(*this).strings.size()) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::strings: dynamic length is not compatible with its length; tmp_157_!=(*this).strings.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_158_ : (*this).strings) {
            if (auto err = tmp_158_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).types_len.encode(w)) {
            return err;
        }
        auto tmp_159_ = (*this).types_len.value();
        if (tmp_159_!=(*this).types.size()) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::types: dynamic length is not compatible with its length; tmp_159_!=(*this).types.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_160_ : (*this).types) {
            if (auto err = tmp_160_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).statements_len.encode(w)) {
            return err;
        }
        auto tmp_161_ = (*this).statements_len.value();
        if (tmp_161_!=(*this).statements.size()) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::statements: dynamic length is not compatible with its length; tmp_161_!=(*this).statements.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_162_ : (*this).statements) {
            if (auto err = tmp_162_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).expressions_len.encode(w)) {
            return err;
        }
        auto tmp_163_ = (*this).expressions_len.value();
        if (tmp_163_!=(*this).expressions.size()) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::expressions: dynamic length is not compatible with its length; tmp_163_!=(*this).expressions.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_164_ : (*this).expressions) {
            if (auto err = tmp_164_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).debug_info.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExtendedBinaryModule::decode(::futils::binary::reader& r) {
        ::futils::view::rvec tmp_165_ = {};
        if (!r.read_direct(tmp_165_, 4)) {
            return ::futils::error::Error<>("decode: ExtendedBinaryModule::magic: read string failed",::futils::error::Category::lib);
        }
        if (tmp_165_ != ::futils::view::rvec("EBMG",4)) {
            return ::futils::error::Error<>("decode: ExtendedBinaryModule::magic: read string failed; not match to \"EBMG\"",::futils::error::Category::lib);
        }
        if (!::futils::binary::read_num(r,(*this).version ,true)) {
            return ::futils::error::Error<>("decode: ExtendedBinaryModule::version: read int failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).max_id.decode(r)) {
            return err;
        }
        if (auto err = (*this).identifiers_len.decode(r)) {
            return err;
        }
        auto tmp_166_ = (*this).identifiers_len.value();
        (*this).identifiers.clear();
        for (size_t  tmp_168_= 0; tmp_168_<tmp_166_; ++tmp_168_ ) {
            Identifier tmp_167_;
            if (auto err = tmp_167_.decode(r)) {
                return err;
            }
            (*this).identifiers.push_back(std::move(tmp_167_));
        }
        if (auto err = (*this).strings_len.decode(r)) {
            return err;
        }
        auto tmp_169_ = (*this).strings_len.value();
        (*this).strings.clear();
        for (size_t  tmp_171_= 0; tmp_171_<tmp_169_; ++tmp_171_ ) {
            StringLiteral tmp_170_;
            if (auto err = tmp_170_.decode(r)) {
                return err;
            }
            (*this).strings.push_back(std::move(tmp_170_));
        }
        if (auto err = (*this).types_len.decode(r)) {
            return err;
        }
        auto tmp_172_ = (*this).types_len.value();
        (*this).types.clear();
        for (size_t  tmp_174_= 0; tmp_174_<tmp_172_; ++tmp_174_ ) {
            Type tmp_173_;
            if (auto err = tmp_173_.decode(r)) {
                return err;
            }
            (*this).types.push_back(std::move(tmp_173_));
        }
        if (auto err = (*this).statements_len.decode(r)) {
            return err;
        }
        auto tmp_175_ = (*this).statements_len.value();
        (*this).statements.clear();
        for (size_t  tmp_177_= 0; tmp_177_<tmp_175_; ++tmp_177_ ) {
            Statement tmp_176_;
            if (auto err = tmp_176_.decode(r)) {
                return err;
            }
            (*this).statements.push_back(std::move(tmp_176_));
        }
        if (auto err = (*this).expressions_len.decode(r)) {
            return err;
        }
        auto tmp_178_ = (*this).expressions_len.value();
        (*this).expressions.clear();
        for (size_t  tmp_180_= 0; tmp_180_<tmp_178_; ++tmp_180_ ) {
            Expression tmp_179_;
            if (auto err = tmp_179_.decode(r)) {
                return err;
            }
            (*this).expressions.push_back(std::move(tmp_179_));
        }
        if (auto err = (*this).debug_info.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
} // namespace ebm

