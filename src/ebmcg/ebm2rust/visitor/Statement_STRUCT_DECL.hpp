/*DO NOT EDIT BELOW SECTION MANUALLY*/
/*license*/
// Template generated by ebmcodegen at https://github.com/on-keyday/rebrgen
/*
  Name: Statement_STRUCT_DECL
  Available variables:
    *this: Visitor
    module_: MappingTable
    item_id: StatementRef
    kind: StatementKind
    struct_decl: StructDecl
      name: IdentifierRef
      fields: Block
        len: Varint
        container: std::vector<StatementRef>
      is_recursive: bool
      is_fixed_size: bool
      has_related_variant: bool
      has_encode_decode: bool
      reserved: std::uint8_t
      related_variant: *TypeRef
      size: *Size
        unit: SizeUnit
        ref: *ExpressionRef
        size: *Varint
      decode_fn: *StatementRef
      encode_fn: *StatementRef
*/
/*DO NOT EDIT ABOVE SECTION MANUALLY*/

/*here to write the hook*/
auto name = module_.get_associated_identifier(item_id);

CodeWriter w;
w.writeln("#[derive(Debug, Clone, PartialEq, Eq, Default)]");  // Add common derives
w.writeln("pub struct ", name, " {");
{
    auto scope = w.indent_scope();
    for (auto& field : struct_decl.fields.container) {
        MAYBE(field_str, visit_Statement(*this, field));
        w.write(field_str.to_writer());
    }
}
w.writeln("}");

w.writeln();  // Add a newline for separation
w.writeln("impl ", name, " {");
{
    auto impl_scope = w.indent_scope();
    if (auto enc_fn = struct_decl.encode_fn()) {
        MAYBE(encode_fn_str, visit_Statement(*this, *enc_fn));
        w.write(encode_fn_str.to_writer());
    }
    if (auto dec_fn = struct_decl.decode_fn()) {
        MAYBE(decode_fn_str, visit_Statement(*this, *dec_fn));
        w.write(decode_fn_str.to_writer());
    }
}
w.writeln("}");

return w;
