//Code generated by json2cpp2
#pragma once
#include <cstdint>
#include <vector>
#include <array>
#include <optional>
#include <variant>
#include <string_view>

#include <binary/flags.h>
#include <binary/float.h>
#include <view/iovec.h>
#include <binary/number.h>
#include <memory>
#include <error/error.h>
#include <string>
#ifndef BM_API
#ifdef _WIN32
#define BM_API __declspec(dllimport)
#else
#define BM_API
#endif
#endif
namespace rebgn {
    enum class BinaryOp : std::uint8_t {
        mul = 0,
        div = 1,
        mod = 2,
        left_shift = 3,
        right_shift = 4,
        bit_and = 5,
        add = 6,
        sub = 7,
        bit_or = 8,
        bit_xor = 9,
        equal = 10,
        not_equal = 11,
        less = 12,
        less_or_eq = 13,
        grater = 14,
        grater_or_eq = 15,
        logical_and = 16,
        logical_or = 17,
    };
    constexpr const char* to_string(BinaryOp e) {
        switch(e) {
            case BinaryOp::mul: return "*";
            case BinaryOp::div: return "/";
            case BinaryOp::mod: return "%";
            case BinaryOp::left_shift: return "<<";
            case BinaryOp::right_shift: return ">>";
            case BinaryOp::bit_and: return "&";
            case BinaryOp::add: return "+";
            case BinaryOp::sub: return "-";
            case BinaryOp::bit_or: return "|";
            case BinaryOp::bit_xor: return "^";
            case BinaryOp::equal: return "==";
            case BinaryOp::not_equal: return "!=";
            case BinaryOp::less: return "<";
            case BinaryOp::less_or_eq: return "<=";
            case BinaryOp::grater: return ">";
            case BinaryOp::grater_or_eq: return ">=";
            case BinaryOp::logical_and: return "&&";
            case BinaryOp::logical_or: return "||";
        }
        return "";
    }
    
    constexpr std::optional<BinaryOp> BinaryOp_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "*") {
            return BinaryOp::mul;
        }
        if (str == "/") {
            return BinaryOp::div;
        }
        if (str == "%") {
            return BinaryOp::mod;
        }
        if (str == "<<") {
            return BinaryOp::left_shift;
        }
        if (str == ">>") {
            return BinaryOp::right_shift;
        }
        if (str == "&") {
            return BinaryOp::bit_and;
        }
        if (str == "+") {
            return BinaryOp::add;
        }
        if (str == "-") {
            return BinaryOp::sub;
        }
        if (str == "|") {
            return BinaryOp::bit_or;
        }
        if (str == "^") {
            return BinaryOp::bit_xor;
        }
        if (str == "==") {
            return BinaryOp::equal;
        }
        if (str == "!=") {
            return BinaryOp::not_equal;
        }
        if (str == "<") {
            return BinaryOp::less;
        }
        if (str == "<=") {
            return BinaryOp::less_or_eq;
        }
        if (str == ">") {
            return BinaryOp::grater;
        }
        if (str == ">=") {
            return BinaryOp::grater_or_eq;
        }
        if (str == "&&") {
            return BinaryOp::logical_and;
        }
        if (str == "||") {
            return BinaryOp::logical_or;
        }
        return std::nullopt;
    }
    enum class UnaryOp : std::uint8_t {
        logical_not = 0,
        minus_sign = 1,
        bit_not = 2,
    };
    constexpr const char* to_string(UnaryOp e) {
        switch(e) {
            case UnaryOp::logical_not: return "!";
            case UnaryOp::minus_sign: return "-";
            case UnaryOp::bit_not: return "~";
        }
        return "";
    }
    
    constexpr std::optional<UnaryOp> UnaryOp_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "!") {
            return UnaryOp::logical_not;
        }
        if (str == "-") {
            return UnaryOp::minus_sign;
        }
        if (str == "~") {
            return UnaryOp::bit_not;
        }
        return std::nullopt;
    }
    enum class Endian : std::uint8_t {
        unspec = 0,
        big = 1,
        little = 2,
        dynamic = 3,
        native = 4,
    };
    constexpr const char* to_string(Endian e) {
        switch(e) {
            case Endian::unspec: return "unspec";
            case Endian::big: return "big";
            case Endian::little: return "little";
            case Endian::dynamic: return "dynamic";
            case Endian::native: return "native";
        }
        return "";
    }
    
    constexpr std::optional<Endian> Endian_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "unspec") {
            return Endian::unspec;
        }
        if (str == "big") {
            return Endian::big;
        }
        if (str == "little") {
            return Endian::little;
        }
        if (str == "dynamic") {
            return Endian::dynamic;
        }
        if (str == "native") {
            return Endian::native;
        }
        return std::nullopt;
    }
    enum class AbstractOp : std::uint8_t {
        LITERAL_INT = 0,
        LITERAL_BOOL = 1,
        LITERAL_STRING = 2,
        LITERAL_TYPE = 3,
        IDENTIFIER_REF = 4,
        BINARY_OP = 5,
        UNARY_OP = 6,
        ASSIGNMENT = 7,
        CALL = 8,
        RETURN = 9,
        ASSERT = 10,
        NEW_OBJECT = 11,
        INDEX_ACCESS = 12,
        MEMBER_ACCESS = 13,
        TYPE_CAST = 14,
        IF_STATEMENT = 15,
        LOOP_STATEMENT = 16,
        MATCH_STATEMENT = 17,
        BREAK = 18,
        CONTINUE = 19,
        FUNCTION_DECL = 20,
        VARIABLE_DECL = 21,
        FIELD_DECL = 22,
        ENUM_DECL = 23,
        ENUM_MEMBER_DECL = 24,
        STRUCT_DECL = 25,
        UNION_DECL = 26,
        PROGRAM_DECL = 27,
        STATE_DECL = 28,
        BIT_FIELD_DECL = 29,
        PROPERTY_DECL = 30,
        READ_DATA = 31,
        WRITE_DATA = 32,
        SEEK_STREAM = 33,
        GET_STREAM_OFFSET = 34,
        GET_REMAINING_BYTES = 35,
        CAN_READ_STREAM = 36,
        METADATA = 37,
        IMPORT_MODULE = 38,
        PHI_NODE = 39,
        ERROR_REPORT = 40,
    };
    constexpr const char* to_string(AbstractOp e) {
        switch(e) {
            case AbstractOp::LITERAL_INT: return "LITERAL_INT";
            case AbstractOp::LITERAL_BOOL: return "LITERAL_BOOL";
            case AbstractOp::LITERAL_STRING: return "LITERAL_STRING";
            case AbstractOp::LITERAL_TYPE: return "LITERAL_TYPE";
            case AbstractOp::IDENTIFIER_REF: return "IDENTIFIER_REF";
            case AbstractOp::BINARY_OP: return "BINARY_OP";
            case AbstractOp::UNARY_OP: return "UNARY_OP";
            case AbstractOp::ASSIGNMENT: return "ASSIGNMENT";
            case AbstractOp::CALL: return "CALL";
            case AbstractOp::RETURN: return "RETURN";
            case AbstractOp::ASSERT: return "ASSERT";
            case AbstractOp::NEW_OBJECT: return "NEW_OBJECT";
            case AbstractOp::INDEX_ACCESS: return "INDEX_ACCESS";
            case AbstractOp::MEMBER_ACCESS: return "MEMBER_ACCESS";
            case AbstractOp::TYPE_CAST: return "TYPE_CAST";
            case AbstractOp::IF_STATEMENT: return "IF_STATEMENT";
            case AbstractOp::LOOP_STATEMENT: return "LOOP_STATEMENT";
            case AbstractOp::MATCH_STATEMENT: return "MATCH_STATEMENT";
            case AbstractOp::BREAK: return "BREAK";
            case AbstractOp::CONTINUE: return "CONTINUE";
            case AbstractOp::FUNCTION_DECL: return "FUNCTION_DECL";
            case AbstractOp::VARIABLE_DECL: return "VARIABLE_DECL";
            case AbstractOp::FIELD_DECL: return "FIELD_DECL";
            case AbstractOp::ENUM_DECL: return "ENUM_DECL";
            case AbstractOp::ENUM_MEMBER_DECL: return "ENUM_MEMBER_DECL";
            case AbstractOp::STRUCT_DECL: return "STRUCT_DECL";
            case AbstractOp::UNION_DECL: return "UNION_DECL";
            case AbstractOp::PROGRAM_DECL: return "PROGRAM_DECL";
            case AbstractOp::STATE_DECL: return "STATE_DECL";
            case AbstractOp::BIT_FIELD_DECL: return "BIT_FIELD_DECL";
            case AbstractOp::PROPERTY_DECL: return "PROPERTY_DECL";
            case AbstractOp::READ_DATA: return "READ_DATA";
            case AbstractOp::WRITE_DATA: return "WRITE_DATA";
            case AbstractOp::SEEK_STREAM: return "SEEK_STREAM";
            case AbstractOp::GET_STREAM_OFFSET: return "GET_STREAM_OFFSET";
            case AbstractOp::GET_REMAINING_BYTES: return "GET_REMAINING_BYTES";
            case AbstractOp::CAN_READ_STREAM: return "CAN_READ_STREAM";
            case AbstractOp::METADATA: return "METADATA";
            case AbstractOp::IMPORT_MODULE: return "IMPORT_MODULE";
            case AbstractOp::PHI_NODE: return "PHI_NODE";
            case AbstractOp::ERROR_REPORT: return "ERROR_REPORT";
        }
        return "";
    }
    
    constexpr std::optional<AbstractOp> AbstractOp_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "LITERAL_INT") {
            return AbstractOp::LITERAL_INT;
        }
        if (str == "LITERAL_BOOL") {
            return AbstractOp::LITERAL_BOOL;
        }
        if (str == "LITERAL_STRING") {
            return AbstractOp::LITERAL_STRING;
        }
        if (str == "LITERAL_TYPE") {
            return AbstractOp::LITERAL_TYPE;
        }
        if (str == "IDENTIFIER_REF") {
            return AbstractOp::IDENTIFIER_REF;
        }
        if (str == "BINARY_OP") {
            return AbstractOp::BINARY_OP;
        }
        if (str == "UNARY_OP") {
            return AbstractOp::UNARY_OP;
        }
        if (str == "ASSIGNMENT") {
            return AbstractOp::ASSIGNMENT;
        }
        if (str == "CALL") {
            return AbstractOp::CALL;
        }
        if (str == "RETURN") {
            return AbstractOp::RETURN;
        }
        if (str == "ASSERT") {
            return AbstractOp::ASSERT;
        }
        if (str == "NEW_OBJECT") {
            return AbstractOp::NEW_OBJECT;
        }
        if (str == "INDEX_ACCESS") {
            return AbstractOp::INDEX_ACCESS;
        }
        if (str == "MEMBER_ACCESS") {
            return AbstractOp::MEMBER_ACCESS;
        }
        if (str == "TYPE_CAST") {
            return AbstractOp::TYPE_CAST;
        }
        if (str == "IF_STATEMENT") {
            return AbstractOp::IF_STATEMENT;
        }
        if (str == "LOOP_STATEMENT") {
            return AbstractOp::LOOP_STATEMENT;
        }
        if (str == "MATCH_STATEMENT") {
            return AbstractOp::MATCH_STATEMENT;
        }
        if (str == "BREAK") {
            return AbstractOp::BREAK;
        }
        if (str == "CONTINUE") {
            return AbstractOp::CONTINUE;
        }
        if (str == "FUNCTION_DECL") {
            return AbstractOp::FUNCTION_DECL;
        }
        if (str == "VARIABLE_DECL") {
            return AbstractOp::VARIABLE_DECL;
        }
        if (str == "FIELD_DECL") {
            return AbstractOp::FIELD_DECL;
        }
        if (str == "ENUM_DECL") {
            return AbstractOp::ENUM_DECL;
        }
        if (str == "ENUM_MEMBER_DECL") {
            return AbstractOp::ENUM_MEMBER_DECL;
        }
        if (str == "STRUCT_DECL") {
            return AbstractOp::STRUCT_DECL;
        }
        if (str == "UNION_DECL") {
            return AbstractOp::UNION_DECL;
        }
        if (str == "PROGRAM_DECL") {
            return AbstractOp::PROGRAM_DECL;
        }
        if (str == "STATE_DECL") {
            return AbstractOp::STATE_DECL;
        }
        if (str == "BIT_FIELD_DECL") {
            return AbstractOp::BIT_FIELD_DECL;
        }
        if (str == "PROPERTY_DECL") {
            return AbstractOp::PROPERTY_DECL;
        }
        if (str == "READ_DATA") {
            return AbstractOp::READ_DATA;
        }
        if (str == "WRITE_DATA") {
            return AbstractOp::WRITE_DATA;
        }
        if (str == "SEEK_STREAM") {
            return AbstractOp::SEEK_STREAM;
        }
        if (str == "GET_STREAM_OFFSET") {
            return AbstractOp::GET_STREAM_OFFSET;
        }
        if (str == "GET_REMAINING_BYTES") {
            return AbstractOp::GET_REMAINING_BYTES;
        }
        if (str == "CAN_READ_STREAM") {
            return AbstractOp::CAN_READ_STREAM;
        }
        if (str == "METADATA") {
            return AbstractOp::METADATA;
        }
        if (str == "IMPORT_MODULE") {
            return AbstractOp::IMPORT_MODULE;
        }
        if (str == "PHI_NODE") {
            return AbstractOp::PHI_NODE;
        }
        if (str == "ERROR_REPORT") {
            return AbstractOp::ERROR_REPORT;
        }
        return std::nullopt;
    }
    enum class ExpressionOp : std::uint8_t {
        LITERAL_INT = 0,
        LITERAL_BOOL = 1,
        LITERAL_STRING = 2,
        LITERAL_TYPE = 3,
        IDENTIFIER_REF = 4,
        BINARY_OP = 5,
        UNARY_OP = 6,
        CALL = 7,
        INDEX_ACCESS = 8,
        MEMBER_ACCESS = 9,
        TYPE_CAST = 10,
    };
    constexpr const char* to_string(ExpressionOp e) {
        switch(e) {
            case ExpressionOp::LITERAL_INT: return "LITERAL_INT";
            case ExpressionOp::LITERAL_BOOL: return "LITERAL_BOOL";
            case ExpressionOp::LITERAL_STRING: return "LITERAL_STRING";
            case ExpressionOp::LITERAL_TYPE: return "LITERAL_TYPE";
            case ExpressionOp::IDENTIFIER_REF: return "IDENTIFIER_REF";
            case ExpressionOp::BINARY_OP: return "BINARY_OP";
            case ExpressionOp::UNARY_OP: return "UNARY_OP";
            case ExpressionOp::CALL: return "CALL";
            case ExpressionOp::INDEX_ACCESS: return "INDEX_ACCESS";
            case ExpressionOp::MEMBER_ACCESS: return "MEMBER_ACCESS";
            case ExpressionOp::TYPE_CAST: return "TYPE_CAST";
        }
        return "";
    }
    
    constexpr std::optional<ExpressionOp> ExpressionOp_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "LITERAL_INT") {
            return ExpressionOp::LITERAL_INT;
        }
        if (str == "LITERAL_BOOL") {
            return ExpressionOp::LITERAL_BOOL;
        }
        if (str == "LITERAL_STRING") {
            return ExpressionOp::LITERAL_STRING;
        }
        if (str == "LITERAL_TYPE") {
            return ExpressionOp::LITERAL_TYPE;
        }
        if (str == "IDENTIFIER_REF") {
            return ExpressionOp::IDENTIFIER_REF;
        }
        if (str == "BINARY_OP") {
            return ExpressionOp::BINARY_OP;
        }
        if (str == "UNARY_OP") {
            return ExpressionOp::UNARY_OP;
        }
        if (str == "CALL") {
            return ExpressionOp::CALL;
        }
        if (str == "INDEX_ACCESS") {
            return ExpressionOp::INDEX_ACCESS;
        }
        if (str == "MEMBER_ACCESS") {
            return ExpressionOp::MEMBER_ACCESS;
        }
        if (str == "TYPE_CAST") {
            return ExpressionOp::TYPE_CAST;
        }
        return std::nullopt;
    }
    enum class LoopType : std::uint8_t {
        INFINITE = 0,
        WHILE = 1,
        FOR_EACH = 2,
    };
    constexpr const char* to_string(LoopType e) {
        switch(e) {
            case LoopType::INFINITE: return "INFINITE";
            case LoopType::WHILE: return "WHILE";
            case LoopType::FOR_EACH: return "FOR_EACH";
        }
        return "";
    }
    
    constexpr std::optional<LoopType> LoopType_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "INFINITE") {
            return LoopType::INFINITE;
        }
        if (str == "WHILE") {
            return LoopType::WHILE;
        }
        if (str == "FOR_EACH") {
            return LoopType::FOR_EACH;
        }
        return std::nullopt;
    }
    enum class CastType : std::uint8_t {
        ENUM_TO_INT = 0,
        INT_TO_ENUM = 1,
        FLOAT_TO_INT_BIT = 2,
        INT_TO_FLOAT_BIT = 3,
        VECTOR_TO_ARRAY = 4,
        ARRAY_TO_VECTOR = 5,
        INT_TO_VECTOR = 6,
        INT_TO_ARRAY = 7,
        SMALL_INT_TO_LARGE_INT = 8,
        LARGE_INT_TO_SMALL_INT = 9,
        SIGNED_TO_UNSIGNED = 10,
        UNSIGNED_TO_SIGNED = 11,
        BOOL_TO_INT = 12,
        INT_TO_BOOL = 13,
        STRUCT_TO_RECURSIVE_STRUCT = 14,
        RECURSIVE_STRUCT_TO_STRUCT = 15,
        OTHER = 16,
    };
    constexpr const char* to_string(CastType e) {
        switch(e) {
            case CastType::ENUM_TO_INT: return "ENUM_TO_INT";
            case CastType::INT_TO_ENUM: return "INT_TO_ENUM";
            case CastType::FLOAT_TO_INT_BIT: return "FLOAT_TO_INT_BIT";
            case CastType::INT_TO_FLOAT_BIT: return "INT_TO_FLOAT_BIT";
            case CastType::VECTOR_TO_ARRAY: return "VECTOR_TO_ARRAY";
            case CastType::ARRAY_TO_VECTOR: return "ARRAY_TO_VECTOR";
            case CastType::INT_TO_VECTOR: return "INT_TO_VECTOR";
            case CastType::INT_TO_ARRAY: return "INT_TO_ARRAY";
            case CastType::SMALL_INT_TO_LARGE_INT: return "SMALL_INT_TO_LARGE_INT";
            case CastType::LARGE_INT_TO_SMALL_INT: return "LARGE_INT_TO_SMALL_INT";
            case CastType::SIGNED_TO_UNSIGNED: return "SIGNED_TO_UNSIGNED";
            case CastType::UNSIGNED_TO_SIGNED: return "UNSIGNED_TO_SIGNED";
            case CastType::BOOL_TO_INT: return "BOOL_TO_INT";
            case CastType::INT_TO_BOOL: return "INT_TO_BOOL";
            case CastType::STRUCT_TO_RECURSIVE_STRUCT: return "STRUCT_TO_RECURSIVE_STRUCT";
            case CastType::RECURSIVE_STRUCT_TO_STRUCT: return "RECURSIVE_STRUCT_TO_STRUCT";
            case CastType::OTHER: return "OTHER";
        }
        return "";
    }
    
    constexpr std::optional<CastType> CastType_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "ENUM_TO_INT") {
            return CastType::ENUM_TO_INT;
        }
        if (str == "INT_TO_ENUM") {
            return CastType::INT_TO_ENUM;
        }
        if (str == "FLOAT_TO_INT_BIT") {
            return CastType::FLOAT_TO_INT_BIT;
        }
        if (str == "INT_TO_FLOAT_BIT") {
            return CastType::INT_TO_FLOAT_BIT;
        }
        if (str == "VECTOR_TO_ARRAY") {
            return CastType::VECTOR_TO_ARRAY;
        }
        if (str == "ARRAY_TO_VECTOR") {
            return CastType::ARRAY_TO_VECTOR;
        }
        if (str == "INT_TO_VECTOR") {
            return CastType::INT_TO_VECTOR;
        }
        if (str == "INT_TO_ARRAY") {
            return CastType::INT_TO_ARRAY;
        }
        if (str == "SMALL_INT_TO_LARGE_INT") {
            return CastType::SMALL_INT_TO_LARGE_INT;
        }
        if (str == "LARGE_INT_TO_SMALL_INT") {
            return CastType::LARGE_INT_TO_SMALL_INT;
        }
        if (str == "SIGNED_TO_UNSIGNED") {
            return CastType::SIGNED_TO_UNSIGNED;
        }
        if (str == "UNSIGNED_TO_SIGNED") {
            return CastType::UNSIGNED_TO_SIGNED;
        }
        if (str == "BOOL_TO_INT") {
            return CastType::BOOL_TO_INT;
        }
        if (str == "INT_TO_BOOL") {
            return CastType::INT_TO_BOOL;
        }
        if (str == "STRUCT_TO_RECURSIVE_STRUCT") {
            return CastType::STRUCT_TO_RECURSIVE_STRUCT;
        }
        if (str == "RECURSIVE_STRUCT_TO_STRUCT") {
            return CastType::RECURSIVE_STRUCT_TO_STRUCT;
        }
        if (str == "OTHER") {
            return CastType::OTHER;
        }
        return std::nullopt;
    }
    enum class MergeMode : std::uint8_t {
        COMMON_TYPE = 0,
        STRICT_TYPE = 1,
        STRICT_COMMON_TYPE = 2,
    };
    constexpr const char* to_string(MergeMode e) {
        switch(e) {
            case MergeMode::COMMON_TYPE: return "COMMON_TYPE";
            case MergeMode::STRICT_TYPE: return "STRICT_TYPE";
            case MergeMode::STRICT_COMMON_TYPE: return "STRICT_COMMON_TYPE";
        }
        return "";
    }
    
    constexpr std::optional<MergeMode> MergeMode_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "COMMON_TYPE") {
            return MergeMode::COMMON_TYPE;
        }
        if (str == "STRICT_TYPE") {
            return MergeMode::STRICT_TYPE;
        }
        if (str == "STRICT_COMMON_TYPE") {
            return MergeMode::STRICT_COMMON_TYPE;
        }
        return std::nullopt;
    }
    enum class TypeKind : std::uint8_t {
        VOID = 0,
    };
    constexpr const char* to_string(TypeKind e) {
        switch(e) {
            case TypeKind::VOID: return "VOID";
        }
        return "";
    }
    
    constexpr std::optional<TypeKind> TypeKind_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "VOID") {
            return TypeKind::VOID;
        }
        return std::nullopt;
    }
    struct Varint;
    struct Type;
    struct String;
    struct IdentifierRef;
    struct TypeRef;
    struct FieldDecl;
    struct UnionMemberDecl;
    struct BM_API Varint{
        ::futils::binary::flags_t<std::uint64_t,2,62> flags_1_;
        bits_flag_alias_method(flags_1_,0,prefix);
        bits_flag_alias_method(flags_1_,1,value);
        ::futils::error::Error<> encode(::futils::binary::writer& w) const ;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 0;
    };
    struct BM_API Type{
        TypeKind kind{};
        ::futils::error::Error<> encode(::futils::binary::writer& w) const ;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 1;
    };
    struct BM_API String{
        Varint length;
        std::string data;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const ;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct BM_API IdentifierRef{
        Varint id;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const ;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct BM_API TypeRef{
        Varint id;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const ;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct BM_API FieldDecl{
        IdentifierRef name;
        TypeRef field_type;
        IdentifierRef parent_struct;
        ::futils::binary::flags_t<std::uint8_t, 1, 7> flags_2_;
        bits_flag_alias_method(flags_2_,0,is_state_variable);
        bits_flag_alias_method(flags_2_,1,reserved);
        ::futils::error::Error<> encode(::futils::binary::writer& w) const ;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct BM_API UnionMemberDecl{
        IdentifierRef name;
        TypeRef field_type;
        ::futils::binary::flags_t<std::uint8_t, 1, 7> flags_3_;
        bits_flag_alias_method(flags_3_,0,is_state_variable);
        bits_flag_alias_method(flags_3_,1,reserved);
        ::futils::error::Error<> encode(::futils::binary::writer& w) const ;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
} // namespace rebgn

