!@section func_if_after.txt
if(is_empty_block) {
    w.writeln("pass");
}
!@section func_elif_after.txt
!@include func_if_after.txt
!@section func_else_after.txt
!@include func_if_after.txt
!@section block_define_union_member_after.txt
!@include func_if_after.txt

!@section block_define_enum.txt
w.writeln("class ",ident,"(Enum):");
defer.push_back(w.indent_scope_ex());


!@section func_call_code_common.txt
w.write("if not ", obj_eval.result, ".", func_name, "(");
add_call_parameter(ctx, w,range);
w.writeln("):");
auto scope = w.indent_scope();
w.writeln("return False");
scope.execute();

!@section func_call_decode.txt
w.writeln("if not isinstance(",obj_eval.result,",",func_belong_name,"):");
auto scope_2 = w.indent_scope();
w.writeln(obj_eval.result,"=",func_belong_name,"()");
scope_2.execute();
!@include func_call_code_common.txt

!@section func_call_encode.txt
w.writeln("if not isinstance(",obj_eval.result,",",func_belong_name,"):");
auto scope_2 = w.indent_scope();
w.writeln("return False");
scope_2.execute();
!@include func_call_code_common.txt
!@section cmptest_build.txt
copy_file(INPUT,OUTPUT)
!@section cmptest_run.txt
run_command(["python",EXEC,INPUT,OUTPUT])
!@section keywords.txt
False
None
True
and
as
assert
async
await
break
class
continue
def
del
elif
else
except
finally
for
from
global
if
import
in
is
lambda
nonlocal
not
or
pass
raise
return
try
while
with
yield
!@end_section