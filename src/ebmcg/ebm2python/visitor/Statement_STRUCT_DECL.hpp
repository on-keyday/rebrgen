/*DO NOT EDIT BELOW SECTION MANUALLY*/
/*license*/
// Template generated by ebmcodegen at https://github.com/on-keyday/rebrgen
/*
  Name: Statement_STRUCT_DECL
  Available variables:
    *this: Visitor
    module_: MappingTable
    item_id: StatementRef
    kind: StatementKind
    struct_decl: StructDecl
      name: IdentifierRef
      fields: Block
        len: Varint
        container: std::vector<StatementRef>
      encode_fn: StatementRef
      decode_fn: StatementRef
      is_recursive: bool
      is_fixed_size: bool
      has_related_variant: bool
      reserved: std::uint8_t
      related_variant: *TypeRef
      size: *Size
        unit: SizeUnit
        ref: *ExpressionRef
        size: *Varint
*/
/*DO NOT EDIT ABOVE SECTION MANUALLY*/
// This code is included within the visit_Statement_STRUCT_DECL function.
// We can use variables like `visitor` and `struct_decl` directly.
CodeWriter w;
auto name = this->module_.get_identifier_or(item_id);

if (this->module_.get_identifier(item_id)) {
    output.struct_names.push_back(name);
}
w.writeln_with_loc(to_any_ref(item_id), "class ", name, ":");
size_t size = w.str_size();
auto scope = w.indent_scope();

for (auto& field_ref : struct_decl.fields.container) {
    MAYBE(field, this->module_.get_statement(field_ref));
    MAYBE(res, visit_Statement(*this, field));
    merge_result(*this, w, res);
}

// Visit encode_fn if it exists
if (!is_nil(struct_decl.encode_fn)) {  // Corrected: Check value() of Varint id
    MAYBE(encode_fn_stmt, this->module_.get_statement(struct_decl.encode_fn));
    MAYBE(res, visit_Statement(*this, encode_fn_stmt));
    merge_result(*this, w, res);
}

// Visit decode_fn if it exists
if (!is_nil(struct_decl.decode_fn)) {  // Corrected: Check value() of Varint id
    MAYBE(decode_fn_stmt, this->module_.get_statement(struct_decl.decode_fn));
    MAYBE(res, visit_Statement(*this, decode_fn_stmt));
    merge_result(*this, w, res);
}

if (w.str_size() == size) {
    w.writeln("pass");  // If the class body is empty, we just pass
}

w.writeln();  // Add a blank line for readability.

return w;