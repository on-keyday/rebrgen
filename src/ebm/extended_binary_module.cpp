//Code generated by json2cpp2
#ifndef EBM_API
#ifdef _WIN32
#define EBM_API __declspec(dllexport)
#else
#define EBM_API __attribute__((visibility("default")))
#endif
#endif
#include "extended_binary_module.hpp"
namespace ebm {
    std::optional<ExpressionRef> ExpressionBody::array_expr() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::RANGE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).op) {
        if(!std::holds_alternative<union_struct_21>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<17>((*this).union_variant_4).array_expr;
        }
        return std::nullopt;
    }
    bool ExpressionBody::array_expr(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).op) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).op) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).op) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).op) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).op) {
            if(!std::holds_alternative<union_struct_21>(union_variant_4)) {
                union_variant_4 = union_struct_21();
            }
            std::get<17>((*this).union_variant_4).array_expr = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::array_expr(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).op) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).op) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).op) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).op) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).op) {
            if(!std::holds_alternative<union_struct_21>(union_variant_4)) {
                union_variant_4 = union_struct_21();
            }
            std::get<17>((*this).union_variant_4).array_expr = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::base() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        if(!std::holds_alternative<union_struct_13>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<9>((*this).union_variant_4).base;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        if(!std::holds_alternative<union_struct_14>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<10>((*this).union_variant_4).base;
        }
        return std::nullopt;
    }
    bool ExpressionBody::base(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_13>(union_variant_4)) {
                union_variant_4 = union_struct_13();
            }
            std::get<9>((*this).union_variant_4).base = v;
            return true;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_14>(union_variant_4)) {
                union_variant_4 = union_struct_14();
            }
            std::get<10>((*this).union_variant_4).base = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::base(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_13>(union_variant_4)) {
                union_variant_4 = union_struct_13();
            }
            std::get<9>((*this).union_variant_4).base = std::move(v);
            return true;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_14>(union_variant_4)) {
                union_variant_4 = union_struct_14();
            }
            std::get<10>((*this).union_variant_4).base = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<std::uint8_t> ExpressionBody::bool_value() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        if(!std::holds_alternative<union_struct_6>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<2>((*this).union_variant_4).bool_value;
        }
        return std::nullopt;
    }
    bool ExpressionBody::bool_value(const std::uint8_t& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            if(!std::holds_alternative<union_struct_6>(union_variant_4)) {
                union_variant_4 = union_struct_6();
            }
            std::get<2>((*this).union_variant_4).bool_value = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::bool_value(std::uint8_t&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            if(!std::holds_alternative<union_struct_6>(union_variant_4)) {
                union_variant_4 = union_struct_6();
            }
            std::get<2>((*this).union_variant_4).bool_value = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<BinaryOp> ExpressionBody::bop() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        if(!std::holds_alternative<union_struct_10>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<6>((*this).union_variant_4).bop;
        }
        return std::nullopt;
    }
    bool ExpressionBody::bop(const BinaryOp& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_10>(union_variant_4)) {
                union_variant_4 = union_struct_10();
            }
            std::get<6>((*this).union_variant_4).bop = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::bop(BinaryOp&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_10>(union_variant_4)) {
                union_variant_4 = union_struct_10();
            }
            std::get<6>((*this).union_variant_4).bop = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<CallDesc> ExpressionBody::call_desc() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        if(!std::holds_alternative<union_struct_12>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<8>((*this).union_variant_4).call_desc;
        }
        return std::nullopt;
    }
    bool ExpressionBody::call_desc(const CallDesc& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            if(!std::holds_alternative<union_struct_12>(union_variant_4)) {
                union_variant_4 = union_struct_12();
            }
            std::get<8>((*this).union_variant_4).call_desc = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::call_desc(CallDesc&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            if(!std::holds_alternative<union_struct_12>(union_variant_4)) {
                union_variant_4 = union_struct_12();
            }
            std::get<8>((*this).union_variant_4).call_desc = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<CastType> ExpressionBody::cast_kind() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
        if(!std::holds_alternative<union_struct_15>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<11>((*this).union_variant_4).cast_kind;
        }
        return std::nullopt;
    }
    bool ExpressionBody::cast_kind(const CastType& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            if(!std::holds_alternative<union_struct_15>(union_variant_4)) {
                union_variant_4 = union_struct_15();
            }
            std::get<11>((*this).union_variant_4).cast_kind = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::cast_kind(CastType&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            if(!std::holds_alternative<union_struct_15>(union_variant_4)) {
                union_variant_4 = union_struct_15();
            }
            std::get<11>((*this).union_variant_4).cast_kind = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::end() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::RANGE==(*this).op) {
        if(!std::holds_alternative<union_struct_16>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<12>((*this).union_variant_4).end;
        }
        return std::nullopt;
    }
    bool ExpressionBody::end(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            if(!std::holds_alternative<union_struct_16>(union_variant_4)) {
                union_variant_4 = union_struct_16();
            }
            std::get<12>((*this).union_variant_4).end = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::end(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            if(!std::holds_alternative<union_struct_16>(union_variant_4)) {
                union_variant_4 = union_struct_16();
            }
            std::get<12>((*this).union_variant_4).end = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<StatementRef> ExpressionBody::endian_expr() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::RANGE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).op) {
        if(!std::holds_alternative<union_struct_17>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<13>((*this).union_variant_4).endian_expr;
        }
        return std::nullopt;
    }
    bool ExpressionBody::endian_expr(const StatementRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).op) {
            if(!std::holds_alternative<union_struct_17>(union_variant_4)) {
                union_variant_4 = union_struct_17();
            }
            std::get<13>((*this).union_variant_4).endian_expr = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::endian_expr(StatementRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).op) {
            if(!std::holds_alternative<union_struct_17>(union_variant_4)) {
                union_variant_4 = union_struct_17();
            }
            std::get<13>((*this).union_variant_4).endian_expr = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> ExpressionBody::from_type() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
        if(!std::holds_alternative<union_struct_15>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<11>((*this).union_variant_4).from_type;
        }
        return std::nullopt;
    }
    bool ExpressionBody::from_type(const TypeRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            if(!std::holds_alternative<union_struct_15>(union_variant_4)) {
                union_variant_4 = union_struct_15();
            }
            std::get<11>((*this).union_variant_4).from_type = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::from_type(TypeRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            if(!std::holds_alternative<union_struct_15>(union_variant_4)) {
                union_variant_4 = union_struct_15();
            }
            std::get<11>((*this).union_variant_4).from_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<StatementRef> ExpressionBody::id() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        if(!std::holds_alternative<union_struct_9>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<5>((*this).union_variant_4).id;
        }
        return std::nullopt;
    }
    bool ExpressionBody::id(const StatementRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            if(!std::holds_alternative<union_struct_9>(union_variant_4)) {
                union_variant_4 = union_struct_9();
            }
            std::get<5>((*this).union_variant_4).id = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::id(StatementRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            if(!std::holds_alternative<union_struct_9>(union_variant_4)) {
                union_variant_4 = union_struct_9();
            }
            std::get<5>((*this).union_variant_4).id = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::index() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        if(!std::holds_alternative<union_struct_13>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<9>((*this).union_variant_4).index;
        }
        return std::nullopt;
    }
    bool ExpressionBody::index(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_13>(union_variant_4)) {
                union_variant_4 = union_struct_13();
            }
            std::get<9>((*this).union_variant_4).index = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::index(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_13>(union_variant_4)) {
                union_variant_4 = union_struct_13();
            }
            std::get<9>((*this).union_variant_4).index = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<std::uint64_t> ExpressionBody::int_value() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        if(!std::holds_alternative<union_struct_5>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<1>((*this).union_variant_4).int_value;
        }
        return std::nullopt;
    }
    bool ExpressionBody::int_value(const std::uint64_t& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            if(!std::holds_alternative<union_struct_5>(union_variant_4)) {
                union_variant_4 = union_struct_5();
            }
            std::get<1>((*this).union_variant_4).int_value = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::int_value(std::uint64_t&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            if(!std::holds_alternative<union_struct_5>(union_variant_4)) {
                union_variant_4 = union_struct_5();
            }
            std::get<1>((*this).union_variant_4).int_value = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::left() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        if(!std::holds_alternative<union_struct_10>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<6>((*this).union_variant_4).left;
        }
        return std::nullopt;
    }
    bool ExpressionBody::left(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_10>(union_variant_4)) {
                union_variant_4 = union_struct_10();
            }
            std::get<6>((*this).union_variant_4).left = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::left(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_10>(union_variant_4)) {
                union_variant_4 = union_struct_10();
            }
            std::get<6>((*this).union_variant_4).left = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<StatementRef> ExpressionBody::member() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        if(!std::holds_alternative<union_struct_14>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<10>((*this).union_variant_4).member;
        }
        return std::nullopt;
    }
    bool ExpressionBody::member(const StatementRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_14>(union_variant_4)) {
                union_variant_4 = union_struct_14();
            }
            std::get<10>((*this).union_variant_4).member = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::member(StatementRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_14>(union_variant_4)) {
                union_variant_4 = union_struct_14();
            }
            std::get<10>((*this).union_variant_4).member = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::num_bytes() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::RANGE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).op) {
        if(!std::holds_alternative<union_struct_20>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<16>((*this).union_variant_4).num_bytes;
        }
        return std::nullopt;
    }
    bool ExpressionBody::num_bytes(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).op) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).op) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).op) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).op) {
            if(!std::holds_alternative<union_struct_20>(union_variant_4)) {
                union_variant_4 = union_struct_20();
            }
            std::get<16>((*this).union_variant_4).num_bytes = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::num_bytes(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).op) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).op) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).op) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).op) {
            if(!std::holds_alternative<union_struct_20>(union_variant_4)) {
                union_variant_4 = union_struct_20();
            }
            std::get<16>((*this).union_variant_4).num_bytes = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::operand() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        if(!std::holds_alternative<union_struct_11>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<7>((*this).union_variant_4).operand;
        }
        return std::nullopt;
    }
    bool ExpressionBody::operand(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_11>(union_variant_4)) {
                union_variant_4 = union_struct_11();
            }
            std::get<7>((*this).union_variant_4).operand = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::operand(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_11>(union_variant_4)) {
                union_variant_4 = union_struct_11();
            }
            std::get<7>((*this).union_variant_4).operand = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::right() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        if(!std::holds_alternative<union_struct_10>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<6>((*this).union_variant_4).right;
        }
        return std::nullopt;
    }
    bool ExpressionBody::right(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_10>(union_variant_4)) {
                union_variant_4 = union_struct_10();
            }
            std::get<6>((*this).union_variant_4).right = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::right(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_10>(union_variant_4)) {
                union_variant_4 = union_struct_10();
            }
            std::get<6>((*this).union_variant_4).right = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::source_expr() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
        if(!std::holds_alternative<union_struct_15>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<11>((*this).union_variant_4).source_expr;
        }
        return std::nullopt;
    }
    bool ExpressionBody::source_expr(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            if(!std::holds_alternative<union_struct_15>(union_variant_4)) {
                union_variant_4 = union_struct_15();
            }
            std::get<11>((*this).union_variant_4).source_expr = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::source_expr(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            if(!std::holds_alternative<union_struct_15>(union_variant_4)) {
                union_variant_4 = union_struct_15();
            }
            std::get<11>((*this).union_variant_4).source_expr = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::start() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::RANGE==(*this).op) {
        if(!std::holds_alternative<union_struct_16>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<12>((*this).union_variant_4).start;
        }
        return std::nullopt;
    }
    bool ExpressionBody::start(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            if(!std::holds_alternative<union_struct_16>(union_variant_4)) {
                union_variant_4 = union_struct_16();
            }
            std::get<12>((*this).union_variant_4).start = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::start(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            if(!std::holds_alternative<union_struct_16>(union_variant_4)) {
                union_variant_4 = union_struct_16();
            }
            std::get<12>((*this).union_variant_4).start = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<StreamType> ExpressionBody::stream_type() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::RANGE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).op) {
        if(!std::holds_alternative<union_struct_18>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<14>((*this).union_variant_4).stream_type;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).op) {
        if(!std::holds_alternative<union_struct_19>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<15>((*this).union_variant_4).stream_type;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).op) {
        if(!std::holds_alternative<union_struct_20>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<16>((*this).union_variant_4).stream_type;
        }
        return std::nullopt;
    }
    bool ExpressionBody::stream_type(const StreamType& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).op) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).op) {
            if(!std::holds_alternative<union_struct_18>(union_variant_4)) {
                union_variant_4 = union_struct_18();
            }
            std::get<14>((*this).union_variant_4).stream_type = v;
            return true;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).op) {
            if(!std::holds_alternative<union_struct_19>(union_variant_4)) {
                union_variant_4 = union_struct_19();
            }
            std::get<15>((*this).union_variant_4).stream_type = v;
            return true;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).op) {
            if(!std::holds_alternative<union_struct_20>(union_variant_4)) {
                union_variant_4 = union_struct_20();
            }
            std::get<16>((*this).union_variant_4).stream_type = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::stream_type(StreamType&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).op) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).op) {
            if(!std::holds_alternative<union_struct_18>(union_variant_4)) {
                union_variant_4 = union_struct_18();
            }
            std::get<14>((*this).union_variant_4).stream_type = std::move(v);
            return true;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).op) {
            if(!std::holds_alternative<union_struct_19>(union_variant_4)) {
                union_variant_4 = union_struct_19();
            }
            std::get<15>((*this).union_variant_4).stream_type = std::move(v);
            return true;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).op) {
            if(!std::holds_alternative<union_struct_20>(union_variant_4)) {
                union_variant_4 = union_struct_20();
            }
            std::get<16>((*this).union_variant_4).stream_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<StringRef> ExpressionBody::string_value() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        if(!std::holds_alternative<union_struct_7>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<3>((*this).union_variant_4).string_value;
        }
        return std::nullopt;
    }
    bool ExpressionBody::string_value(const StringRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            if(!std::holds_alternative<union_struct_7>(union_variant_4)) {
                union_variant_4 = union_struct_7();
            }
            std::get<3>((*this).union_variant_4).string_value = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::string_value(StringRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            if(!std::holds_alternative<union_struct_7>(union_variant_4)) {
                union_variant_4 = union_struct_7();
            }
            std::get<3>((*this).union_variant_4).string_value = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> ExpressionBody::target_expr() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CALL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::RANGE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IS_ERROR==(*this).op) {
        if(!std::holds_alternative<union_struct_22>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<18>((*this).union_variant_4).target_expr;
        }
        return std::nullopt;
    }
    bool ExpressionBody::target_expr(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).op) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).op) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).op) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).op) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).op) {
            if(!std::holds_alternative<union_struct_22>(union_variant_4)) {
                union_variant_4 = union_struct_22();
            }
            std::get<18>((*this).union_variant_4).target_expr = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::target_expr(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).op) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).op) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).op) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).op) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).op) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).op) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).op) {
            if(!std::holds_alternative<union_struct_22>(union_variant_4)) {
                union_variant_4 = union_struct_22();
            }
            std::get<18>((*this).union_variant_4).target_expr = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> ExpressionBody::type_ref() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        if(!std::holds_alternative<union_struct_8>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<4>((*this).union_variant_4).type_ref;
        }
        return std::nullopt;
    }
    bool ExpressionBody::type_ref(const TypeRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            if(!std::holds_alternative<union_struct_8>(union_variant_4)) {
                union_variant_4 = union_struct_8();
            }
            std::get<4>((*this).union_variant_4).type_ref = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::type_ref(TypeRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            if(!std::holds_alternative<union_struct_8>(union_variant_4)) {
                union_variant_4 = union_struct_8();
            }
            std::get<4>((*this).union_variant_4).type_ref = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<UnaryOp> ExpressionBody::uop() const {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
        return std::nullopt;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
        if(!std::holds_alternative<union_struct_11>(union_variant_4)) {
            return std::nullopt;
        }
        return std::get<7>((*this).union_variant_4).uop;
        }
        return std::nullopt;
    }
    bool ExpressionBody::uop(const UnaryOp& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_11>(union_variant_4)) {
                union_variant_4 = union_struct_11();
            }
            std::get<7>((*this).union_variant_4).uop = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::uop(UnaryOp&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).op) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).op) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).op) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_11>(union_variant_4)) {
                union_variant_4 = union_struct_11();
            }
            std::get<7>((*this).union_variant_4).uop = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> Size::ref() const {
        if (SizeUnit::UNKNOWN==(*this).unit) {
        return std::nullopt;
        }
        if (SizeUnit::BIT_FIXED==(*this).unit) {
        return std::nullopt;
        }
        if (SizeUnit::BYTE_FIXED==(*this).unit) {
        return std::nullopt;
        }
        if (SizeUnit::ELEMENT_FIXED==(*this).unit) {
        return std::nullopt;
        }
        if (SizeUnit::BIT_DYNAMIC==(*this).unit) {
        if(!std::holds_alternative<union_struct_31>(union_variant_26)) {
            return std::nullopt;
        }
        return std::get<5>((*this).union_variant_26).ref;
        }
        if (SizeUnit::BYTE_DYNAMIC==(*this).unit) {
        if(!std::holds_alternative<union_struct_32>(union_variant_26)) {
            return std::nullopt;
        }
        return std::get<6>((*this).union_variant_26).ref;
        }
        if (SizeUnit::ELEMENT_DYNAMIC==(*this).unit) {
        if(!std::holds_alternative<union_struct_33>(union_variant_26)) {
            return std::nullopt;
        }
        return std::get<7>((*this).union_variant_26).ref;
        }
        return std::nullopt;
    }
    bool Size::ref(const ExpressionRef& v) {
        if (SizeUnit::UNKNOWN==(*this).unit) {
            return false;
        }
        if (SizeUnit::BIT_FIXED==(*this).unit) {
            return false;
        }
        if (SizeUnit::BYTE_FIXED==(*this).unit) {
            return false;
        }
        if (SizeUnit::ELEMENT_FIXED==(*this).unit) {
            return false;
        }
        if (SizeUnit::BIT_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_31>(union_variant_26)) {
                union_variant_26 = union_struct_31();
            }
            std::get<5>((*this).union_variant_26).ref = v;
            return true;
        }
        if (SizeUnit::BYTE_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_32>(union_variant_26)) {
                union_variant_26 = union_struct_32();
            }
            std::get<6>((*this).union_variant_26).ref = v;
            return true;
        }
        if (SizeUnit::ELEMENT_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_33>(union_variant_26)) {
                union_variant_26 = union_struct_33();
            }
            std::get<7>((*this).union_variant_26).ref = v;
            return true;
        }
        return false;
    }
    bool Size::ref(ExpressionRef&& v) {
        if (SizeUnit::UNKNOWN==(*this).unit) {
            return false;
        }
        if (SizeUnit::BIT_FIXED==(*this).unit) {
            return false;
        }
        if (SizeUnit::BYTE_FIXED==(*this).unit) {
            return false;
        }
        if (SizeUnit::ELEMENT_FIXED==(*this).unit) {
            return false;
        }
        if (SizeUnit::BIT_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_31>(union_variant_26)) {
                union_variant_26 = union_struct_31();
            }
            std::get<5>((*this).union_variant_26).ref = std::move(v);
            return true;
        }
        if (SizeUnit::BYTE_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_32>(union_variant_26)) {
                union_variant_26 = union_struct_32();
            }
            std::get<6>((*this).union_variant_26).ref = std::move(v);
            return true;
        }
        if (SizeUnit::ELEMENT_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_33>(union_variant_26)) {
                union_variant_26 = union_struct_33();
            }
            std::get<7>((*this).union_variant_26).ref = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<Varint> Size::size() const {
        if (SizeUnit::UNKNOWN==(*this).unit) {
        return std::nullopt;
        }
        if (SizeUnit::BIT_FIXED==(*this).unit) {
        if(!std::holds_alternative<union_struct_28>(union_variant_26)) {
            return std::nullopt;
        }
        return std::get<2>((*this).union_variant_26).size;
        }
        if (SizeUnit::BYTE_FIXED==(*this).unit) {
        if(!std::holds_alternative<union_struct_29>(union_variant_26)) {
            return std::nullopt;
        }
        return std::get<3>((*this).union_variant_26).size;
        }
        if (SizeUnit::ELEMENT_FIXED==(*this).unit) {
        if(!std::holds_alternative<union_struct_30>(union_variant_26)) {
            return std::nullopt;
        }
        return std::get<4>((*this).union_variant_26).size;
        }
        return std::nullopt;
    }
    bool Size::size(const Varint& v) {
        if (SizeUnit::UNKNOWN==(*this).unit) {
            return false;
        }
        if (SizeUnit::BIT_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_28>(union_variant_26)) {
                union_variant_26 = union_struct_28();
            }
            std::get<2>((*this).union_variant_26).size = v;
            return true;
        }
        if (SizeUnit::BYTE_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_29>(union_variant_26)) {
                union_variant_26 = union_struct_29();
            }
            std::get<3>((*this).union_variant_26).size = v;
            return true;
        }
        if (SizeUnit::ELEMENT_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_30>(union_variant_26)) {
                union_variant_26 = union_struct_30();
            }
            std::get<4>((*this).union_variant_26).size = v;
            return true;
        }
        return false;
    }
    bool Size::size(Varint&& v) {
        if (SizeUnit::UNKNOWN==(*this).unit) {
            return false;
        }
        if (SizeUnit::BIT_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_28>(union_variant_26)) {
                union_variant_26 = union_struct_28();
            }
            std::get<2>((*this).union_variant_26).size = std::move(v);
            return true;
        }
        if (SizeUnit::BYTE_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_29>(union_variant_26)) {
                union_variant_26 = union_struct_29();
            }
            std::get<3>((*this).union_variant_26).size = std::move(v);
            return true;
        }
        if (SizeUnit::ELEMENT_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_30>(union_variant_26)) {
                union_variant_26 = union_struct_30();
            }
            std::get<4>((*this).union_variant_26).size = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> LoopStatement::collection() const {
        if (LoopType::INFINITE==(*this).loop_type) {
        return std::nullopt;
        }
        if (LoopType::WHILE==(*this).loop_type) {
        return std::nullopt;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
        if(!std::holds_alternative<union_struct_38>(union_variant_35)) {
            return std::nullopt;
        }
        return std::get<3>((*this).union_variant_35).collection;
        }
        return std::nullopt;
    }
    bool LoopStatement::collection(const ExpressionRef& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_38>(union_variant_35)) {
                union_variant_35 = union_struct_38();
            }
            std::get<3>((*this).union_variant_35).collection = v;
            return true;
        }
        return false;
    }
    bool LoopStatement::collection(ExpressionRef&& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_38>(union_variant_35)) {
                union_variant_35 = union_struct_38();
            }
            std::get<3>((*this).union_variant_35).collection = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> LoopStatement::condition() const {
        if (LoopType::INFINITE==(*this).loop_type) {
        return std::nullopt;
        }
        if (LoopType::WHILE==(*this).loop_type) {
        if(!std::holds_alternative<union_struct_37>(union_variant_35)) {
            return std::nullopt;
        }
        return std::get<2>((*this).union_variant_35).condition;
        }
        return std::nullopt;
    }
    bool LoopStatement::condition(const ExpressionRef& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_37>(union_variant_35)) {
                union_variant_35 = union_struct_37();
            }
            std::get<2>((*this).union_variant_35).condition = v;
            return true;
        }
        return false;
    }
    bool LoopStatement::condition(ExpressionRef&& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_37>(union_variant_35)) {
                union_variant_35 = union_struct_37();
            }
            std::get<2>((*this).union_variant_35).condition = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<IdentifierRef> LoopStatement::item_var() const {
        if (LoopType::INFINITE==(*this).loop_type) {
        return std::nullopt;
        }
        if (LoopType::WHILE==(*this).loop_type) {
        return std::nullopt;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
        if(!std::holds_alternative<union_struct_38>(union_variant_35)) {
            return std::nullopt;
        }
        return std::get<3>((*this).union_variant_35).item_var;
        }
        return std::nullopt;
    }
    bool LoopStatement::item_var(const IdentifierRef& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_38>(union_variant_35)) {
                union_variant_35 = union_struct_38();
            }
            std::get<3>((*this).union_variant_35).item_var = v;
            return true;
        }
        return false;
    }
    bool LoopStatement::item_var(IdentifierRef&& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_38>(union_variant_35)) {
                union_variant_35 = union_struct_38();
            }
            std::get<3>((*this).union_variant_35).item_var = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<IdentifierRef> StatementBody::alias() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_71>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<28>((*this).union_variant_43).alias;
        }
        return std::nullopt;
    }
    bool StatementBody::alias(const IdentifierRef& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_71>(union_variant_43)) {
                union_variant_43 = union_struct_71();
            }
            std::get<28>((*this).union_variant_43).alias = v;
            return true;
        }
        return false;
    }
    bool StatementBody::alias(IdentifierRef&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_71>(union_variant_43)) {
                union_variant_43 = union_struct_71();
            }
            std::get<28>((*this).union_variant_43).alias = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<AssertDesc> StatementBody::assert_desc() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_48>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<5>((*this).union_variant_43).assert_desc;
        }
        return std::nullopt;
    }
    bool StatementBody::assert_desc(const AssertDesc& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_48>(union_variant_43)) {
                union_variant_43 = union_struct_48();
            }
            std::get<5>((*this).union_variant_43).assert_desc = v;
            return true;
        }
        return false;
    }
    bool StatementBody::assert_desc(AssertDesc&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_48>(union_variant_43)) {
                union_variant_43 = union_struct_48();
            }
            std::get<5>((*this).union_variant_43).assert_desc = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<BitFieldDecl> StatementBody::bit_field_decl() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_68>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<25>((*this).union_variant_43).bit_field_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::bit_field_decl(const BitFieldDecl& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_68>(union_variant_43)) {
                union_variant_43 = union_struct_68();
            }
            std::get<25>((*this).union_variant_43).bit_field_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::bit_field_decl(BitFieldDecl&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_68>(union_variant_43)) {
                union_variant_43 = union_struct_68();
            }
            std::get<25>((*this).union_variant_43).bit_field_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<Block> StatementBody::block() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_44>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<1>((*this).union_variant_43).block;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_66>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<23>((*this).union_variant_43).block;
        }
        return std::nullopt;
    }
    bool StatementBody::block(const Block& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_44>(union_variant_43)) {
                union_variant_43 = union_struct_44();
            }
            std::get<1>((*this).union_variant_43).block = v;
            return true;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_66>(union_variant_43)) {
                union_variant_43 = union_struct_66();
            }
            std::get<23>((*this).union_variant_43).block = v;
            return true;
        }
        return false;
    }
    bool StatementBody::block(Block&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_44>(union_variant_43)) {
                union_variant_43 = union_struct_44();
            }
            std::get<1>((*this).union_variant_43).block = std::move(v);
            return true;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_66>(union_variant_43)) {
                union_variant_43 = union_struct_66();
            }
            std::get<23>((*this).union_variant_43).block = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<LoopFlowControl> StatementBody::break_() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_56>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<13>((*this).union_variant_43).break_;
        }
        return std::nullopt;
    }
    bool StatementBody::break_(const LoopFlowControl& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_56>(union_variant_43)) {
                union_variant_43 = union_struct_56();
            }
            std::get<13>((*this).union_variant_43).break_ = v;
            return true;
        }
        return false;
    }
    bool StatementBody::break_(LoopFlowControl&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_56>(union_variant_43)) {
                union_variant_43 = union_struct_56();
            }
            std::get<13>((*this).union_variant_43).break_ = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<LoopFlowControl> StatementBody::continue_() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_57>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<14>((*this).union_variant_43).continue_;
        }
        return std::nullopt;
    }
    bool StatementBody::continue_(const LoopFlowControl& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_57>(union_variant_43)) {
                union_variant_43 = union_struct_57();
            }
            std::get<14>((*this).union_variant_43).continue_ = v;
            return true;
        }
        return false;
    }
    bool StatementBody::continue_(LoopFlowControl&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_57>(union_variant_43)) {
                union_variant_43 = union_struct_57();
            }
            std::get<14>((*this).union_variant_43).continue_ = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<EnumDecl> StatementBody::enum_decl() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_61>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<18>((*this).union_variant_43).enum_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::enum_decl(const EnumDecl& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_61>(union_variant_43)) {
                union_variant_43 = union_struct_61();
            }
            std::get<18>((*this).union_variant_43).enum_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::enum_decl(EnumDecl&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_61>(union_variant_43)) {
                union_variant_43 = union_struct_61();
            }
            std::get<18>((*this).union_variant_43).enum_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<EnumMemberDecl> StatementBody::enum_member_decl() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_62>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<19>((*this).union_variant_43).enum_member_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::enum_member_decl(const EnumMemberDecl& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_62>(union_variant_43)) {
                union_variant_43 = union_struct_62();
            }
            std::get<19>((*this).union_variant_43).enum_member_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::enum_member_decl(EnumMemberDecl&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_62>(union_variant_43)) {
                union_variant_43 = union_struct_62();
            }
            std::get<19>((*this).union_variant_43).enum_member_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ErrorReport> StatementBody::error_report() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_73>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<30>((*this).union_variant_43).error_report;
        }
        return std::nullopt;
    }
    bool StatementBody::error_report(const ErrorReport& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_73>(union_variant_43)) {
                union_variant_43 = union_struct_73();
            }
            std::get<30>((*this).union_variant_43).error_report = v;
            return true;
        }
        return false;
    }
    bool StatementBody::error_report(ErrorReport&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_73>(union_variant_43)) {
                union_variant_43 = union_struct_73();
            }
            std::get<30>((*this).union_variant_43).error_report = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> StatementBody::expression() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::EXPRESSION==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_74>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<31>((*this).union_variant_43).expression;
        }
        return std::nullopt;
    }
    bool StatementBody::expression(const ExpressionRef& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::EXPRESSION==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_74>(union_variant_43)) {
                union_variant_43 = union_struct_74();
            }
            std::get<31>((*this).union_variant_43).expression = v;
            return true;
        }
        return false;
    }
    bool StatementBody::expression(ExpressionRef&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::EXPRESSION==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_74>(union_variant_43)) {
                union_variant_43 = union_struct_74();
            }
            std::get<31>((*this).union_variant_43).expression = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<FieldDecl> StatementBody::field_decl() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_60>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<17>((*this).union_variant_43).field_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::field_decl(const FieldDecl& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_60>(union_variant_43)) {
                union_variant_43 = union_struct_60();
            }
            std::get<17>((*this).union_variant_43).field_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::field_decl(FieldDecl&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_60>(union_variant_43)) {
                union_variant_43 = union_struct_60();
            }
            std::get<17>((*this).union_variant_43).field_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<FunctionDecl> StatementBody::func_decl() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_58>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<15>((*this).union_variant_43).func_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::func_decl(const FunctionDecl& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_58>(union_variant_43)) {
                union_variant_43 = union_struct_58();
            }
            std::get<15>((*this).union_variant_43).func_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::func_decl(FunctionDecl&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_58>(union_variant_43)) {
                union_variant_43 = union_struct_58();
            }
            std::get<15>((*this).union_variant_43).func_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<IfStatement> StatementBody::if_statement() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_52>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<9>((*this).union_variant_43).if_statement;
        }
        return std::nullopt;
    }
    bool StatementBody::if_statement(const IfStatement& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_52>(union_variant_43)) {
                union_variant_43 = union_struct_52();
            }
            std::get<9>((*this).union_variant_43).if_statement = v;
            return true;
        }
        return false;
    }
    bool StatementBody::if_statement(IfStatement&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_52>(union_variant_43)) {
                union_variant_43 = union_struct_52();
            }
            std::get<9>((*this).union_variant_43).if_statement = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<LoopStatement> StatementBody::loop() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_53>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<10>((*this).union_variant_43).loop;
        }
        return std::nullopt;
    }
    bool StatementBody::loop(const LoopStatement& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_53>(union_variant_43)) {
                union_variant_43 = union_struct_53();
            }
            std::get<10>((*this).union_variant_43).loop = v;
            return true;
        }
        return false;
    }
    bool StatementBody::loop(LoopStatement&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_53>(union_variant_43)) {
                union_variant_43 = union_struct_53();
            }
            std::get<10>((*this).union_variant_43).loop = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<LoweredStatements> StatementBody::lowered_statements() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::EXPRESSION==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOWERED_STATEMENTS==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_75>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<32>((*this).union_variant_43).lowered_statements;
        }
        return std::nullopt;
    }
    bool StatementBody::lowered_statements(const LoweredStatements& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::EXPRESSION==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOWERED_STATEMENTS==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_75>(union_variant_43)) {
                union_variant_43 = union_struct_75();
            }
            std::get<32>((*this).union_variant_43).lowered_statements = v;
            return true;
        }
        return false;
    }
    bool StatementBody::lowered_statements(LoweredStatements&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::EXPRESSION==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOWERED_STATEMENTS==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_75>(union_variant_43)) {
                union_variant_43 = union_struct_75();
            }
            std::get<32>((*this).union_variant_43).lowered_statements = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<MatchBranch> StatementBody::match_branch() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_55>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<12>((*this).union_variant_43).match_branch;
        }
        return std::nullopt;
    }
    bool StatementBody::match_branch(const MatchBranch& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_55>(union_variant_43)) {
                union_variant_43 = union_struct_55();
            }
            std::get<12>((*this).union_variant_43).match_branch = v;
            return true;
        }
        return false;
    }
    bool StatementBody::match_branch(MatchBranch&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_55>(union_variant_43)) {
                union_variant_43 = union_struct_55();
            }
            std::get<12>((*this).union_variant_43).match_branch = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<MatchStatement> StatementBody::match_statement() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_54>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<11>((*this).union_variant_43).match_statement;
        }
        return std::nullopt;
    }
    bool StatementBody::match_statement(const MatchStatement& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_54>(union_variant_43)) {
                union_variant_43 = union_struct_54();
            }
            std::get<11>((*this).union_variant_43).match_statement = v;
            return true;
        }
        return false;
    }
    bool StatementBody::match_statement(MatchStatement&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_54>(union_variant_43)) {
                union_variant_43 = union_struct_54();
            }
            std::get<11>((*this).union_variant_43).match_statement = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<Metadata> StatementBody::metadata() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_70>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<27>((*this).union_variant_43).metadata;
        }
        return std::nullopt;
    }
    bool StatementBody::metadata(const Metadata& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_70>(union_variant_43)) {
                union_variant_43 = union_struct_70();
            }
            std::get<27>((*this).union_variant_43).metadata = v;
            return true;
        }
        return false;
    }
    bool StatementBody::metadata(Metadata&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_70>(union_variant_43)) {
                union_variant_43 = union_struct_70();
            }
            std::get<27>((*this).union_variant_43).metadata = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<IdentifierRef> StatementBody::module_name() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_71>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<28>((*this).union_variant_43).module_name;
        }
        return std::nullopt;
    }
    bool StatementBody::module_name(const IdentifierRef& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_71>(union_variant_43)) {
                union_variant_43 = union_struct_71();
            }
            std::get<28>((*this).union_variant_43).module_name = v;
            return true;
        }
        return false;
    }
    bool StatementBody::module_name(IdentifierRef&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_71>(union_variant_43)) {
                union_variant_43 = union_struct_71();
            }
            std::get<28>((*this).union_variant_43).module_name = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> StatementBody::offset() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_51>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<8>((*this).union_variant_43).offset;
        }
        return std::nullopt;
    }
    bool StatementBody::offset(const ExpressionRef& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_51>(union_variant_43)) {
                union_variant_43 = union_struct_51();
            }
            std::get<8>((*this).union_variant_43).offset = v;
            return true;
        }
        return false;
    }
    bool StatementBody::offset(ExpressionRef&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_51>(union_variant_43)) {
                union_variant_43 = union_struct_51();
            }
            std::get<8>((*this).union_variant_43).offset = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<std::vector<PhiParam>> StatementBody::params() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_72>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<29>((*this).union_variant_43).params;
        }
        return std::nullopt;
    }
    bool StatementBody::params(const std::vector<PhiParam>& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_72>(union_variant_43)) {
                union_variant_43 = union_struct_72();
            }
            std::get<29>((*this).union_variant_43).params = v;
            return true;
        }
        return false;
    }
    bool StatementBody::params(std::vector<PhiParam>&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_72>(union_variant_43)) {
                union_variant_43 = union_struct_72();
            }
            std::get<29>((*this).union_variant_43).params = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<Varint> StatementBody::params_len() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_72>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<29>((*this).union_variant_43).params_len;
        }
        return std::nullopt;
    }
    bool StatementBody::params_len(const Varint& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_72>(union_variant_43)) {
                union_variant_43 = union_struct_72();
            }
            std::get<29>((*this).union_variant_43).params_len = v;
            return true;
        }
        return false;
    }
    bool StatementBody::params_len(Varint&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_72>(union_variant_43)) {
                union_variant_43 = union_struct_72();
            }
            std::get<29>((*this).union_variant_43).params_len = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<StatementRef> StatementBody::previous_assignment() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_45>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<2>((*this).union_variant_43).previous_assignment;
        }
        return std::nullopt;
    }
    bool StatementBody::previous_assignment(const StatementRef& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_45>(union_variant_43)) {
                union_variant_43 = union_struct_45();
            }
            std::get<2>((*this).union_variant_43).previous_assignment = v;
            return true;
        }
        return false;
    }
    bool StatementBody::previous_assignment(StatementRef&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_45>(union_variant_43)) {
                union_variant_43 = union_struct_45();
            }
            std::get<2>((*this).union_variant_43).previous_assignment = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<PropertyDecl> StatementBody::property_decl() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_69>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<26>((*this).union_variant_43).property_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::property_decl(const PropertyDecl& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_69>(union_variant_43)) {
                union_variant_43 = union_struct_69();
            }
            std::get<26>((*this).union_variant_43).property_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::property_decl(PropertyDecl&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_69>(union_variant_43)) {
                union_variant_43 = union_struct_69();
            }
            std::get<26>((*this).union_variant_43).property_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<IOData> StatementBody::read_data() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_49>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<6>((*this).union_variant_43).read_data;
        }
        return std::nullopt;
    }
    bool StatementBody::read_data(const IOData& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_49>(union_variant_43)) {
                union_variant_43 = union_struct_49();
            }
            std::get<6>((*this).union_variant_43).read_data = v;
            return true;
        }
        return false;
    }
    bool StatementBody::read_data(IOData&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_49>(union_variant_43)) {
                union_variant_43 = union_struct_49();
            }
            std::get<6>((*this).union_variant_43).read_data = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<StateDecl> StatementBody::state_decl() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_67>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<24>((*this).union_variant_43).state_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::state_decl(const StateDecl& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_67>(union_variant_43)) {
                union_variant_43 = union_struct_67();
            }
            std::get<24>((*this).union_variant_43).state_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::state_decl(StateDecl&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_67>(union_variant_43)) {
                union_variant_43 = union_struct_67();
            }
            std::get<24>((*this).union_variant_43).state_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<StreamType> StatementBody::stream_type() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_51>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<8>((*this).union_variant_43).stream_type;
        }
        return std::nullopt;
    }
    bool StatementBody::stream_type(const StreamType& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_51>(union_variant_43)) {
                union_variant_43 = union_struct_51();
            }
            std::get<8>((*this).union_variant_43).stream_type = v;
            return true;
        }
        return false;
    }
    bool StatementBody::stream_type(StreamType&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_51>(union_variant_43)) {
                union_variant_43 = union_struct_51();
            }
            std::get<8>((*this).union_variant_43).stream_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<StructDecl> StatementBody::struct_decl() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_63>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<20>((*this).union_variant_43).struct_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::struct_decl(const StructDecl& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_63>(union_variant_43)) {
                union_variant_43 = union_struct_63();
            }
            std::get<20>((*this).union_variant_43).struct_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::struct_decl(StructDecl&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_63>(union_variant_43)) {
                union_variant_43 = union_struct_63();
            }
            std::get<20>((*this).union_variant_43).struct_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> StatementBody::target() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_45>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<2>((*this).union_variant_43).target;
        }
        return std::nullopt;
    }
    bool StatementBody::target(const ExpressionRef& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_45>(union_variant_43)) {
                union_variant_43 = union_struct_45();
            }
            std::get<2>((*this).union_variant_43).target = v;
            return true;
        }
        return false;
    }
    bool StatementBody::target(ExpressionRef&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_45>(union_variant_43)) {
                union_variant_43 = union_struct_45();
            }
            std::get<2>((*this).union_variant_43).target = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> StatementBody::target_var() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_72>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<29>((*this).union_variant_43).target_var;
        }
        return std::nullopt;
    }
    bool StatementBody::target_var(const ExpressionRef& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_72>(union_variant_43)) {
                union_variant_43 = union_struct_72();
            }
            std::get<29>((*this).union_variant_43).target_var = v;
            return true;
        }
        return false;
    }
    bool StatementBody::target_var(ExpressionRef&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STATE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_72>(union_variant_43)) {
                union_variant_43 = union_struct_72();
            }
            std::get<29>((*this).union_variant_43).target_var = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<UnionDecl> StatementBody::union_decl() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_64>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<21>((*this).union_variant_43).union_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::union_decl(const UnionDecl& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_64>(union_variant_43)) {
                union_variant_43 = union_struct_64();
            }
            std::get<21>((*this).union_variant_43).union_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::union_decl(UnionDecl&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_64>(union_variant_43)) {
                union_variant_43 = union_struct_64();
            }
            std::get<21>((*this).union_variant_43).union_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<UnionMemberDecl> StatementBody::union_member_decl() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_65>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<22>((*this).union_variant_43).union_member_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::union_member_decl(const UnionMemberDecl& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_65>(union_variant_43)) {
                union_variant_43 = union_struct_65();
            }
            std::get<22>((*this).union_variant_43).union_member_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::union_member_decl(UnionMemberDecl&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_65>(union_variant_43)) {
                union_variant_43 = union_struct_65();
            }
            std::get<22>((*this).union_variant_43).union_member_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<ExpressionRef> StatementBody::value() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_45>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<2>((*this).union_variant_43).value;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_46>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<3>((*this).union_variant_43).value;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_47>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<4>((*this).union_variant_43).value;
        }
        return std::nullopt;
    }
    bool StatementBody::value(const ExpressionRef& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_45>(union_variant_43)) {
                union_variant_43 = union_struct_45();
            }
            std::get<2>((*this).union_variant_43).value = v;
            return true;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_46>(union_variant_43)) {
                union_variant_43 = union_struct_46();
            }
            std::get<3>((*this).union_variant_43).value = v;
            return true;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_47>(union_variant_43)) {
                union_variant_43 = union_struct_47();
            }
            std::get<4>((*this).union_variant_43).value = v;
            return true;
        }
        return false;
    }
    bool StatementBody::value(ExpressionRef&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_45>(union_variant_43)) {
                union_variant_43 = union_struct_45();
            }
            std::get<2>((*this).union_variant_43).value = std::move(v);
            return true;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_46>(union_variant_43)) {
                union_variant_43 = union_struct_46();
            }
            std::get<3>((*this).union_variant_43).value = std::move(v);
            return true;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_47>(union_variant_43)) {
                union_variant_43 = union_struct_47();
            }
            std::get<4>((*this).union_variant_43).value = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<VariableDecl> StatementBody::var_decl() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_59>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<16>((*this).union_variant_43).var_decl;
        }
        return std::nullopt;
    }
    bool StatementBody::var_decl(const VariableDecl& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_59>(union_variant_43)) {
                union_variant_43 = union_struct_59();
            }
            std::get<16>((*this).union_variant_43).var_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::var_decl(VariableDecl&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_59>(union_variant_43)) {
                union_variant_43 = union_struct_59();
            }
            std::get<16>((*this).union_variant_43).var_decl = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<IOData> StatementBody::write_data() const {
        if (StatementOp::BLOCK==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
        return std::nullopt;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
        if(!std::holds_alternative<union_struct_50>(union_variant_43)) {
            return std::nullopt;
        }
        return std::get<7>((*this).union_variant_43).write_data;
        }
        return std::nullopt;
    }
    bool StatementBody::write_data(const IOData& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_50>(union_variant_43)) {
                union_variant_43 = union_struct_50();
            }
            std::get<7>((*this).union_variant_43).write_data = v;
            return true;
        }
        return false;
    }
    bool StatementBody::write_data(IOData&& v) {
        if (StatementOp::BLOCK==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).statement_kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_50>(union_variant_43)) {
                union_variant_43 = union_struct_50();
            }
            std::get<7>((*this).union_variant_43).write_data = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> TypeBody::base_type() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ENUM==(*this).kind) {
        if(!std::holds_alternative<union_struct_86>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<9>((*this).union_variant_77).base_type;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::PTR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RANGE==(*this).kind) {
        if(!std::holds_alternative<union_struct_91>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<14>((*this).union_variant_77).base_type;
        }
        return std::nullopt;
    }
    bool TypeBody::base_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_86>(union_variant_77)) {
                union_variant_77 = union_struct_86();
            }
            std::get<9>((*this).union_variant_77).base_type = v;
            return true;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            return false;
        }
        if (TypeKind::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_91>(union_variant_77)) {
                union_variant_77 = union_struct_91();
            }
            std::get<14>((*this).union_variant_77).base_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::base_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_86>(union_variant_77)) {
                union_variant_77 = union_struct_86();
            }
            std::get<9>((*this).union_variant_77).base_type = std::move(v);
            return true;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            return false;
        }
        if (TypeKind::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_91>(union_variant_77)) {
                union_variant_77 = union_struct_91();
            }
            std::get<14>((*this).union_variant_77).base_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> TypeBody::common_type() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        if(!std::holds_alternative<union_struct_87>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<10>((*this).union_variant_77).common_type;
        }
        return std::nullopt;
    }
    bool TypeBody::common_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_87>(union_variant_77)) {
                union_variant_77 = union_struct_87();
            }
            std::get<10>((*this).union_variant_77).common_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::common_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_87>(union_variant_77)) {
                union_variant_77 = union_struct_87();
            }
            std::get<10>((*this).union_variant_77).common_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> TypeBody::element_type() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        if(!std::holds_alternative<union_struct_82>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<5>((*this).union_variant_77).element_type;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        if(!std::holds_alternative<union_struct_83>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<6>((*this).union_variant_77).element_type;
        }
        return std::nullopt;
    }
    bool TypeBody::element_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_82>(union_variant_77)) {
                union_variant_77 = union_struct_82();
            }
            std::get<5>((*this).union_variant_77).element_type = v;
            return true;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            if(!std::holds_alternative<union_struct_83>(union_variant_77)) {
                union_variant_77 = union_struct_83();
            }
            std::get<6>((*this).union_variant_77).element_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::element_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_82>(union_variant_77)) {
                union_variant_77 = union_struct_82();
            }
            std::get<5>((*this).union_variant_77).element_type = std::move(v);
            return true;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            if(!std::holds_alternative<union_struct_83>(union_variant_77)) {
                union_variant_77 = union_struct_83();
            }
            std::get<6>((*this).union_variant_77).element_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<StatementRef> TypeBody::id() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        if(!std::holds_alternative<union_struct_84>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<7>((*this).union_variant_77).id;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        if(!std::holds_alternative<union_struct_85>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<8>((*this).union_variant_77).id;
        }
        if (TypeKind::ENUM==(*this).kind) {
        if(!std::holds_alternative<union_struct_86>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<9>((*this).union_variant_77).id;
        }
        return std::nullopt;
    }
    bool TypeBody::id(const StatementRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_84>(union_variant_77)) {
                union_variant_77 = union_struct_84();
            }
            std::get<7>((*this).union_variant_77).id = v;
            return true;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_85>(union_variant_77)) {
                union_variant_77 = union_struct_85();
            }
            std::get<8>((*this).union_variant_77).id = v;
            return true;
        }
        if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_86>(union_variant_77)) {
                union_variant_77 = union_struct_86();
            }
            std::get<9>((*this).union_variant_77).id = v;
            return true;
        }
        return false;
    }
    bool TypeBody::id(StatementRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_84>(union_variant_77)) {
                union_variant_77 = union_struct_84();
            }
            std::get<7>((*this).union_variant_77).id = std::move(v);
            return true;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_85>(union_variant_77)) {
                union_variant_77 = union_struct_85();
            }
            std::get<8>((*this).union_variant_77).id = std::move(v);
            return true;
        }
        if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_86>(union_variant_77)) {
                union_variant_77 = union_struct_86();
            }
            std::get<9>((*this).union_variant_77).id = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> TypeBody::inner_type() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
        if(!std::holds_alternative<union_struct_89>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<12>((*this).union_variant_77).inner_type;
        }
        return std::nullopt;
    }
    bool TypeBody::inner_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_89>(union_variant_77)) {
                union_variant_77 = union_struct_89();
            }
            std::get<12>((*this).union_variant_77).inner_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::inner_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_89>(union_variant_77)) {
                union_variant_77 = union_struct_89();
            }
            std::get<12>((*this).union_variant_77).inner_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<Varint> TypeBody::length() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        if(!std::holds_alternative<union_struct_82>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<5>((*this).union_variant_77).length;
        }
        return std::nullopt;
    }
    bool TypeBody::length(const Varint& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_82>(union_variant_77)) {
                union_variant_77 = union_struct_82();
            }
            std::get<5>((*this).union_variant_77).length = v;
            return true;
        }
        return false;
    }
    bool TypeBody::length(Varint&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_82>(union_variant_77)) {
                union_variant_77 = union_struct_82();
            }
            std::get<5>((*this).union_variant_77).length = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<Types> TypeBody::members() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        if(!std::holds_alternative<union_struct_87>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<10>((*this).union_variant_77).members;
        }
        return std::nullopt;
    }
    bool TypeBody::members(const Types& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_87>(union_variant_77)) {
                union_variant_77 = union_struct_87();
            }
            std::get<10>((*this).union_variant_77).members = v;
            return true;
        }
        return false;
    }
    bool TypeBody::members(Types&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_87>(union_variant_77)) {
                union_variant_77 = union_struct_87();
            }
            std::get<10>((*this).union_variant_77).members = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<Types> TypeBody::params() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::PTR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RANGE==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FUNCTION==(*this).kind) {
        if(!std::holds_alternative<union_struct_92>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<15>((*this).union_variant_77).params;
        }
        return std::nullopt;
    }
    bool TypeBody::params(const Types& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            return false;
        }
        if (TypeKind::RANGE==(*this).kind) {
            return false;
        }
        if (TypeKind::FUNCTION==(*this).kind) {
            if(!std::holds_alternative<union_struct_92>(union_variant_77)) {
                union_variant_77 = union_struct_92();
            }
            std::get<15>((*this).union_variant_77).params = v;
            return true;
        }
        return false;
    }
    bool TypeBody::params(Types&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            return false;
        }
        if (TypeKind::RANGE==(*this).kind) {
            return false;
        }
        if (TypeKind::FUNCTION==(*this).kind) {
            if(!std::holds_alternative<union_struct_92>(union_variant_77)) {
                union_variant_77 = union_struct_92();
            }
            std::get<15>((*this).union_variant_77).params = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> TypeBody::pointee_type() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::PTR==(*this).kind) {
        if(!std::holds_alternative<union_struct_90>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<13>((*this).union_variant_77).pointee_type;
        }
        return std::nullopt;
    }
    bool TypeBody::pointee_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            if(!std::holds_alternative<union_struct_90>(union_variant_77)) {
                union_variant_77 = union_struct_90();
            }
            std::get<13>((*this).union_variant_77).pointee_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::pointee_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            if(!std::holds_alternative<union_struct_90>(union_variant_77)) {
                union_variant_77 = union_struct_90();
            }
            std::get<13>((*this).union_variant_77).pointee_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> TypeBody::property_type() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
        if(!std::holds_alternative<union_struct_88>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<11>((*this).union_variant_77).property_type;
        }
        return std::nullopt;
    }
    bool TypeBody::property_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_88>(union_variant_77)) {
                union_variant_77 = union_struct_88();
            }
            std::get<11>((*this).union_variant_77).property_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::property_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_88>(union_variant_77)) {
                union_variant_77 = union_struct_88();
            }
            std::get<11>((*this).union_variant_77).property_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<TypeRef> TypeBody::return_type() const {
        if (TypeKind::INT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::UINT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::PTR==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::RANGE==(*this).kind) {
        return std::nullopt;
        }
        if (TypeKind::FUNCTION==(*this).kind) {
        if(!std::holds_alternative<union_struct_92>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<15>((*this).union_variant_77).return_type;
        }
        return std::nullopt;
    }
    bool TypeBody::return_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            return false;
        }
        if (TypeKind::RANGE==(*this).kind) {
            return false;
        }
        if (TypeKind::FUNCTION==(*this).kind) {
            if(!std::holds_alternative<union_struct_92>(union_variant_77)) {
                union_variant_77 = union_struct_92();
            }
            std::get<15>((*this).union_variant_77).return_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::return_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            return false;
        }
        if (TypeKind::RANGE==(*this).kind) {
            return false;
        }
        if (TypeKind::FUNCTION==(*this).kind) {
            if(!std::holds_alternative<union_struct_92>(union_variant_77)) {
                union_variant_77 = union_struct_92();
            }
            std::get<15>((*this).union_variant_77).return_type = std::move(v);
            return true;
        }
        return false;
    }
    std::optional<std::uint8_t> TypeBody::size() const {
        if (TypeKind::INT==(*this).kind) {
        if(!std::holds_alternative<union_struct_78>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<1>((*this).union_variant_77).size;
        }
        if (TypeKind::UINT==(*this).kind) {
        if(!std::holds_alternative<union_struct_79>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<2>((*this).union_variant_77).size;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        if(!std::holds_alternative<union_struct_80>(union_variant_77)) {
            return std::nullopt;
        }
        return std::get<3>((*this).union_variant_77).size;
        }
        return std::nullopt;
    }
    bool TypeBody::size(const std::uint8_t& v) {
        if (TypeKind::INT==(*this).kind) {
            if(!std::holds_alternative<union_struct_78>(union_variant_77)) {
                union_variant_77 = union_struct_78();
            }
            std::get<1>((*this).union_variant_77).size = v;
            return true;
        }
        if (TypeKind::UINT==(*this).kind) {
            if(!std::holds_alternative<union_struct_79>(union_variant_77)) {
                union_variant_77 = union_struct_79();
            }
            std::get<2>((*this).union_variant_77).size = v;
            return true;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            if(!std::holds_alternative<union_struct_80>(union_variant_77)) {
                union_variant_77 = union_struct_80();
            }
            std::get<3>((*this).union_variant_77).size = v;
            return true;
        }
        return false;
    }
    bool TypeBody::size(std::uint8_t&& v) {
        if (TypeKind::INT==(*this).kind) {
            if(!std::holds_alternative<union_struct_78>(union_variant_77)) {
                union_variant_77 = union_struct_78();
            }
            std::get<1>((*this).union_variant_77).size = std::move(v);
            return true;
        }
        if (TypeKind::UINT==(*this).kind) {
            if(!std::holds_alternative<union_struct_79>(union_variant_77)) {
                union_variant_77 = union_struct_79();
            }
            std::get<2>((*this).union_variant_77).size = std::move(v);
            return true;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            if(!std::holds_alternative<union_struct_80>(union_variant_77)) {
                union_variant_77 = union_struct_80();
            }
            std::get<3>((*this).union_variant_77).size = std::move(v);
            return true;
        }
        return false;
    }
    //sort DEBUG: struct Varint code
    //sort DEBUG: struct StatementRef code
    //sort DEBUG: struct EndianExpr code
    //sort DEBUG: struct String code
    //sort DEBUG: struct IdentifierRef code
    //sort DEBUG: struct TypeRef code
    //sort DEBUG: struct ExpressionRef code
    //sort DEBUG: struct StringRef code
    //sort DEBUG: struct LoweredStatement code
    //sort DEBUG: struct LoweredExpression code
    //sort DEBUG: struct LoopFlowControl code
    //sort DEBUG: struct PhiParam code
    //sort DEBUG: struct AnyRef code
    //sort DEBUG: struct Expressions code
    //sort DEBUG: struct CallDesc code
    //sort DEBUG: struct ExpressionBody code
    //sort DEBUG: struct Expression code
    //sort DEBUG: struct IfStatement code
    //sort DEBUG: struct Block code
    //sort DEBUG: struct MatchStatement code
    //sort DEBUG: struct StructDecl code
    //sort DEBUG: struct StateDecl code
    //sort DEBUG: struct Metadata code
    //sort DEBUG: struct LoweredStatements code
    //sort DEBUG: struct LoweredExpressions code
    //sort DEBUG: struct AssertDesc code
    //sort DEBUG: struct Size code
    //sort DEBUG: struct IOData code
    //sort DEBUG: struct LoopStatement code
    //sort DEBUG: struct MatchBranch code
    //sort DEBUG: struct FunctionDecl code
    //sort DEBUG: struct VariableDecl code
    //sort DEBUG: struct FieldDecl code
    //sort DEBUG: struct EnumDecl code
    //sort DEBUG: struct EnumMemberDecl code
    //sort DEBUG: struct UnionDecl code
    //sort DEBUG: struct UnionMemberDecl code
    //sort DEBUG: struct BitFieldDecl code
    //sort DEBUG: struct PropertyDecl code
    //sort DEBUG: struct ErrorReport code
    //sort DEBUG: struct StatementBody code
    //sort DEBUG: struct Statement code
    //sort DEBUG: struct Types code
    //sort DEBUG: struct TypeBody code
    //sort DEBUG: struct Type code
    //sort DEBUG: struct Loc code
    //sort DEBUG: struct Identifier code
    //sort DEBUG: struct StringLiteral code
    //sort DEBUG: struct DebugInfo code
    //sort DEBUG: struct ExtendedBinaryModule code
    ::futils::error::Error<> Varint::encode(::futils::binary::writer& w) const {
        if((*this).prefix()==0) {
            std::uint8_t tmp93 = 0;
            tmp93 = (*this).value();
            tmp93 |= std::uint8_t(0)<<6;
            if (!::futils::binary::write_num(w,tmp93,true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed",::futils::error::Category::lib);
            }
        }
        else 
        if((*this).prefix()==1) {
            std::uint16_t tmp93 = 0;
            tmp93 = (*this).value();
            tmp93 |= std::uint16_t(1)<<14;
            if (!::futils::binary::write_num(w,tmp93,true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed",::futils::error::Category::lib);
            }
        }
        else 
        if((*this).prefix()==2) {
            std::uint32_t tmp93 = 0;
            tmp93 = (*this).value();
            tmp93 |= std::uint32_t(2)<<30;
            if (!::futils::binary::write_num(w,tmp93,true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed",::futils::error::Category::lib);
            }
        }
        else 
        if((*this).prefix()==3) {
            std::uint64_t tmp93 = 0;
            tmp93 = (*this).value();
            tmp93 |= std::uint64_t(3)<<62;
            if (!::futils::binary::write_num(w,tmp93,true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed",::futils::error::Category::lib);
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Varint::decode(::futils::binary::reader& r) {
        if(!r.load_stream(1)) {
            return ::futils::error::Error<>("decode: Varint::value: read bit field failed",::futils::error::Category::lib);
        }
        std::uint8_t tmp94 = (r.top() >> 6 ) & 0x3;
        (*this).prefix(tmp94);
        if((*this).prefix()==0) {
            std::uint8_t tmp95 = 0;
            if(!::futils::binary::read_num(r,tmp95,true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed",::futils::error::Category::lib);
            }
            tmp95 &= ~(std::uint8_t(0x3)<<6);
            (*this).value(tmp95);
        }
        else 
        if((*this).prefix()==1) {
            std::uint16_t tmp96 = 0;
            if(!::futils::binary::read_num(r,tmp96,true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed",::futils::error::Category::lib);
            }
            tmp96 &= ~(std::uint16_t(0x3)<<14);
            (*this).value(tmp96);
        }
        else 
        if((*this).prefix()==2) {
            std::uint32_t tmp97 = 0;
            if(!::futils::binary::read_num(r,tmp97,true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed",::futils::error::Category::lib);
            }
            tmp97 &= ~(std::uint32_t(0x3)<<30);
            (*this).value(tmp97);
        }
        else 
        if((*this).prefix()==3) {
            std::uint64_t tmp98 = 0;
            if(!::futils::binary::read_num(r,tmp98,true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed",::futils::error::Category::lib);
            }
            tmp98 &= ~(std::uint64_t(0x3)<<62);
            (*this).value(tmp98);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StatementRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StatementRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> EndianExpr::encode(::futils::binary::writer& w) const {
        if (!::futils::binary::write_num(w,flags_2_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: EndianExpr::reserved: write bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).dynamic_ref.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> EndianExpr::decode(::futils::binary::reader& r) {
        if (!::futils::binary::read_num(r,flags_2_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: EndianExpr::reserved: read bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).dynamic_ref.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> String::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).length.encode(w)) {
            return err;
        }
        auto tmp_99_ = (*this).length.value();
        if (tmp_99_!=(*this).data.size()) {
            return ::futils::error::Error<>("encode: String::data: dynamic length is not compatible with its length; tmp_99_!=(*this).data.size()",::futils::error::Category::lib);
        }
        if (!w.write((*this).data)) {
            return ::futils::error::Error<>("encode: String::data: write array failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> String::decode(::futils::binary::reader& r) {
        if (auto err = (*this).length.decode(r)) {
            return err;
        }
        auto tmp_100_ = (*this).length.value();
        if (!r.read((*this).data, tmp_100_)) {
            return ::futils::error::Error<>("decode: String::data: read byte array failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IdentifierRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IdentifierRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> TypeRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> TypeRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExpressionRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExpressionRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StringRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StringRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredStatement::encode(::futils::binary::writer& w) const {
        auto tmp_101_ = static_cast<std::uint8_t>((*this).lowering_type);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_101_) ,true)) {
            return ::futils::error::Error<>("encode: LoweredStatement::lowering_type: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).block.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredStatement::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_102_ = 0;
        if (!::futils::binary::read_num(r,tmp_102_ ,true)) {
            return ::futils::error::Error<>("decode: LoweredStatement::lowering_type: read int failed",::futils::error::Category::lib);
        }
        (*this).lowering_type = static_cast<LoweringType>(tmp_102_);
        if (auto err = (*this).block.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredExpression::encode(::futils::binary::writer& w) const {
        auto tmp_103_ = static_cast<std::uint8_t>((*this).lowering_type);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_103_) ,true)) {
            return ::futils::error::Error<>("encode: LoweredExpression::lowering_type: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).expression.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredExpression::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_104_ = 0;
        if (!::futils::binary::read_num(r,tmp_104_ ,true)) {
            return ::futils::error::Error<>("decode: LoweredExpression::lowering_type: read int failed",::futils::error::Category::lib);
        }
        (*this).lowering_type = static_cast<LoweringType>(tmp_104_);
        if (auto err = (*this).expression.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoopFlowControl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).related_statement.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoopFlowControl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).related_statement.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> PhiParam::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).condition.encode(w)) {
            return err;
        }
        if (auto err = (*this).value.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> PhiParam::decode(::futils::binary::reader& r) {
        if (auto err = (*this).condition.decode(r)) {
            return err;
        }
        if (auto err = (*this).value.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> AnyRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> AnyRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Expressions::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len.encode(w)) {
            return err;
        }
        auto tmp_105_ = (*this).len.value();
        if (tmp_105_!=(*this).container.size()) {
            return ::futils::error::Error<>("encode: Expressions::container: dynamic length is not compatible with its length; tmp_105_!=(*this).container.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_106_ : (*this).container) {
            if (auto err = tmp_106_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Expressions::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len.decode(r)) {
            return err;
        }
        auto tmp_107_ = (*this).len.value();
        (*this).container.clear();
        for (size_t  tmp_109_= 0; tmp_109_<tmp_107_; ++tmp_109_ ) {
            ExpressionRef tmp_108_;
            if (auto err = tmp_108_.decode(r)) {
                return err;
            }
            (*this).container.push_back(std::move(tmp_108_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> CallDesc::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).callee.encode(w)) {
            return err;
        }
        if (auto err = (*this).arguments.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> CallDesc::decode(::futils::binary::reader& r) {
        if (auto err = (*this).callee.decode(r)) {
            return err;
        }
        if (auto err = (*this).arguments.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExpressionBody::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).type.encode(w)) {
            return err;
        }
        auto tmp_110_ = static_cast<std::uint8_t>((*this).op);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_110_) ,true)) {
            return ::futils::error::Error<>("encode: ExpressionBody::op: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            if(!std::holds_alternative<union_struct_5>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_5 is not set",::futils::error::Category::lib);
            }
            if (!::futils::binary::write_num(w,static_cast<std::uint64_t>(std::get<1>((*this).union_variant_4).int_value) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::int_value: write std::uint64_t failed",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            if(!std::holds_alternative<union_struct_6>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_6 is not set",::futils::error::Category::lib);
            }
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(std::get<2>((*this).union_variant_4).bool_value) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::bool_value: write std::uint8_t failed",::futils::error::Category::lib);
            }
            if (!((std::get<2>((*this).union_variant_4).bool_value == 0) || (std::get<2>((*this).union_variant_4).bool_value == 1))) {
                return ::futils::error::Error<>("encode: ExpressionBody: assertion failed; (std::get<2>((*this).union_variant_4).bool_value == 0) || (std::get<2>((*this).union_variant_4).bool_value == 1)",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::LITERAL_STRING==(*this).op) {
            if(!std::holds_alternative<union_struct_7>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_7 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<3>((*this).union_variant_4).string_value.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            if(!std::holds_alternative<union_struct_8>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_8 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<4>((*this).union_variant_4).type_ref.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::IDENTIFIER==(*this).op) {
            if(!std::holds_alternative<union_struct_9>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_9 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<5>((*this).union_variant_4).id.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::BINARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_10>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_10 is not set",::futils::error::Category::lib);
            }
            auto tmp_111_ = static_cast<std::uint8_t>(std::get<6>((*this).union_variant_4).bop);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_111_) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::bop: write std::uint8_t failed",::futils::error::Category::lib);
            }
            if (auto err = std::get<6>((*this).union_variant_4).left.encode(w)) {
                return err;
            }
            if (auto err = std::get<6>((*this).union_variant_4).right.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::UNARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_11>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_11 is not set",::futils::error::Category::lib);
            }
            auto tmp_112_ = static_cast<std::uint8_t>(std::get<7>((*this).union_variant_4).uop);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_112_) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::uop: write std::uint8_t failed",::futils::error::Category::lib);
            }
            if (auto err = std::get<7>((*this).union_variant_4).operand.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::CALL==(*this).op) {
            if(!std::holds_alternative<union_struct_12>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_12 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<8>((*this).union_variant_4).call_desc.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_13>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_13 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<9>((*this).union_variant_4).base.encode(w)) {
                return err;
            }
            if (auto err = std::get<9>((*this).union_variant_4).index.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_14>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_14 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<10>((*this).union_variant_4).base.encode(w)) {
                return err;
            }
            if (auto err = std::get<10>((*this).union_variant_4).member.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::TYPE_CAST==(*this).op) {
            if(!std::holds_alternative<union_struct_15>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_15 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<11>((*this).union_variant_4).from_type.encode(w)) {
                return err;
            }
            if (auto err = std::get<11>((*this).union_variant_4).source_expr.encode(w)) {
                return err;
            }
            auto tmp_113_ = static_cast<std::uint8_t>(std::get<11>((*this).union_variant_4).cast_kind);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_113_) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::cast_kind: write std::uint8_t failed",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::RANGE==(*this).op) {
            if(!std::holds_alternative<union_struct_16>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_16 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<12>((*this).union_variant_4).start.encode(w)) {
                return err;
            }
            if (auto err = std::get<12>((*this).union_variant_4).end.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).op) {
            if(!std::holds_alternative<union_struct_17>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_17 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<13>((*this).union_variant_4).endian_expr.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::GET_STREAM_OFFSET==(*this).op) {
            if(!std::holds_alternative<union_struct_18>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_18 is not set",::futils::error::Category::lib);
            }
            auto tmp_114_ = static_cast<std::uint8_t>(std::get<14>((*this).union_variant_4).stream_type);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_114_) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::stream_type: write std::uint8_t failed",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::GET_REMAINING_BYTES==(*this).op) {
            if(!std::holds_alternative<union_struct_19>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_19 is not set",::futils::error::Category::lib);
            }
            auto tmp_115_ = static_cast<std::uint8_t>(std::get<15>((*this).union_variant_4).stream_type);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_115_) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::stream_type: write std::uint8_t failed",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::CAN_READ_STREAM==(*this).op) {
            if(!std::holds_alternative<union_struct_20>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_20 is not set",::futils::error::Category::lib);
            }
            auto tmp_116_ = static_cast<std::uint8_t>(std::get<16>((*this).union_variant_4).stream_type);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_116_) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::stream_type: write std::uint8_t failed",::futils::error::Category::lib);
            }
            if (auto err = std::get<16>((*this).union_variant_4).num_bytes.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::ARRAY_SIZE==(*this).op) {
            if(!std::holds_alternative<union_struct_21>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_21 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<17>((*this).union_variant_4).array_expr.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::IS_ERROR==(*this).op) {
            if(!std::holds_alternative<union_struct_22>(union_variant_4)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_4 variant alternative union_struct_22 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<18>((*this).union_variant_4).target_expr.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExpressionBody::decode(::futils::binary::reader& r) {
        if (auto err = (*this).type.decode(r)) {
            return err;
        }
        std::uint8_t tmp_117_ = 0;
        if (!::futils::binary::read_num(r,tmp_117_ ,true)) {
            return ::futils::error::Error<>("decode: ExpressionBody::op: read int failed",::futils::error::Category::lib);
        }
        (*this).op = static_cast<ExpressionOp>(tmp_117_);
        if (ExpressionOp::LITERAL_INT==(*this).op) {
            if(!std::holds_alternative<union_struct_5>(union_variant_4)) {
                union_variant_4 = union_struct_5();
            }
            if (!::futils::binary::read_num(r,std::get<1>((*this).union_variant_4).int_value ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::int_value: read int failed",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::LITERAL_BOOL==(*this).op) {
            if(!std::holds_alternative<union_struct_6>(union_variant_4)) {
                union_variant_4 = union_struct_6();
            }
            if (!::futils::binary::read_num(r,std::get<2>((*this).union_variant_4).bool_value ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::bool_value: read int failed",::futils::error::Category::lib);
            }
            if (!((std::get<2>((*this).union_variant_4).bool_value == 0) || (std::get<2>((*this).union_variant_4).bool_value == 1))) {
                return ::futils::error::Error<>("decode: ExpressionBody: assertion failed; (std::get<2>((*this).union_variant_4).bool_value == 0) || (std::get<2>((*this).union_variant_4).bool_value == 1)",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::LITERAL_STRING==(*this).op) {
            if(!std::holds_alternative<union_struct_7>(union_variant_4)) {
                union_variant_4 = union_struct_7();
            }
            if (auto err = std::get<3>((*this).union_variant_4).string_value.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::LITERAL_TYPE==(*this).op) {
            if(!std::holds_alternative<union_struct_8>(union_variant_4)) {
                union_variant_4 = union_struct_8();
            }
            if (auto err = std::get<4>((*this).union_variant_4).type_ref.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::IDENTIFIER==(*this).op) {
            if(!std::holds_alternative<union_struct_9>(union_variant_4)) {
                union_variant_4 = union_struct_9();
            }
            if (auto err = std::get<5>((*this).union_variant_4).id.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::BINARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_10>(union_variant_4)) {
                union_variant_4 = union_struct_10();
            }
            std::uint8_t tmp_118_ = 0;
            if (!::futils::binary::read_num(r,tmp_118_ ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::bop: read int failed",::futils::error::Category::lib);
            }
            std::get<6>((*this).union_variant_4).bop = static_cast<BinaryOp>(tmp_118_);
            if (auto err = std::get<6>((*this).union_variant_4).left.decode(r)) {
                return err;
            }
            if (auto err = std::get<6>((*this).union_variant_4).right.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::UNARY_OP==(*this).op) {
            if(!std::holds_alternative<union_struct_11>(union_variant_4)) {
                union_variant_4 = union_struct_11();
            }
            std::uint8_t tmp_119_ = 0;
            if (!::futils::binary::read_num(r,tmp_119_ ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::uop: read int failed",::futils::error::Category::lib);
            }
            std::get<7>((*this).union_variant_4).uop = static_cast<UnaryOp>(tmp_119_);
            if (auto err = std::get<7>((*this).union_variant_4).operand.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::CALL==(*this).op) {
            if(!std::holds_alternative<union_struct_12>(union_variant_4)) {
                union_variant_4 = union_struct_12();
            }
            if (auto err = std::get<8>((*this).union_variant_4).call_desc.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::INDEX_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_13>(union_variant_4)) {
                union_variant_4 = union_struct_13();
            }
            if (auto err = std::get<9>((*this).union_variant_4).base.decode(r)) {
                return err;
            }
            if (auto err = std::get<9>((*this).union_variant_4).index.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::MEMBER_ACCESS==(*this).op) {
            if(!std::holds_alternative<union_struct_14>(union_variant_4)) {
                union_variant_4 = union_struct_14();
            }
            if (auto err = std::get<10>((*this).union_variant_4).base.decode(r)) {
                return err;
            }
            if (auto err = std::get<10>((*this).union_variant_4).member.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::TYPE_CAST==(*this).op) {
            if(!std::holds_alternative<union_struct_15>(union_variant_4)) {
                union_variant_4 = union_struct_15();
            }
            if (auto err = std::get<11>((*this).union_variant_4).from_type.decode(r)) {
                return err;
            }
            if (auto err = std::get<11>((*this).union_variant_4).source_expr.decode(r)) {
                return err;
            }
            std::uint8_t tmp_120_ = 0;
            if (!::futils::binary::read_num(r,tmp_120_ ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::cast_kind: read int failed",::futils::error::Category::lib);
            }
            std::get<11>((*this).union_variant_4).cast_kind = static_cast<CastType>(tmp_120_);
        }
        else if (ExpressionOp::RANGE==(*this).op) {
            if(!std::holds_alternative<union_struct_16>(union_variant_4)) {
                union_variant_4 = union_struct_16();
            }
            if (auto err = std::get<12>((*this).union_variant_4).start.decode(r)) {
                return err;
            }
            if (auto err = std::get<12>((*this).union_variant_4).end.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).op) {
            if(!std::holds_alternative<union_struct_17>(union_variant_4)) {
                union_variant_4 = union_struct_17();
            }
            if (auto err = std::get<13>((*this).union_variant_4).endian_expr.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::GET_STREAM_OFFSET==(*this).op) {
            if(!std::holds_alternative<union_struct_18>(union_variant_4)) {
                union_variant_4 = union_struct_18();
            }
            std::uint8_t tmp_121_ = 0;
            if (!::futils::binary::read_num(r,tmp_121_ ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::stream_type: read int failed",::futils::error::Category::lib);
            }
            std::get<14>((*this).union_variant_4).stream_type = static_cast<StreamType>(tmp_121_);
        }
        else if (ExpressionOp::GET_REMAINING_BYTES==(*this).op) {
            if(!std::holds_alternative<union_struct_19>(union_variant_4)) {
                union_variant_4 = union_struct_19();
            }
            std::uint8_t tmp_122_ = 0;
            if (!::futils::binary::read_num(r,tmp_122_ ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::stream_type: read int failed",::futils::error::Category::lib);
            }
            std::get<15>((*this).union_variant_4).stream_type = static_cast<StreamType>(tmp_122_);
        }
        else if (ExpressionOp::CAN_READ_STREAM==(*this).op) {
            if(!std::holds_alternative<union_struct_20>(union_variant_4)) {
                union_variant_4 = union_struct_20();
            }
            std::uint8_t tmp_123_ = 0;
            if (!::futils::binary::read_num(r,tmp_123_ ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::stream_type: read int failed",::futils::error::Category::lib);
            }
            std::get<16>((*this).union_variant_4).stream_type = static_cast<StreamType>(tmp_123_);
            if (auto err = std::get<16>((*this).union_variant_4).num_bytes.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::ARRAY_SIZE==(*this).op) {
            if(!std::holds_alternative<union_struct_21>(union_variant_4)) {
                union_variant_4 = union_struct_21();
            }
            if (auto err = std::get<17>((*this).union_variant_4).array_expr.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::IS_ERROR==(*this).op) {
            if(!std::holds_alternative<union_struct_22>(union_variant_4)) {
                union_variant_4 = union_struct_22();
            }
            if (auto err = std::get<18>((*this).union_variant_4).target_expr.decode(r)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Expression::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Expression::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IfStatement::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).condition.encode(w)) {
            return err;
        }
        if (auto err = (*this).then_block.encode(w)) {
            return err;
        }
        if (auto err = (*this).else_block.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IfStatement::decode(::futils::binary::reader& r) {
        if (auto err = (*this).condition.decode(r)) {
            return err;
        }
        if (auto err = (*this).then_block.decode(r)) {
            return err;
        }
        if (auto err = (*this).else_block.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Block::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len.encode(w)) {
            return err;
        }
        auto tmp_124_ = (*this).len.value();
        if (tmp_124_!=(*this).container.size()) {
            return ::futils::error::Error<>("encode: Block::container: dynamic length is not compatible with its length; tmp_124_!=(*this).container.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_125_ : (*this).container) {
            if (auto err = tmp_125_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Block::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len.decode(r)) {
            return err;
        }
        auto tmp_126_ = (*this).len.value();
        (*this).container.clear();
        for (size_t  tmp_128_= 0; tmp_128_<tmp_126_; ++tmp_128_ ) {
            StatementRef tmp_127_;
            if (auto err = tmp_127_.decode(r)) {
                return err;
            }
            (*this).container.push_back(std::move(tmp_127_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> MatchStatement::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).target.encode(w)) {
            return err;
        }
        if (!::futils::binary::write_num(w,flags_23_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: MatchStatement::reserved: write bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).branches.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> MatchStatement::decode(::futils::binary::reader& r) {
        if (auto err = (*this).target.decode(r)) {
            return err;
        }
        if (!::futils::binary::read_num(r,flags_23_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: MatchStatement::reserved: read bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).branches.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StructDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).fields.encode(w)) {
            return err;
        }
        if (!::futils::binary::write_num(w,flags_24_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: StructDecl::reserved: write bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StructDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).fields.decode(r)) {
            return err;
        }
        if (!::futils::binary::read_num(r,flags_24_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: StructDecl::reserved: read bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StateDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StateDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Metadata::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).values.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Metadata::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).values.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredStatements::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len.encode(w)) {
            return err;
        }
        auto tmp_129_ = (*this).len.value();
        if (tmp_129_!=(*this).container.size()) {
            return ::futils::error::Error<>("encode: LoweredStatements::container: dynamic length is not compatible with its length; tmp_129_!=(*this).container.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_130_ : (*this).container) {
            if (auto err = tmp_130_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredStatements::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len.decode(r)) {
            return err;
        }
        auto tmp_131_ = (*this).len.value();
        (*this).container.clear();
        for (size_t  tmp_133_= 0; tmp_133_<tmp_131_; ++tmp_133_ ) {
            LoweredStatement tmp_132_;
            if (auto err = tmp_132_.decode(r)) {
                return err;
            }
            (*this).container.push_back(std::move(tmp_132_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredExpressions::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len.encode(w)) {
            return err;
        }
        auto tmp_134_ = (*this).len.value();
        if (tmp_134_!=(*this).container.size()) {
            return ::futils::error::Error<>("encode: LoweredExpressions::container: dynamic length is not compatible with its length; tmp_134_!=(*this).container.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_135_ : (*this).container) {
            if (auto err = tmp_135_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredExpressions::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len.decode(r)) {
            return err;
        }
        auto tmp_136_ = (*this).len.value();
        (*this).container.clear();
        for (size_t  tmp_138_= 0; tmp_138_<tmp_136_; ++tmp_138_ ) {
            LoweredExpression tmp_137_;
            if (auto err = tmp_137_.decode(r)) {
                return err;
            }
            (*this).container.push_back(std::move(tmp_137_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> AssertDesc::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).condition.encode(w)) {
            return err;
        }
        if (auto err = (*this).lowered_statement.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> AssertDesc::decode(::futils::binary::reader& r) {
        if (auto err = (*this).condition.decode(r)) {
            return err;
        }
        if (auto err = (*this).lowered_statement.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Size::encode(::futils::binary::writer& w) const {
        auto tmp_139_ = static_cast<std::uint8_t>((*this).unit);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_139_) ,true)) {
            return ::futils::error::Error<>("encode: Size::unit: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (SizeUnit::UNKNOWN==(*this).unit) {
        }
        else if (SizeUnit::BIT_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_28>(union_variant_26)) {
                return ::futils::error::Error<>("encode: Size: union_variant_26 variant alternative union_struct_28 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<2>((*this).union_variant_26).size.encode(w)) {
                return err;
            }
        }
        else if (SizeUnit::BYTE_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_29>(union_variant_26)) {
                return ::futils::error::Error<>("encode: Size: union_variant_26 variant alternative union_struct_29 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<3>((*this).union_variant_26).size.encode(w)) {
                return err;
            }
        }
        else if (SizeUnit::ELEMENT_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_30>(union_variant_26)) {
                return ::futils::error::Error<>("encode: Size: union_variant_26 variant alternative union_struct_30 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<4>((*this).union_variant_26).size.encode(w)) {
                return err;
            }
        }
        else if (SizeUnit::BIT_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_31>(union_variant_26)) {
                return ::futils::error::Error<>("encode: Size: union_variant_26 variant alternative union_struct_31 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<5>((*this).union_variant_26).ref.encode(w)) {
                return err;
            }
        }
        else if (SizeUnit::BYTE_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_32>(union_variant_26)) {
                return ::futils::error::Error<>("encode: Size: union_variant_26 variant alternative union_struct_32 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<6>((*this).union_variant_26).ref.encode(w)) {
                return err;
            }
        }
        else if (SizeUnit::ELEMENT_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_33>(union_variant_26)) {
                return ::futils::error::Error<>("encode: Size: union_variant_26 variant alternative union_struct_33 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<7>((*this).union_variant_26).ref.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Size::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_140_ = 0;
        if (!::futils::binary::read_num(r,tmp_140_ ,true)) {
            return ::futils::error::Error<>("decode: Size::unit: read int failed",::futils::error::Category::lib);
        }
        (*this).unit = static_cast<SizeUnit>(tmp_140_);
        if (SizeUnit::UNKNOWN==(*this).unit) {
            if(!std::holds_alternative<union_struct_27>(union_variant_26)) {
                union_variant_26 = union_struct_27();
            }
        }
        else if (SizeUnit::BIT_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_28>(union_variant_26)) {
                union_variant_26 = union_struct_28();
            }
            if (auto err = std::get<2>((*this).union_variant_26).size.decode(r)) {
                return err;
            }
        }
        else if (SizeUnit::BYTE_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_29>(union_variant_26)) {
                union_variant_26 = union_struct_29();
            }
            if (auto err = std::get<3>((*this).union_variant_26).size.decode(r)) {
                return err;
            }
        }
        else if (SizeUnit::ELEMENT_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_30>(union_variant_26)) {
                union_variant_26 = union_struct_30();
            }
            if (auto err = std::get<4>((*this).union_variant_26).size.decode(r)) {
                return err;
            }
        }
        else if (SizeUnit::BIT_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_31>(union_variant_26)) {
                union_variant_26 = union_struct_31();
            }
            if (auto err = std::get<5>((*this).union_variant_26).ref.decode(r)) {
                return err;
            }
        }
        else if (SizeUnit::BYTE_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_32>(union_variant_26)) {
                union_variant_26 = union_struct_32();
            }
            if (auto err = std::get<6>((*this).union_variant_26).ref.decode(r)) {
                return err;
            }
        }
        else if (SizeUnit::ELEMENT_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_33>(union_variant_26)) {
                union_variant_26 = union_struct_33();
            }
            if (auto err = std::get<7>((*this).union_variant_26).ref.decode(r)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IOData::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).target.encode(w)) {
            return err;
        }
        if (auto err = (*this).data_type.encode(w)) {
            return err;
        }
        if (auto err = (*this).endian.encode(w)) {
            return err;
        }
        if (auto err = (*this).size.encode(w)) {
            return err;
        }
        if (auto err = (*this).lowered_stmt.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IOData::decode(::futils::binary::reader& r) {
        if (auto err = (*this).target.decode(r)) {
            return err;
        }
        if (auto err = (*this).data_type.decode(r)) {
            return err;
        }
        if (auto err = (*this).endian.decode(r)) {
            return err;
        }
        if (auto err = (*this).size.decode(r)) {
            return err;
        }
        if (auto err = (*this).lowered_stmt.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoopStatement::encode(::futils::binary::writer& w) const {
        auto tmp_141_ = static_cast<std::uint8_t>((*this).loop_type);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_141_) ,true)) {
            return ::futils::error::Error<>("encode: LoopStatement::loop_type: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (LoopType::INFINITE==(*this).loop_type) {
        }
        else if (LoopType::WHILE==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_37>(union_variant_35)) {
                return ::futils::error::Error<>("encode: LoopStatement: union_variant_35 variant alternative union_struct_37 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<2>((*this).union_variant_35).condition.encode(w)) {
                return err;
            }
        }
        else if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_38>(union_variant_35)) {
                return ::futils::error::Error<>("encode: LoopStatement: union_variant_35 variant alternative union_struct_38 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<3>((*this).union_variant_35).item_var.encode(w)) {
                return err;
            }
            if (auto err = std::get<3>((*this).union_variant_35).collection.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoopStatement::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_142_ = 0;
        if (!::futils::binary::read_num(r,tmp_142_ ,true)) {
            return ::futils::error::Error<>("decode: LoopStatement::loop_type: read int failed",::futils::error::Category::lib);
        }
        (*this).loop_type = static_cast<LoopType>(tmp_142_);
        if (LoopType::INFINITE==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_36>(union_variant_35)) {
                union_variant_35 = union_struct_36();
            }
        }
        else if (LoopType::WHILE==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_37>(union_variant_35)) {
                union_variant_35 = union_struct_37();
            }
            if (auto err = std::get<2>((*this).union_variant_35).condition.decode(r)) {
                return err;
            }
        }
        else if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_38>(union_variant_35)) {
                union_variant_35 = union_struct_38();
            }
            if (auto err = std::get<3>((*this).union_variant_35).item_var.decode(r)) {
                return err;
            }
            if (auto err = std::get<3>((*this).union_variant_35).collection.decode(r)) {
                return err;
            }
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> MatchBranch::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).condition.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> MatchBranch::decode(::futils::binary::reader& r) {
        if (auto err = (*this).condition.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FunctionDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).return_type.encode(w)) {
            return err;
        }
        if (auto err = (*this).params.encode(w)) {
            return err;
        }
        if (auto err = (*this).parent_format.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FunctionDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).return_type.decode(r)) {
            return err;
        }
        if (auto err = (*this).params.decode(r)) {
            return err;
        }
        if (auto err = (*this).parent_format.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> VariableDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).var_type.encode(w)) {
            return err;
        }
        if (auto err = (*this).initial_value.encode(w)) {
            return err;
        }
        if (!::futils::binary::write_num(w,flags_39_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: VariableDecl::reserved: write bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> VariableDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).var_type.decode(r)) {
            return err;
        }
        if (auto err = (*this).initial_value.decode(r)) {
            return err;
        }
        if (!::futils::binary::read_num(r,flags_39_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: VariableDecl::reserved: read bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FieldDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).field_type.encode(w)) {
            return err;
        }
        if (auto err = (*this).parent_struct.encode(w)) {
            return err;
        }
        if (!::futils::binary::write_num(w,flags_40_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: FieldDecl::reserved: write bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FieldDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).field_type.decode(r)) {
            return err;
        }
        if (auto err = (*this).parent_struct.decode(r)) {
            return err;
        }
        if (!::futils::binary::read_num(r,flags_40_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: FieldDecl::reserved: read bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> EnumDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).base_type.encode(w)) {
            return err;
        }
        if (auto err = (*this).members.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> EnumDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).base_type.decode(r)) {
            return err;
        }
        if (auto err = (*this).members.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> EnumMemberDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).value.encode(w)) {
            return err;
        }
        if (auto err = (*this).string_repr.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> EnumMemberDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).value.decode(r)) {
            return err;
        }
        if (auto err = (*this).string_repr.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> UnionDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).parent_field.encode(w)) {
            return err;
        }
        if (auto err = (*this).members.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> UnionDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).parent_field.decode(r)) {
            return err;
        }
        if (auto err = (*this).members.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> UnionMemberDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).field_type.encode(w)) {
            return err;
        }
        if (!::futils::binary::write_num(w,flags_41_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: UnionMemberDecl::reserved: write bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).parent_union.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> UnionMemberDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).field_type.decode(r)) {
            return err;
        }
        if (!::futils::binary::read_num(r,flags_41_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: UnionMemberDecl::reserved: read bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).parent_union.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> BitFieldDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).parent_format.encode(w)) {
            return err;
        }
        if (auto err = (*this).bit_size.encode(w)) {
            return err;
        }
        auto tmp_143_ = static_cast<std::uint8_t>((*this).packed_op_type);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_143_) ,true)) {
            return ::futils::error::Error<>("encode: BitFieldDecl::packed_op_type: write std::uint8_t failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> BitFieldDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).parent_format.decode(r)) {
            return err;
        }
        if (auto err = (*this).bit_size.decode(r)) {
            return err;
        }
        std::uint8_t tmp_144_ = 0;
        if (!::futils::binary::read_num(r,tmp_144_ ,true)) {
            return ::futils::error::Error<>("decode: BitFieldDecl::packed_op_type: read int failed",::futils::error::Category::lib);
        }
        (*this).packed_op_type = static_cast<PackedOpType>(tmp_144_);
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> PropertyDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).parent_format.encode(w)) {
            return err;
        }
        if (auto err = (*this).property_type.encode(w)) {
            return err;
        }
        auto tmp_145_ = static_cast<std::uint8_t>((*this).merge_mode);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_145_) ,true)) {
            return ::futils::error::Error<>("encode: PropertyDecl::merge_mode: write std::uint8_t failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> PropertyDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).parent_format.decode(r)) {
            return err;
        }
        if (auto err = (*this).property_type.decode(r)) {
            return err;
        }
        std::uint8_t tmp_146_ = 0;
        if (!::futils::binary::read_num(r,tmp_146_ ,true)) {
            return ::futils::error::Error<>("decode: PropertyDecl::merge_mode: read int failed",::futils::error::Category::lib);
        }
        (*this).merge_mode = static_cast<MergeMode>(tmp_146_);
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ErrorReport::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).message.encode(w)) {
            return err;
        }
        if (auto err = (*this).arguments.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ErrorReport::decode(::futils::binary::reader& r) {
        if (auto err = (*this).message.decode(r)) {
            return err;
        }
        if (auto err = (*this).arguments.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StatementBody::encode(::futils::binary::writer& w) const {
        auto tmp_147_ = static_cast<std::uint8_t>((*this).statement_kind);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_147_) ,true)) {
            return ::futils::error::Error<>("encode: StatementBody::statement_kind: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (StatementOp::BLOCK==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_44>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_44 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<1>((*this).union_variant_43).block.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_45>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_45 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<2>((*this).union_variant_43).target.encode(w)) {
                return err;
            }
            if (auto err = std::get<2>((*this).union_variant_43).value.encode(w)) {
                return err;
            }
            if (auto err = std::get<2>((*this).union_variant_43).previous_assignment.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::RETURN==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_46>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_46 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<3>((*this).union_variant_43).value.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_47>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_47 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<4>((*this).union_variant_43).value.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::ASSERT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_48>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_48 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<5>((*this).union_variant_43).assert_desc.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::READ_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_49>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_49 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<6>((*this).union_variant_43).read_data.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_50>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_50 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<7>((*this).union_variant_43).write_data.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_51>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_51 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<8>((*this).union_variant_43).offset.encode(w)) {
                return err;
            }
            auto tmp_148_ = static_cast<std::uint8_t>(std::get<8>((*this).union_variant_43).stream_type);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_148_) ,true)) {
                return ::futils::error::Error<>("encode: StatementBody::stream_type: write std::uint8_t failed",::futils::error::Category::lib);
            }
        }
        else if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_52>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_52 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<9>((*this).union_variant_43).if_statement.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_53>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_53 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<10>((*this).union_variant_43).loop.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_54>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_54 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<11>((*this).union_variant_43).match_statement.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_55>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_55 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<12>((*this).union_variant_43).match_branch.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::BREAK==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_56>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_56 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<13>((*this).union_variant_43).break_.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::CONTINUE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_57>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_57 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<14>((*this).union_variant_43).continue_.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_58>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_58 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<15>((*this).union_variant_43).func_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_59>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_59 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<16>((*this).union_variant_43).var_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_60>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_60 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<17>((*this).union_variant_43).field_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_61>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_61 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<18>((*this).union_variant_43).enum_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_62>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_62 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<19>((*this).union_variant_43).enum_member_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_63>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_63 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<20>((*this).union_variant_43).struct_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::UNION_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_64>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_64 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<21>((*this).union_variant_43).union_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_65>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_65 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<22>((*this).union_variant_43).union_member_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_66>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_66 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<23>((*this).union_variant_43).block.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::STATE_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_67>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_67 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<24>((*this).union_variant_43).state_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_68>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_68 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<25>((*this).union_variant_43).bit_field_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_69>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_69 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<26>((*this).union_variant_43).property_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::METADATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_70>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_70 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<27>((*this).union_variant_43).metadata.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_71>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_71 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<28>((*this).union_variant_43).module_name.encode(w)) {
                return err;
            }
            if (auto err = std::get<28>((*this).union_variant_43).alias.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::PHI_NODE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_72>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_72 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<29>((*this).union_variant_43).target_var.encode(w)) {
                return err;
            }
            if (auto err = std::get<29>((*this).union_variant_43).params_len.encode(w)) {
                return err;
            }
            auto tmp_149_ = std::get<29>((*this).union_variant_43).params_len.value();
            if (tmp_149_!=std::get<29>((*this).union_variant_43).params.size()) {
                return ::futils::error::Error<>("encode: StatementBody::params: dynamic length is not compatible with its length; tmp_149_!=std::get<29>((*this).union_variant_43).params.size()",::futils::error::Category::lib);
            }
            for (auto& tmp_150_ : std::get<29>((*this).union_variant_43).params) {
                if (auto err = tmp_150_.encode(w)) {
                    return err;
                }
            }
        }
        else if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_73>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_73 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<30>((*this).union_variant_43).error_report.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::EXPRESSION==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_74>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_74 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<31>((*this).union_variant_43).expression.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::LOWERED_STATEMENTS==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_75>(union_variant_43)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_43 variant alternative union_struct_75 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<32>((*this).union_variant_43).lowered_statements.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StatementBody::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_151_ = 0;
        if (!::futils::binary::read_num(r,tmp_151_ ,true)) {
            return ::futils::error::Error<>("decode: StatementBody::statement_kind: read int failed",::futils::error::Category::lib);
        }
        (*this).statement_kind = static_cast<StatementOp>(tmp_151_);
        if (StatementOp::BLOCK==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_44>(union_variant_43)) {
                union_variant_43 = union_struct_44();
            }
            if (auto err = std::get<1>((*this).union_variant_43).block.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::ASSIGNMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_45>(union_variant_43)) {
                union_variant_43 = union_struct_45();
            }
            if (auto err = std::get<2>((*this).union_variant_43).target.decode(r)) {
                return err;
            }
            if (auto err = std::get<2>((*this).union_variant_43).value.decode(r)) {
                return err;
            }
            if (auto err = std::get<2>((*this).union_variant_43).previous_assignment.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::RETURN==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_46>(union_variant_43)) {
                union_variant_43 = union_struct_46();
            }
            if (auto err = std::get<3>((*this).union_variant_43).value.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::ERROR_RETURN==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_47>(union_variant_43)) {
                union_variant_43 = union_struct_47();
            }
            if (auto err = std::get<4>((*this).union_variant_43).value.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::ASSERT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_48>(union_variant_43)) {
                union_variant_43 = union_struct_48();
            }
            if (auto err = std::get<5>((*this).union_variant_43).assert_desc.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::READ_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_49>(union_variant_43)) {
                union_variant_43 = union_struct_49();
            }
            if (auto err = std::get<6>((*this).union_variant_43).read_data.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::WRITE_DATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_50>(union_variant_43)) {
                union_variant_43 = union_struct_50();
            }
            if (auto err = std::get<7>((*this).union_variant_43).write_data.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::SEEK_STREAM==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_51>(union_variant_43)) {
                union_variant_43 = union_struct_51();
            }
            if (auto err = std::get<8>((*this).union_variant_43).offset.decode(r)) {
                return err;
            }
            std::uint8_t tmp_152_ = 0;
            if (!::futils::binary::read_num(r,tmp_152_ ,true)) {
                return ::futils::error::Error<>("decode: StatementBody::stream_type: read int failed",::futils::error::Category::lib);
            }
            std::get<8>((*this).union_variant_43).stream_type = static_cast<StreamType>(tmp_152_);
        }
        else if (StatementOp::IF_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_52>(union_variant_43)) {
                union_variant_43 = union_struct_52();
            }
            if (auto err = std::get<9>((*this).union_variant_43).if_statement.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::LOOP_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_53>(union_variant_43)) {
                union_variant_43 = union_struct_53();
            }
            if (auto err = std::get<10>((*this).union_variant_43).loop.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::MATCH_STATEMENT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_54>(union_variant_43)) {
                union_variant_43 = union_struct_54();
            }
            if (auto err = std::get<11>((*this).union_variant_43).match_statement.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::MATCH_BRANCH==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_55>(union_variant_43)) {
                union_variant_43 = union_struct_55();
            }
            if (auto err = std::get<12>((*this).union_variant_43).match_branch.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::BREAK==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_56>(union_variant_43)) {
                union_variant_43 = union_struct_56();
            }
            if (auto err = std::get<13>((*this).union_variant_43).break_.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::CONTINUE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_57>(union_variant_43)) {
                union_variant_43 = union_struct_57();
            }
            if (auto err = std::get<14>((*this).union_variant_43).continue_.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::FUNCTION_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_58>(union_variant_43)) {
                union_variant_43 = union_struct_58();
            }
            if (auto err = std::get<15>((*this).union_variant_43).func_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::VARIABLE_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_59>(union_variant_43)) {
                union_variant_43 = union_struct_59();
            }
            if (auto err = std::get<16>((*this).union_variant_43).var_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::FIELD_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_60>(union_variant_43)) {
                union_variant_43 = union_struct_60();
            }
            if (auto err = std::get<17>((*this).union_variant_43).field_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::ENUM_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_61>(union_variant_43)) {
                union_variant_43 = union_struct_61();
            }
            if (auto err = std::get<18>((*this).union_variant_43).enum_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::ENUM_MEMBER_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_62>(union_variant_43)) {
                union_variant_43 = union_struct_62();
            }
            if (auto err = std::get<19>((*this).union_variant_43).enum_member_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::STRUCT_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_63>(union_variant_43)) {
                union_variant_43 = union_struct_63();
            }
            if (auto err = std::get<20>((*this).union_variant_43).struct_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::UNION_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_64>(union_variant_43)) {
                union_variant_43 = union_struct_64();
            }
            if (auto err = std::get<21>((*this).union_variant_43).union_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::UNION_MEMBER_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_65>(union_variant_43)) {
                union_variant_43 = union_struct_65();
            }
            if (auto err = std::get<22>((*this).union_variant_43).union_member_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::PROGRAM_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_66>(union_variant_43)) {
                union_variant_43 = union_struct_66();
            }
            if (auto err = std::get<23>((*this).union_variant_43).block.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::STATE_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_67>(union_variant_43)) {
                union_variant_43 = union_struct_67();
            }
            if (auto err = std::get<24>((*this).union_variant_43).state_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::BIT_FIELD_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_68>(union_variant_43)) {
                union_variant_43 = union_struct_68();
            }
            if (auto err = std::get<25>((*this).union_variant_43).bit_field_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::PROPERTY_DECL==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_69>(union_variant_43)) {
                union_variant_43 = union_struct_69();
            }
            if (auto err = std::get<26>((*this).union_variant_43).property_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::METADATA==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_70>(union_variant_43)) {
                union_variant_43 = union_struct_70();
            }
            if (auto err = std::get<27>((*this).union_variant_43).metadata.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::IMPORT_MODULE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_71>(union_variant_43)) {
                union_variant_43 = union_struct_71();
            }
            if (auto err = std::get<28>((*this).union_variant_43).module_name.decode(r)) {
                return err;
            }
            if (auto err = std::get<28>((*this).union_variant_43).alias.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::PHI_NODE==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_72>(union_variant_43)) {
                union_variant_43 = union_struct_72();
            }
            if (auto err = std::get<29>((*this).union_variant_43).target_var.decode(r)) {
                return err;
            }
            if (auto err = std::get<29>((*this).union_variant_43).params_len.decode(r)) {
                return err;
            }
            auto tmp_153_ = std::get<29>((*this).union_variant_43).params_len.value();
            std::get<29>((*this).union_variant_43).params.clear();
            for (size_t  tmp_155_= 0; tmp_155_<tmp_153_; ++tmp_155_ ) {
                PhiParam tmp_154_;
                if (auto err = tmp_154_.decode(r)) {
                    return err;
                }
                std::get<29>((*this).union_variant_43).params.push_back(std::move(tmp_154_));
            }
        }
        else if (StatementOp::ERROR_REPORT==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_73>(union_variant_43)) {
                union_variant_43 = union_struct_73();
            }
            if (auto err = std::get<30>((*this).union_variant_43).error_report.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::EXPRESSION==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_74>(union_variant_43)) {
                union_variant_43 = union_struct_74();
            }
            if (auto err = std::get<31>((*this).union_variant_43).expression.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::LOWERED_STATEMENTS==(*this).statement_kind) {
            if(!std::holds_alternative<union_struct_75>(union_variant_43)) {
                union_variant_43 = union_struct_75();
            }
            if (auto err = std::get<32>((*this).union_variant_43).lowered_statements.decode(r)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Statement::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Statement::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Types::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len.encode(w)) {
            return err;
        }
        auto tmp_156_ = (*this).len.value();
        if (tmp_156_!=(*this).container.size()) {
            return ::futils::error::Error<>("encode: Types::container: dynamic length is not compatible with its length; tmp_156_!=(*this).container.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_157_ : (*this).container) {
            if (auto err = tmp_157_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Types::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len.decode(r)) {
            return err;
        }
        auto tmp_158_ = (*this).len.value();
        (*this).container.clear();
        for (size_t  tmp_160_= 0; tmp_160_<tmp_158_; ++tmp_160_ ) {
            TypeRef tmp_159_;
            if (auto err = tmp_159_.decode(r)) {
                return err;
            }
            (*this).container.push_back(std::move(tmp_159_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> TypeBody::encode(::futils::binary::writer& w) const {
        auto tmp_161_ = static_cast<std::uint8_t>((*this).kind);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_161_) ,true)) {
            return ::futils::error::Error<>("encode: TypeBody::kind: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (TypeKind::INT==(*this).kind) {
            if(!std::holds_alternative<union_struct_78>(union_variant_77)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_77 variant alternative union_struct_78 is not set",::futils::error::Category::lib);
            }
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(std::get<1>((*this).union_variant_77).size) ,true)) {
                return ::futils::error::Error<>("encode: TypeBody::size: write std::uint8_t failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::UINT==(*this).kind) {
            if(!std::holds_alternative<union_struct_79>(union_variant_77)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_77 variant alternative union_struct_79 is not set",::futils::error::Category::lib);
            }
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(std::get<2>((*this).union_variant_77).size) ,true)) {
                return ::futils::error::Error<>("encode: TypeBody::size: write std::uint8_t failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::FLOAT==(*this).kind) {
            if(!std::holds_alternative<union_struct_80>(union_variant_77)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_77 variant alternative union_struct_80 is not set",::futils::error::Category::lib);
            }
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(std::get<3>((*this).union_variant_77).size) ,true)) {
                return ::futils::error::Error<>("encode: TypeBody::size: write std::uint8_t failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::BOOL==(*this).kind) {
        }
        else if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_82>(union_variant_77)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_77 variant alternative union_struct_82 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<5>((*this).union_variant_77).element_type.encode(w)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_77).length.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::VECTOR==(*this).kind) {
            if(!std::holds_alternative<union_struct_83>(union_variant_77)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_77 variant alternative union_struct_83 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<6>((*this).union_variant_77).element_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_84>(union_variant_77)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_77 variant alternative union_struct_84 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<7>((*this).union_variant_77).id.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_85>(union_variant_77)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_77 variant alternative union_struct_85 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<8>((*this).union_variant_77).id.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_86>(union_variant_77)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_77 variant alternative union_struct_86 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<9>((*this).union_variant_77).id.encode(w)) {
                return err;
            }
            if (auto err = std::get<9>((*this).union_variant_77).base_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_87>(union_variant_77)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_77 variant alternative union_struct_87 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<10>((*this).union_variant_77).common_type.encode(w)) {
                return err;
            }
            if (auto err = std::get<10>((*this).union_variant_77).members.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_88>(union_variant_77)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_77 variant alternative union_struct_88 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<11>((*this).union_variant_77).property_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::OPTIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_89>(union_variant_77)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_77 variant alternative union_struct_89 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<12>((*this).union_variant_77).inner_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::PTR==(*this).kind) {
            if(!std::holds_alternative<union_struct_90>(union_variant_77)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_77 variant alternative union_struct_90 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<13>((*this).union_variant_77).pointee_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_91>(union_variant_77)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_77 variant alternative union_struct_91 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<14>((*this).union_variant_77).base_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::FUNCTION==(*this).kind) {
            if(!std::holds_alternative<union_struct_92>(union_variant_77)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_77 variant alternative union_struct_92 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<15>((*this).union_variant_77).return_type.encode(w)) {
                return err;
            }
            if (auto err = std::get<15>((*this).union_variant_77).params.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> TypeBody::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_162_ = 0;
        if (!::futils::binary::read_num(r,tmp_162_ ,true)) {
            return ::futils::error::Error<>("decode: TypeBody::kind: read int failed",::futils::error::Category::lib);
        }
        (*this).kind = static_cast<TypeKind>(tmp_162_);
        if (TypeKind::INT==(*this).kind) {
            if(!std::holds_alternative<union_struct_78>(union_variant_77)) {
                union_variant_77 = union_struct_78();
            }
            if (!::futils::binary::read_num(r,std::get<1>((*this).union_variant_77).size ,true)) {
                return ::futils::error::Error<>("decode: TypeBody::size: read int failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::UINT==(*this).kind) {
            if(!std::holds_alternative<union_struct_79>(union_variant_77)) {
                union_variant_77 = union_struct_79();
            }
            if (!::futils::binary::read_num(r,std::get<2>((*this).union_variant_77).size ,true)) {
                return ::futils::error::Error<>("decode: TypeBody::size: read int failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::FLOAT==(*this).kind) {
            if(!std::holds_alternative<union_struct_80>(union_variant_77)) {
                union_variant_77 = union_struct_80();
            }
            if (!::futils::binary::read_num(r,std::get<3>((*this).union_variant_77).size ,true)) {
                return ::futils::error::Error<>("decode: TypeBody::size: read int failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::BOOL==(*this).kind) {
            if(!std::holds_alternative<union_struct_81>(union_variant_77)) {
                union_variant_77 = union_struct_81();
            }
        }
        else if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_82>(union_variant_77)) {
                union_variant_77 = union_struct_82();
            }
            if (auto err = std::get<5>((*this).union_variant_77).element_type.decode(r)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_77).length.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::VECTOR==(*this).kind) {
            if(!std::holds_alternative<union_struct_83>(union_variant_77)) {
                union_variant_77 = union_struct_83();
            }
            if (auto err = std::get<6>((*this).union_variant_77).element_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_84>(union_variant_77)) {
                union_variant_77 = union_struct_84();
            }
            if (auto err = std::get<7>((*this).union_variant_77).id.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_85>(union_variant_77)) {
                union_variant_77 = union_struct_85();
            }
            if (auto err = std::get<8>((*this).union_variant_77).id.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_86>(union_variant_77)) {
                union_variant_77 = union_struct_86();
            }
            if (auto err = std::get<9>((*this).union_variant_77).id.decode(r)) {
                return err;
            }
            if (auto err = std::get<9>((*this).union_variant_77).base_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_87>(union_variant_77)) {
                union_variant_77 = union_struct_87();
            }
            if (auto err = std::get<10>((*this).union_variant_77).common_type.decode(r)) {
                return err;
            }
            if (auto err = std::get<10>((*this).union_variant_77).members.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_88>(union_variant_77)) {
                union_variant_77 = union_struct_88();
            }
            if (auto err = std::get<11>((*this).union_variant_77).property_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::OPTIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_89>(union_variant_77)) {
                union_variant_77 = union_struct_89();
            }
            if (auto err = std::get<12>((*this).union_variant_77).inner_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::PTR==(*this).kind) {
            if(!std::holds_alternative<union_struct_90>(union_variant_77)) {
                union_variant_77 = union_struct_90();
            }
            if (auto err = std::get<13>((*this).union_variant_77).pointee_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_91>(union_variant_77)) {
                union_variant_77 = union_struct_91();
            }
            if (auto err = std::get<14>((*this).union_variant_77).base_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::FUNCTION==(*this).kind) {
            if(!std::holds_alternative<union_struct_92>(union_variant_77)) {
                union_variant_77 = union_struct_92();
            }
            if (auto err = std::get<15>((*this).union_variant_77).return_type.decode(r)) {
                return err;
            }
            if (auto err = std::get<15>((*this).union_variant_77).params.decode(r)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Type::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Type::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Loc::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).ident.encode(w)) {
            return err;
        }
        if (auto err = (*this).file_id.encode(w)) {
            return err;
        }
        if (auto err = (*this).line.encode(w)) {
            return err;
        }
        if (auto err = (*this).column.encode(w)) {
            return err;
        }
        if (auto err = (*this).start.encode(w)) {
            return err;
        }
        if (auto err = (*this).end.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Loc::decode(::futils::binary::reader& r) {
        if (auto err = (*this).ident.decode(r)) {
            return err;
        }
        if (auto err = (*this).file_id.decode(r)) {
            return err;
        }
        if (auto err = (*this).line.decode(r)) {
            return err;
        }
        if (auto err = (*this).column.decode(r)) {
            return err;
        }
        if (auto err = (*this).start.decode(r)) {
            return err;
        }
        if (auto err = (*this).end.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Identifier::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Identifier::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StringLiteral::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StringLiteral::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> DebugInfo::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len_files.encode(w)) {
            return err;
        }
        auto tmp_163_ = (*this).len_files.value();
        if (tmp_163_!=(*this).files.size()) {
            return ::futils::error::Error<>("encode: DebugInfo::files: dynamic length is not compatible with its length; tmp_163_!=(*this).files.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_164_ : (*this).files) {
            if (auto err = tmp_164_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).len_locs.encode(w)) {
            return err;
        }
        auto tmp_165_ = (*this).len_locs.value();
        if (tmp_165_!=(*this).locs.size()) {
            return ::futils::error::Error<>("encode: DebugInfo::locs: dynamic length is not compatible with its length; tmp_165_!=(*this).locs.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_166_ : (*this).locs) {
            if (auto err = tmp_166_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> DebugInfo::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len_files.decode(r)) {
            return err;
        }
        auto tmp_167_ = (*this).len_files.value();
        (*this).files.clear();
        for (size_t  tmp_169_= 0; tmp_169_<tmp_167_; ++tmp_169_ ) {
            String tmp_168_;
            if (auto err = tmp_168_.decode(r)) {
                return err;
            }
            (*this).files.push_back(std::move(tmp_168_));
        }
        if (auto err = (*this).len_locs.decode(r)) {
            return err;
        }
        auto tmp_170_ = (*this).len_locs.value();
        (*this).locs.clear();
        for (size_t  tmp_172_= 0; tmp_172_<tmp_170_; ++tmp_172_ ) {
            Loc tmp_171_;
            if (auto err = tmp_171_.decode(r)) {
                return err;
            }
            (*this).locs.push_back(std::move(tmp_171_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExtendedBinaryModule::encode(::futils::binary::writer& w) const {
        if (!w.write(::futils::view::rvec("EBMG", 4))) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::magic: write string failed; \"EBMG\"",::futils::error::Category::lib);
        }
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>((*this).version) ,true)) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::version: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).max_id.encode(w)) {
            return err;
        }
        if (auto err = (*this).identifiers_len.encode(w)) {
            return err;
        }
        auto tmp_173_ = (*this).identifiers_len.value();
        if (tmp_173_!=(*this).identifiers.size()) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::identifiers: dynamic length is not compatible with its length; tmp_173_!=(*this).identifiers.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_174_ : (*this).identifiers) {
            if (auto err = tmp_174_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).strings_len.encode(w)) {
            return err;
        }
        auto tmp_175_ = (*this).strings_len.value();
        if (tmp_175_!=(*this).strings.size()) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::strings: dynamic length is not compatible with its length; tmp_175_!=(*this).strings.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_176_ : (*this).strings) {
            if (auto err = tmp_176_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).types_len.encode(w)) {
            return err;
        }
        auto tmp_177_ = (*this).types_len.value();
        if (tmp_177_!=(*this).types.size()) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::types: dynamic length is not compatible with its length; tmp_177_!=(*this).types.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_178_ : (*this).types) {
            if (auto err = tmp_178_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).statements_len.encode(w)) {
            return err;
        }
        auto tmp_179_ = (*this).statements_len.value();
        if (tmp_179_!=(*this).statements.size()) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::statements: dynamic length is not compatible with its length; tmp_179_!=(*this).statements.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_180_ : (*this).statements) {
            if (auto err = tmp_180_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).expressions_len.encode(w)) {
            return err;
        }
        auto tmp_181_ = (*this).expressions_len.value();
        if (tmp_181_!=(*this).expressions.size()) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::expressions: dynamic length is not compatible with its length; tmp_181_!=(*this).expressions.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_182_ : (*this).expressions) {
            if (auto err = tmp_182_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).debug_info.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExtendedBinaryModule::decode(::futils::binary::reader& r) {
        ::futils::view::rvec tmp_183_ = {};
        if (!r.read_direct(tmp_183_, 4)) {
            return ::futils::error::Error<>("decode: ExtendedBinaryModule::magic: read string failed",::futils::error::Category::lib);
        }
        if (tmp_183_ != ::futils::view::rvec("EBMG",4)) {
            return ::futils::error::Error<>("decode: ExtendedBinaryModule::magic: read string failed; not match to \"EBMG\"",::futils::error::Category::lib);
        }
        if (!::futils::binary::read_num(r,(*this).version ,true)) {
            return ::futils::error::Error<>("decode: ExtendedBinaryModule::version: read int failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).max_id.decode(r)) {
            return err;
        }
        if (auto err = (*this).identifiers_len.decode(r)) {
            return err;
        }
        auto tmp_184_ = (*this).identifiers_len.value();
        (*this).identifiers.clear();
        for (size_t  tmp_186_= 0; tmp_186_<tmp_184_; ++tmp_186_ ) {
            Identifier tmp_185_;
            if (auto err = tmp_185_.decode(r)) {
                return err;
            }
            (*this).identifiers.push_back(std::move(tmp_185_));
        }
        if (auto err = (*this).strings_len.decode(r)) {
            return err;
        }
        auto tmp_187_ = (*this).strings_len.value();
        (*this).strings.clear();
        for (size_t  tmp_189_= 0; tmp_189_<tmp_187_; ++tmp_189_ ) {
            StringLiteral tmp_188_;
            if (auto err = tmp_188_.decode(r)) {
                return err;
            }
            (*this).strings.push_back(std::move(tmp_188_));
        }
        if (auto err = (*this).types_len.decode(r)) {
            return err;
        }
        auto tmp_190_ = (*this).types_len.value();
        (*this).types.clear();
        for (size_t  tmp_192_= 0; tmp_192_<tmp_190_; ++tmp_192_ ) {
            Type tmp_191_;
            if (auto err = tmp_191_.decode(r)) {
                return err;
            }
            (*this).types.push_back(std::move(tmp_191_));
        }
        if (auto err = (*this).statements_len.decode(r)) {
            return err;
        }
        auto tmp_193_ = (*this).statements_len.value();
        (*this).statements.clear();
        for (size_t  tmp_195_= 0; tmp_195_<tmp_193_; ++tmp_195_ ) {
            Statement tmp_194_;
            if (auto err = tmp_194_.decode(r)) {
                return err;
            }
            (*this).statements.push_back(std::move(tmp_194_));
        }
        if (auto err = (*this).expressions_len.decode(r)) {
            return err;
        }
        auto tmp_196_ = (*this).expressions_len.value();
        (*this).expressions.clear();
        for (size_t  tmp_198_= 0; tmp_198_<tmp_196_; ++tmp_198_ ) {
            Expression tmp_197_;
            if (auto err = tmp_197_.decode(r)) {
                return err;
            }
            (*this).expressions.push_back(std::move(tmp_197_));
        }
        if (auto err = (*this).debug_info.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
} // namespace ebm

