// Code generated by json2cpp2
#pragma once
#include <cstdint>
#include <vector>
#include <array>
#include <optional>
#include <variant>
#include <string_view>

#include <binary/flags.h>
#include <binary/float.h>
#include <view/iovec.h>
#include <binary/number.h>
#include <error/error.h>
#include <string>
namespace rebgn {
    enum class BinaryOp : std::uint8_t {
        mul = 0,
        div = 1,
        mod = 2,
        left_arithmetic_shift = 3,
        right_arithmetic_shift = 4,
        left_logical_shift = 5,
        right_logical_shift = 6,
        bit_and = 7,
        add = 8,
        sub = 9,
        bit_or = 10,
        bit_xor = 11,
        equal = 12,
        not_equal = 13,
        less = 14,
        less_or_eq = 15,
        grater = 16,
        grater_or_eq = 17,
        logical_and = 18,
        logical_or = 19,
        cond_op1 = 20,
        cond_op2 = 21,
        range_exclusive = 22,
        range_inclusive = 23,
        assign = 24,
        define_assign = 25,
        const_assign = 26,
        add_assign = 27,
        sub_assign = 28,
        mul_assign = 29,
        div_assign = 30,
        mod_assign = 31,
        left_logical_shift_assign = 32,
        right_logical_shift_assign = 33,
        left_arithmetic_shift_assign = 34,
        right_arithmetic_shift_assign = 35,
        bit_and_assign = 36,
        bit_or_assign = 37,
        bit_xor_assign = 38,
        comma = 39,
        in_assign = 40,
    };
    constexpr const char* to_string(BinaryOp e) {
        switch (e) {
            case BinaryOp::mul:
                return "*";
            case BinaryOp::div:
                return "/";
            case BinaryOp::mod:
                return "%";
            case BinaryOp::left_arithmetic_shift:
                return "<<<";
            case BinaryOp::right_arithmetic_shift:
                return ">>>";
            case BinaryOp::left_logical_shift:
                return "<<";
            case BinaryOp::right_logical_shift:
                return ">>";
            case BinaryOp::bit_and:
                return "&";
            case BinaryOp::add:
                return "+";
            case BinaryOp::sub:
                return "-";
            case BinaryOp::bit_or:
                return "|";
            case BinaryOp::bit_xor:
                return "^";
            case BinaryOp::equal:
                return "==";
            case BinaryOp::not_equal:
                return "!=";
            case BinaryOp::less:
                return "<";
            case BinaryOp::less_or_eq:
                return "<=";
            case BinaryOp::grater:
                return ">";
            case BinaryOp::grater_or_eq:
                return ">=";
            case BinaryOp::logical_and:
                return "&&";
            case BinaryOp::logical_or:
                return "||";
            case BinaryOp::cond_op1:
                return "?";
            case BinaryOp::cond_op2:
                return ":";
            case BinaryOp::range_exclusive:
                return "..";
            case BinaryOp::range_inclusive:
                return "..=";
            case BinaryOp::assign:
                return "=";
            case BinaryOp::define_assign:
                return ":=";
            case BinaryOp::const_assign:
                return "::=";
            case BinaryOp::add_assign:
                return "+=";
            case BinaryOp::sub_assign:
                return "-=";
            case BinaryOp::mul_assign:
                return "*=";
            case BinaryOp::div_assign:
                return "/=";
            case BinaryOp::mod_assign:
                return "%=";
            case BinaryOp::left_logical_shift_assign:
                return "<<=";
            case BinaryOp::right_logical_shift_assign:
                return ">>=";
            case BinaryOp::left_arithmetic_shift_assign:
                return "<<<=";
            case BinaryOp::right_arithmetic_shift_assign:
                return ">>>=";
            case BinaryOp::bit_and_assign:
                return "&=";
            case BinaryOp::bit_or_assign:
                return "|=";
            case BinaryOp::bit_xor_assign:
                return "^=";
            case BinaryOp::comma:
                return ",";
            case BinaryOp::in_assign:
                return "in";
        }
        return "";
    }

    constexpr std::optional<BinaryOp> BinaryOp_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "*") {
            return BinaryOp::mul;
        }
        if (str == "/") {
            return BinaryOp::div;
        }
        if (str == "%") {
            return BinaryOp::mod;
        }
        if (str == "<<<") {
            return BinaryOp::left_arithmetic_shift;
        }
        if (str == ">>>") {
            return BinaryOp::right_arithmetic_shift;
        }
        if (str == "<<") {
            return BinaryOp::left_logical_shift;
        }
        if (str == ">>") {
            return BinaryOp::right_logical_shift;
        }
        if (str == "&") {
            return BinaryOp::bit_and;
        }
        if (str == "+") {
            return BinaryOp::add;
        }
        if (str == "-") {
            return BinaryOp::sub;
        }
        if (str == "|") {
            return BinaryOp::bit_or;
        }
        if (str == "^") {
            return BinaryOp::bit_xor;
        }
        if (str == "==") {
            return BinaryOp::equal;
        }
        if (str == "!=") {
            return BinaryOp::not_equal;
        }
        if (str == "<") {
            return BinaryOp::less;
        }
        if (str == "<=") {
            return BinaryOp::less_or_eq;
        }
        if (str == ">") {
            return BinaryOp::grater;
        }
        if (str == ">=") {
            return BinaryOp::grater_or_eq;
        }
        if (str == "&&") {
            return BinaryOp::logical_and;
        }
        if (str == "||") {
            return BinaryOp::logical_or;
        }
        if (str == "?") {
            return BinaryOp::cond_op1;
        }
        if (str == ":") {
            return BinaryOp::cond_op2;
        }
        if (str == "..") {
            return BinaryOp::range_exclusive;
        }
        if (str == "..=") {
            return BinaryOp::range_inclusive;
        }
        if (str == "=") {
            return BinaryOp::assign;
        }
        if (str == ":=") {
            return BinaryOp::define_assign;
        }
        if (str == "::=") {
            return BinaryOp::const_assign;
        }
        if (str == "+=") {
            return BinaryOp::add_assign;
        }
        if (str == "-=") {
            return BinaryOp::sub_assign;
        }
        if (str == "*=") {
            return BinaryOp::mul_assign;
        }
        if (str == "/=") {
            return BinaryOp::div_assign;
        }
        if (str == "%=") {
            return BinaryOp::mod_assign;
        }
        if (str == "<<=") {
            return BinaryOp::left_logical_shift_assign;
        }
        if (str == ">>=") {
            return BinaryOp::right_logical_shift_assign;
        }
        if (str == "<<<=") {
            return BinaryOp::left_arithmetic_shift_assign;
        }
        if (str == ">>>=") {
            return BinaryOp::right_arithmetic_shift_assign;
        }
        if (str == "&=") {
            return BinaryOp::bit_and_assign;
        }
        if (str == "|=") {
            return BinaryOp::bit_or_assign;
        }
        if (str == "^=") {
            return BinaryOp::bit_xor_assign;
        }
        if (str == ",") {
            return BinaryOp::comma;
        }
        if (str == "in") {
            return BinaryOp::in_assign;
        }
        return std::nullopt;
    }
    enum class UnaryOp : std::uint8_t {
        not_ = 0,
        minus_sign = 1,
    };
    constexpr const char* to_string(UnaryOp e) {
        switch (e) {
            case UnaryOp::not_:
                return "!";
            case UnaryOp::minus_sign:
                return "-";
        }
        return "";
    }

    constexpr std::optional<UnaryOp> UnaryOp_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "!") {
            return UnaryOp::not_;
        }
        if (str == "-") {
            return UnaryOp::minus_sign;
        }
        return std::nullopt;
    }
    enum class Endian : std::uint8_t {
        unspec = 0,
        big = 1,
        little = 2,
    };
    constexpr const char* to_string(Endian e) {
        switch (e) {
            case Endian::unspec:
                return "unspec";
            case Endian::big:
                return "big";
            case Endian::little:
                return "little";
        }
        return "";
    }

    constexpr std::optional<Endian> Endian_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "unspec") {
            return Endian::unspec;
        }
        if (str == "big") {
            return Endian::big;
        }
        if (str == "little") {
            return Endian::little;
        }
        return std::nullopt;
    }
    enum class BitOrder : std::uint8_t {
        unspec = 0,
        msb = 1,
        lsb = 2,
    };
    constexpr const char* to_string(BitOrder e) {
        switch (e) {
            case BitOrder::unspec:
                return "unspec";
            case BitOrder::msb:
                return "msb";
            case BitOrder::lsb:
                return "lsb";
        }
        return "";
    }

    constexpr std::optional<BitOrder> BitOrder_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "unspec") {
            return BitOrder::unspec;
        }
        if (str == "msb") {
            return BitOrder::msb;
        }
        if (str == "lsb") {
            return BitOrder::lsb;
        }
        return std::nullopt;
    }
    enum class AbstractOp : std::uint8_t {
        METADATA = 0,
        IMPORT = 1,
        SPECIFY_ENDIAN = 2,
        SPECIFY_BIT_ORDER = 3,
        SPECIFY_ALIGNMENT = 4,
        SPECIFY_LENGTH = 5,
        SPECIFY_STORAGE_TYPE = 6,
        SPECIFY_FIXED_VALUE = 7,
        DEFINE_PROGRAM = 8,
        END_PROGRAM = 9,
        DECLARE_PROGRAM = 10,
        DEFINE_FORMAT = 11,
        END_FORMAT = 12,
        DECLARE_FORMAT = 13,
        DEFINE_FIELD = 14,
        END_FIELD = 15,
        DECLARE_FIELD = 16,
        CONDITIONAL_FIELD = 17,
        DEFINE_PROPERTY = 18,
        END_PROPERTY = 19,
        DECLARE_PROPERTY = 20,
        DEFINE_PARAMETER = 21,
        END_PARAMETER = 22,
        DECLARE_PARAMETER = 23,
        DEFINE_FUNCTION = 24,
        END_FUNCTION = 25,
        DECLARE_FUNCTION = 26,
        DEFINE_ENUM = 27,
        END_ENUM = 28,
        DECLARE_ENUM = 29,
        DEFINE_ENUM_MEMBER = 30,
        END_ENUM_MEMBER = 31,
        DECLARE_ENUM_MEMBER = 32,
        DEFINE_UNION = 33,
        END_UNION = 34,
        DECLARE_UNION = 35,
        DEFINE_UNION_MEMBER = 36,
        END_UNION_MEMBER = 37,
        DECLARE_UNION_MEMBER = 38,
        DEFINE_STATE = 39,
        END_STATE = 40,
        DECLARE_STATE = 41,
        DEFINE_BIT_FIELD = 42,
        END_BIT_FIELD = 43,
        DECLARE_BIT_FIELD = 44,
        DEFINE_PACKED_OPERATION = 45,
        END_PACKED_OPERATION = 46,
        DECLARE_PACKED_OPERATION = 47,
        DEFINE_ENCODER = 48,
        DEFINE_DECODER = 49,
        ENCODE_INT = 50,
        DECODE_INT = 51,
        ENCODE_INT_VECTOR = 52,
        DECODE_INT_VECTOR = 53,
        DECODE_INT_VECTOR_UNTIL_EOF = 54,
        PEEK_INT_VECTOR = 55,
        BACKWARD = 56,
        BYTE_OFFSET = 57,
        BIT_OFFSET = 58,
        REMAIN_BYTES = 59,
        CAN_READ = 60,
        CALL_ENCODE = 61,
        CALL_DECODE = 62,
        STATIC_CAST = 63,
        BIT_CAST = 64,
        CALL_CAST = 65,
        LOOP_INFINITE = 66,
        LOOP_CONDITION = 67,
        CONTINUE = 68,
        BREAK = 69,
        END_LOOP = 70,
        IF = 71,
        ELIF = 72,
        ELSE = 73,
        END_IF = 74,
        MATCH = 75,
        EXHAUSTIVE_MATCH = 76,
        CASE = 77,
        END_CASE = 78,
        DEFAULT_CASE = 79,
        END_MATCH = 80,
        DEFINE_VARIABLE = 81,
        DEFINE_CONSTANT = 82,
        BINARY = 83,
        UNARY = 84,
        ASSIGN = 85,
        SHORT_CIRCUIT = 86,
        ASSERT = 87,
        EXPLICIT_ERROR = 88,
        ACCESS = 89,
        INDEX = 90,
        APPEND = 91,
        INC = 92,
        DEC = 93,
        NEG = 94,
        CALL = 95,
        RET = 96,
        IMMEDIATE_TRUE = 97,
        IMMEDIATE_FALSE = 98,
        IMMEDIATE_INT = 99,
        IMMEDIATE_INT64 = 100,
        IMMEDIATE_CHAR = 101,
        IMMEDIATE_STRING = 102,
        IMMEDIATE_TYPE = 103,
        IDENT_REF = 104,
        NEW_OBJECT = 105,
        SWITCH_UNION = 106,
        ENCODER_PARAMETER = 107,
        DECODER_PARAMETER = 108,
        STATE_VARIABLE_PARAMETER = 109,
        EVAL_EXPR = 110,
        ARRAY_SIZE = 111,
        BEGIN_ENCODE_SUB_RANGE = 112,
        END_ENCODE_SUB_RANGE = 113,
        BEGIN_DECODE_SUB_RANGE = 114,
        END_DECODE_SUB_RANGE = 115,
    };
    constexpr const char* to_string(AbstractOp e) {
        switch (e) {
            case AbstractOp::METADATA:
                return "METADATA";
            case AbstractOp::IMPORT:
                return "IMPORT";
            case AbstractOp::SPECIFY_ENDIAN:
                return "SPECIFY_ENDIAN";
            case AbstractOp::SPECIFY_BIT_ORDER:
                return "SPECIFY_BIT_ORDER";
            case AbstractOp::SPECIFY_ALIGNMENT:
                return "SPECIFY_ALIGNMENT";
            case AbstractOp::SPECIFY_LENGTH:
                return "SPECIFY_LENGTH";
            case AbstractOp::SPECIFY_STORAGE_TYPE:
                return "SPECIFY_STORAGE_TYPE";
            case AbstractOp::SPECIFY_FIXED_VALUE:
                return "SPECIFY_FIXED_VALUE";
            case AbstractOp::DEFINE_PROGRAM:
                return "DEFINE_PROGRAM";
            case AbstractOp::END_PROGRAM:
                return "END_PROGRAM";
            case AbstractOp::DECLARE_PROGRAM:
                return "DECLARE_PROGRAM";
            case AbstractOp::DEFINE_FORMAT:
                return "DEFINE_FORMAT";
            case AbstractOp::END_FORMAT:
                return "END_FORMAT";
            case AbstractOp::DECLARE_FORMAT:
                return "DECLARE_FORMAT";
            case AbstractOp::DEFINE_FIELD:
                return "DEFINE_FIELD";
            case AbstractOp::END_FIELD:
                return "END_FIELD";
            case AbstractOp::DECLARE_FIELD:
                return "DECLARE_FIELD";
            case AbstractOp::CONDITIONAL_FIELD:
                return "CONDITIONAL_FIELD";
            case AbstractOp::DEFINE_PROPERTY:
                return "DEFINE_PROPERTY";
            case AbstractOp::END_PROPERTY:
                return "END_PROPERTY";
            case AbstractOp::DECLARE_PROPERTY:
                return "DECLARE_PROPERTY";
            case AbstractOp::DEFINE_PARAMETER:
                return "DEFINE_PARAMETER";
            case AbstractOp::END_PARAMETER:
                return "END_PARAMETER";
            case AbstractOp::DECLARE_PARAMETER:
                return "DECLARE_PARAMETER";
            case AbstractOp::DEFINE_FUNCTION:
                return "DEFINE_FUNCTION";
            case AbstractOp::END_FUNCTION:
                return "END_FUNCTION";
            case AbstractOp::DECLARE_FUNCTION:
                return "DECLARE_FUNCTION";
            case AbstractOp::DEFINE_ENUM:
                return "DEFINE_ENUM";
            case AbstractOp::END_ENUM:
                return "END_ENUM";
            case AbstractOp::DECLARE_ENUM:
                return "DECLARE_ENUM";
            case AbstractOp::DEFINE_ENUM_MEMBER:
                return "DEFINE_ENUM_MEMBER";
            case AbstractOp::END_ENUM_MEMBER:
                return "END_ENUM_MEMBER";
            case AbstractOp::DECLARE_ENUM_MEMBER:
                return "DECLARE_ENUM_MEMBER";
            case AbstractOp::DEFINE_UNION:
                return "DEFINE_UNION";
            case AbstractOp::END_UNION:
                return "END_UNION";
            case AbstractOp::DECLARE_UNION:
                return "DECLARE_UNION";
            case AbstractOp::DEFINE_UNION_MEMBER:
                return "DEFINE_UNION_MEMBER";
            case AbstractOp::END_UNION_MEMBER:
                return "END_UNION_MEMBER";
            case AbstractOp::DECLARE_UNION_MEMBER:
                return "DECLARE_UNION_MEMBER";
            case AbstractOp::DEFINE_STATE:
                return "DEFINE_STATE";
            case AbstractOp::END_STATE:
                return "END_STATE";
            case AbstractOp::DECLARE_STATE:
                return "DECLARE_STATE";
            case AbstractOp::DEFINE_BIT_FIELD:
                return "DEFINE_BIT_FIELD";
            case AbstractOp::END_BIT_FIELD:
                return "END_BIT_FIELD";
            case AbstractOp::DECLARE_BIT_FIELD:
                return "DECLARE_BIT_FIELD";
            case AbstractOp::DEFINE_PACKED_OPERATION:
                return "DEFINE_PACKED_OPERATION";
            case AbstractOp::END_PACKED_OPERATION:
                return "END_PACKED_OPERATION";
            case AbstractOp::DECLARE_PACKED_OPERATION:
                return "DECLARE_PACKED_OPERATION";
            case AbstractOp::DEFINE_ENCODER:
                return "DEFINE_ENCODER";
            case AbstractOp::DEFINE_DECODER:
                return "DEFINE_DECODER";
            case AbstractOp::ENCODE_INT:
                return "ENCODE_INT";
            case AbstractOp::DECODE_INT:
                return "DECODE_INT";
            case AbstractOp::ENCODE_INT_VECTOR:
                return "ENCODE_INT_VECTOR";
            case AbstractOp::DECODE_INT_VECTOR:
                return "DECODE_INT_VECTOR";
            case AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF:
                return "DECODE_INT_VECTOR_UNTIL_EOF";
            case AbstractOp::PEEK_INT_VECTOR:
                return "PEEK_INT_VECTOR";
            case AbstractOp::BACKWARD:
                return "BACKWARD";
            case AbstractOp::BYTE_OFFSET:
                return "BYTE_OFFSET";
            case AbstractOp::BIT_OFFSET:
                return "BIT_OFFSET";
            case AbstractOp::REMAIN_BYTES:
                return "REMAIN_BYTES";
            case AbstractOp::CAN_READ:
                return "CAN_READ";
            case AbstractOp::CALL_ENCODE:
                return "CALL_ENCODE";
            case AbstractOp::CALL_DECODE:
                return "CALL_DECODE";
            case AbstractOp::STATIC_CAST:
                return "STATIC_CAST";
            case AbstractOp::BIT_CAST:
                return "BIT_CAST";
            case AbstractOp::CALL_CAST:
                return "CALL_CAST";
            case AbstractOp::LOOP_INFINITE:
                return "LOOP_INFINITE";
            case AbstractOp::LOOP_CONDITION:
                return "LOOP_CONDITION";
            case AbstractOp::CONTINUE:
                return "CONTINUE";
            case AbstractOp::BREAK:
                return "BREAK";
            case AbstractOp::END_LOOP:
                return "END_LOOP";
            case AbstractOp::IF:
                return "IF";
            case AbstractOp::ELIF:
                return "ELIF";
            case AbstractOp::ELSE:
                return "ELSE";
            case AbstractOp::END_IF:
                return "END_IF";
            case AbstractOp::MATCH:
                return "MATCH";
            case AbstractOp::EXHAUSTIVE_MATCH:
                return "EXHAUSTIVE_MATCH";
            case AbstractOp::CASE:
                return "CASE";
            case AbstractOp::END_CASE:
                return "END_CASE";
            case AbstractOp::DEFAULT_CASE:
                return "DEFAULT_CASE";
            case AbstractOp::END_MATCH:
                return "END_MATCH";
            case AbstractOp::DEFINE_VARIABLE:
                return "DEFINE_VARIABLE";
            case AbstractOp::DEFINE_CONSTANT:
                return "DEFINE_CONSTANT";
            case AbstractOp::BINARY:
                return "BINARY";
            case AbstractOp::UNARY:
                return "UNARY";
            case AbstractOp::ASSIGN:
                return "ASSIGN";
            case AbstractOp::SHORT_CIRCUIT:
                return "SHORT_CIRCUIT";
            case AbstractOp::ASSERT:
                return "ASSERT";
            case AbstractOp::EXPLICIT_ERROR:
                return "EXPLICIT_ERROR";
            case AbstractOp::ACCESS:
                return "ACCESS";
            case AbstractOp::INDEX:
                return "INDEX";
            case AbstractOp::APPEND:
                return "APPEND";
            case AbstractOp::INC:
                return "INC";
            case AbstractOp::DEC:
                return "DEC";
            case AbstractOp::NEG:
                return "NEG";
            case AbstractOp::CALL:
                return "CALL";
            case AbstractOp::RET:
                return "RET";
            case AbstractOp::IMMEDIATE_TRUE:
                return "IMMEDIATE_TRUE";
            case AbstractOp::IMMEDIATE_FALSE:
                return "IMMEDIATE_FALSE";
            case AbstractOp::IMMEDIATE_INT:
                return "IMMEDIATE_INT";
            case AbstractOp::IMMEDIATE_INT64:
                return "IMMEDIATE_INT64";
            case AbstractOp::IMMEDIATE_CHAR:
                return "IMMEDIATE_CHAR";
            case AbstractOp::IMMEDIATE_STRING:
                return "IMMEDIATE_STRING";
            case AbstractOp::IMMEDIATE_TYPE:
                return "IMMEDIATE_TYPE";
            case AbstractOp::IDENT_REF:
                return "IDENT_REF";
            case AbstractOp::NEW_OBJECT:
                return "NEW_OBJECT";
            case AbstractOp::SWITCH_UNION:
                return "SWITCH_UNION";
            case AbstractOp::ENCODER_PARAMETER:
                return "ENCODER_PARAMETER";
            case AbstractOp::DECODER_PARAMETER:
                return "DECODER_PARAMETER";
            case AbstractOp::STATE_VARIABLE_PARAMETER:
                return "STATE_VARIABLE_PARAMETER";
            case AbstractOp::EVAL_EXPR:
                return "EVAL_EXPR";
            case AbstractOp::ARRAY_SIZE:
                return "ARRAY_SIZE";
            case AbstractOp::BEGIN_ENCODE_SUB_RANGE:
                return "BEGIN_ENCODE_SUB_RANGE";
            case AbstractOp::END_ENCODE_SUB_RANGE:
                return "END_ENCODE_SUB_RANGE";
            case AbstractOp::BEGIN_DECODE_SUB_RANGE:
                return "BEGIN_DECODE_SUB_RANGE";
            case AbstractOp::END_DECODE_SUB_RANGE:
                return "END_DECODE_SUB_RANGE";
        }
        return "";
    }

    constexpr std::optional<AbstractOp> AbstractOp_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "METADATA") {
            return AbstractOp::METADATA;
        }
        if (str == "IMPORT") {
            return AbstractOp::IMPORT;
        }
        if (str == "SPECIFY_ENDIAN") {
            return AbstractOp::SPECIFY_ENDIAN;
        }
        if (str == "SPECIFY_BIT_ORDER") {
            return AbstractOp::SPECIFY_BIT_ORDER;
        }
        if (str == "SPECIFY_ALIGNMENT") {
            return AbstractOp::SPECIFY_ALIGNMENT;
        }
        if (str == "SPECIFY_LENGTH") {
            return AbstractOp::SPECIFY_LENGTH;
        }
        if (str == "SPECIFY_STORAGE_TYPE") {
            return AbstractOp::SPECIFY_STORAGE_TYPE;
        }
        if (str == "SPECIFY_FIXED_VALUE") {
            return AbstractOp::SPECIFY_FIXED_VALUE;
        }
        if (str == "DEFINE_PROGRAM") {
            return AbstractOp::DEFINE_PROGRAM;
        }
        if (str == "END_PROGRAM") {
            return AbstractOp::END_PROGRAM;
        }
        if (str == "DECLARE_PROGRAM") {
            return AbstractOp::DECLARE_PROGRAM;
        }
        if (str == "DEFINE_FORMAT") {
            return AbstractOp::DEFINE_FORMAT;
        }
        if (str == "END_FORMAT") {
            return AbstractOp::END_FORMAT;
        }
        if (str == "DECLARE_FORMAT") {
            return AbstractOp::DECLARE_FORMAT;
        }
        if (str == "DEFINE_FIELD") {
            return AbstractOp::DEFINE_FIELD;
        }
        if (str == "END_FIELD") {
            return AbstractOp::END_FIELD;
        }
        if (str == "DECLARE_FIELD") {
            return AbstractOp::DECLARE_FIELD;
        }
        if (str == "CONDITIONAL_FIELD") {
            return AbstractOp::CONDITIONAL_FIELD;
        }
        if (str == "DEFINE_PROPERTY") {
            return AbstractOp::DEFINE_PROPERTY;
        }
        if (str == "END_PROPERTY") {
            return AbstractOp::END_PROPERTY;
        }
        if (str == "DECLARE_PROPERTY") {
            return AbstractOp::DECLARE_PROPERTY;
        }
        if (str == "DEFINE_PARAMETER") {
            return AbstractOp::DEFINE_PARAMETER;
        }
        if (str == "END_PARAMETER") {
            return AbstractOp::END_PARAMETER;
        }
        if (str == "DECLARE_PARAMETER") {
            return AbstractOp::DECLARE_PARAMETER;
        }
        if (str == "DEFINE_FUNCTION") {
            return AbstractOp::DEFINE_FUNCTION;
        }
        if (str == "END_FUNCTION") {
            return AbstractOp::END_FUNCTION;
        }
        if (str == "DECLARE_FUNCTION") {
            return AbstractOp::DECLARE_FUNCTION;
        }
        if (str == "DEFINE_ENUM") {
            return AbstractOp::DEFINE_ENUM;
        }
        if (str == "END_ENUM") {
            return AbstractOp::END_ENUM;
        }
        if (str == "DECLARE_ENUM") {
            return AbstractOp::DECLARE_ENUM;
        }
        if (str == "DEFINE_ENUM_MEMBER") {
            return AbstractOp::DEFINE_ENUM_MEMBER;
        }
        if (str == "END_ENUM_MEMBER") {
            return AbstractOp::END_ENUM_MEMBER;
        }
        if (str == "DECLARE_ENUM_MEMBER") {
            return AbstractOp::DECLARE_ENUM_MEMBER;
        }
        if (str == "DEFINE_UNION") {
            return AbstractOp::DEFINE_UNION;
        }
        if (str == "END_UNION") {
            return AbstractOp::END_UNION;
        }
        if (str == "DECLARE_UNION") {
            return AbstractOp::DECLARE_UNION;
        }
        if (str == "DEFINE_UNION_MEMBER") {
            return AbstractOp::DEFINE_UNION_MEMBER;
        }
        if (str == "END_UNION_MEMBER") {
            return AbstractOp::END_UNION_MEMBER;
        }
        if (str == "DECLARE_UNION_MEMBER") {
            return AbstractOp::DECLARE_UNION_MEMBER;
        }
        if (str == "DEFINE_STATE") {
            return AbstractOp::DEFINE_STATE;
        }
        if (str == "END_STATE") {
            return AbstractOp::END_STATE;
        }
        if (str == "DECLARE_STATE") {
            return AbstractOp::DECLARE_STATE;
        }
        if (str == "DEFINE_BIT_FIELD") {
            return AbstractOp::DEFINE_BIT_FIELD;
        }
        if (str == "END_BIT_FIELD") {
            return AbstractOp::END_BIT_FIELD;
        }
        if (str == "DECLARE_BIT_FIELD") {
            return AbstractOp::DECLARE_BIT_FIELD;
        }
        if (str == "DEFINE_PACKED_OPERATION") {
            return AbstractOp::DEFINE_PACKED_OPERATION;
        }
        if (str == "END_PACKED_OPERATION") {
            return AbstractOp::END_PACKED_OPERATION;
        }
        if (str == "DECLARE_PACKED_OPERATION") {
            return AbstractOp::DECLARE_PACKED_OPERATION;
        }
        if (str == "DEFINE_ENCODER") {
            return AbstractOp::DEFINE_ENCODER;
        }
        if (str == "DEFINE_DECODER") {
            return AbstractOp::DEFINE_DECODER;
        }
        if (str == "ENCODE_INT") {
            return AbstractOp::ENCODE_INT;
        }
        if (str == "DECODE_INT") {
            return AbstractOp::DECODE_INT;
        }
        if (str == "ENCODE_INT_VECTOR") {
            return AbstractOp::ENCODE_INT_VECTOR;
        }
        if (str == "DECODE_INT_VECTOR") {
            return AbstractOp::DECODE_INT_VECTOR;
        }
        if (str == "DECODE_INT_VECTOR_UNTIL_EOF") {
            return AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF;
        }
        if (str == "PEEK_INT_VECTOR") {
            return AbstractOp::PEEK_INT_VECTOR;
        }
        if (str == "BACKWARD") {
            return AbstractOp::BACKWARD;
        }
        if (str == "BYTE_OFFSET") {
            return AbstractOp::BYTE_OFFSET;
        }
        if (str == "BIT_OFFSET") {
            return AbstractOp::BIT_OFFSET;
        }
        if (str == "REMAIN_BYTES") {
            return AbstractOp::REMAIN_BYTES;
        }
        if (str == "CAN_READ") {
            return AbstractOp::CAN_READ;
        }
        if (str == "CALL_ENCODE") {
            return AbstractOp::CALL_ENCODE;
        }
        if (str == "CALL_DECODE") {
            return AbstractOp::CALL_DECODE;
        }
        if (str == "STATIC_CAST") {
            return AbstractOp::STATIC_CAST;
        }
        if (str == "BIT_CAST") {
            return AbstractOp::BIT_CAST;
        }
        if (str == "CALL_CAST") {
            return AbstractOp::CALL_CAST;
        }
        if (str == "LOOP_INFINITE") {
            return AbstractOp::LOOP_INFINITE;
        }
        if (str == "LOOP_CONDITION") {
            return AbstractOp::LOOP_CONDITION;
        }
        if (str == "CONTINUE") {
            return AbstractOp::CONTINUE;
        }
        if (str == "BREAK") {
            return AbstractOp::BREAK;
        }
        if (str == "END_LOOP") {
            return AbstractOp::END_LOOP;
        }
        if (str == "IF") {
            return AbstractOp::IF;
        }
        if (str == "ELIF") {
            return AbstractOp::ELIF;
        }
        if (str == "ELSE") {
            return AbstractOp::ELSE;
        }
        if (str == "END_IF") {
            return AbstractOp::END_IF;
        }
        if (str == "MATCH") {
            return AbstractOp::MATCH;
        }
        if (str == "EXHAUSTIVE_MATCH") {
            return AbstractOp::EXHAUSTIVE_MATCH;
        }
        if (str == "CASE") {
            return AbstractOp::CASE;
        }
        if (str == "END_CASE") {
            return AbstractOp::END_CASE;
        }
        if (str == "DEFAULT_CASE") {
            return AbstractOp::DEFAULT_CASE;
        }
        if (str == "END_MATCH") {
            return AbstractOp::END_MATCH;
        }
        if (str == "DEFINE_VARIABLE") {
            return AbstractOp::DEFINE_VARIABLE;
        }
        if (str == "DEFINE_CONSTANT") {
            return AbstractOp::DEFINE_CONSTANT;
        }
        if (str == "BINARY") {
            return AbstractOp::BINARY;
        }
        if (str == "UNARY") {
            return AbstractOp::UNARY;
        }
        if (str == "ASSIGN") {
            return AbstractOp::ASSIGN;
        }
        if (str == "SHORT_CIRCUIT") {
            return AbstractOp::SHORT_CIRCUIT;
        }
        if (str == "ASSERT") {
            return AbstractOp::ASSERT;
        }
        if (str == "EXPLICIT_ERROR") {
            return AbstractOp::EXPLICIT_ERROR;
        }
        if (str == "ACCESS") {
            return AbstractOp::ACCESS;
        }
        if (str == "INDEX") {
            return AbstractOp::INDEX;
        }
        if (str == "APPEND") {
            return AbstractOp::APPEND;
        }
        if (str == "INC") {
            return AbstractOp::INC;
        }
        if (str == "DEC") {
            return AbstractOp::DEC;
        }
        if (str == "NEG") {
            return AbstractOp::NEG;
        }
        if (str == "CALL") {
            return AbstractOp::CALL;
        }
        if (str == "RET") {
            return AbstractOp::RET;
        }
        if (str == "IMMEDIATE_TRUE") {
            return AbstractOp::IMMEDIATE_TRUE;
        }
        if (str == "IMMEDIATE_FALSE") {
            return AbstractOp::IMMEDIATE_FALSE;
        }
        if (str == "IMMEDIATE_INT") {
            return AbstractOp::IMMEDIATE_INT;
        }
        if (str == "IMMEDIATE_INT64") {
            return AbstractOp::IMMEDIATE_INT64;
        }
        if (str == "IMMEDIATE_CHAR") {
            return AbstractOp::IMMEDIATE_CHAR;
        }
        if (str == "IMMEDIATE_STRING") {
            return AbstractOp::IMMEDIATE_STRING;
        }
        if (str == "IMMEDIATE_TYPE") {
            return AbstractOp::IMMEDIATE_TYPE;
        }
        if (str == "IDENT_REF") {
            return AbstractOp::IDENT_REF;
        }
        if (str == "NEW_OBJECT") {
            return AbstractOp::NEW_OBJECT;
        }
        if (str == "SWITCH_UNION") {
            return AbstractOp::SWITCH_UNION;
        }
        if (str == "ENCODER_PARAMETER") {
            return AbstractOp::ENCODER_PARAMETER;
        }
        if (str == "DECODER_PARAMETER") {
            return AbstractOp::DECODER_PARAMETER;
        }
        if (str == "STATE_VARIABLE_PARAMETER") {
            return AbstractOp::STATE_VARIABLE_PARAMETER;
        }
        if (str == "EVAL_EXPR") {
            return AbstractOp::EVAL_EXPR;
        }
        if (str == "ARRAY_SIZE") {
            return AbstractOp::ARRAY_SIZE;
        }
        if (str == "BEGIN_ENCODE_SUB_RANGE") {
            return AbstractOp::BEGIN_ENCODE_SUB_RANGE;
        }
        if (str == "END_ENCODE_SUB_RANGE") {
            return AbstractOp::END_ENCODE_SUB_RANGE;
        }
        if (str == "BEGIN_DECODE_SUB_RANGE") {
            return AbstractOp::BEGIN_DECODE_SUB_RANGE;
        }
        if (str == "END_DECODE_SUB_RANGE") {
            return AbstractOp::END_DECODE_SUB_RANGE;
        }
        return std::nullopt;
    }
    struct BMContext {
        Endian global_endian{};
        BitOrder global_bit_order{};
        bool has_dynamic_endian = false;
        bool has_dynamic_bit_order = false;
        bool inner_bit_operations = false;
        std::uint64_t bit_offset = 0;
    };
    enum class StorageType : std::uint8_t {
        INT = 0,
        UINT = 1,
        FLOAT = 2,
        STRUCT_REF = 3,
        RECURSIVE_STRUCT_REF = 4,
        BYTE_VECTOR = 5,
        BOOL = 6,
        ENUM = 7,
        ARRAY = 8,
        VECTOR = 9,
        VARIANT = 10,
        CODER_RETURN = 11,
    };
    constexpr const char* to_string(StorageType e) {
        switch (e) {
            case StorageType::INT:
                return "INT";
            case StorageType::UINT:
                return "UINT";
            case StorageType::FLOAT:
                return "FLOAT";
            case StorageType::STRUCT_REF:
                return "STRUCT_REF";
            case StorageType::RECURSIVE_STRUCT_REF:
                return "RECURSIVE_STRUCT_REF";
            case StorageType::BYTE_VECTOR:
                return "BYTE_VECTOR";
            case StorageType::BOOL:
                return "BOOL";
            case StorageType::ENUM:
                return "ENUM";
            case StorageType::ARRAY:
                return "ARRAY";
            case StorageType::VECTOR:
                return "VECTOR";
            case StorageType::VARIANT:
                return "VARIANT";
            case StorageType::CODER_RETURN:
                return "CODER_RETURN";
        }
        return "";
    }

    constexpr std::optional<StorageType> StorageType_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "INT") {
            return StorageType::INT;
        }
        if (str == "UINT") {
            return StorageType::UINT;
        }
        if (str == "FLOAT") {
            return StorageType::FLOAT;
        }
        if (str == "STRUCT_REF") {
            return StorageType::STRUCT_REF;
        }
        if (str == "RECURSIVE_STRUCT_REF") {
            return StorageType::RECURSIVE_STRUCT_REF;
        }
        if (str == "BYTE_VECTOR") {
            return StorageType::BYTE_VECTOR;
        }
        if (str == "BOOL") {
            return StorageType::BOOL;
        }
        if (str == "ENUM") {
            return StorageType::ENUM;
        }
        if (str == "ARRAY") {
            return StorageType::ARRAY;
        }
        if (str == "VECTOR") {
            return StorageType::VECTOR;
        }
        if (str == "VARIANT") {
            return StorageType::VARIANT;
        }
        if (str == "CODER_RETURN") {
            return StorageType::CODER_RETURN;
        }
        return std::nullopt;
    }
    struct Varint;
    struct Range;
    struct String;
    struct IdentIndex;
    struct Storage;
    struct Metadata;
    struct Param;
    struct RangePacked;
    struct StringRef;
    struct Storages;
    struct StringRefs;
    struct IdentIndexs;
    struct Ranges;
    struct IdentRange;
    struct IdentRanges;
    struct Code;
    struct BinaryModule;
    struct Varint {
        ::futils::binary::flags_t<std::uint64_t, 2, 62> flags_1_;
        bits_flag_alias_method(flags_1_, 0, prefix);
        bits_flag_alias_method(flags_1_, 1, value);
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 0;
    };
    struct Range {
        std::uint64_t start = 0;
        std::uint64_t end = 0;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 16;
    };
    struct String {
        Varint length;
        std::string data;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct IdentIndex {
        Varint ident;
        Varint index;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct Storage {
        StorageType type{};
        struct union_struct_4 {
            Varint size;
        };
        struct union_struct_5 {
            Varint size;
        };
        struct union_struct_6 {
            Varint size;
        };
        struct union_struct_7 {
            Varint size;
            Varint ref;
        };
        struct union_struct_8 {
            Varint ref;
        };
        struct union_struct_9 {
        };
        struct union_struct_10 {
            Varint ref;
        };
        struct union_struct_11 {
            Varint size;
        };
        struct union_struct_12 {
            Varint ref;
            Varint size;
        };
        std::variant<std::monostate, union_struct_4, union_struct_5, union_struct_6, union_struct_7, union_struct_8, union_struct_9, union_struct_10, union_struct_11, union_struct_12> union_variant_3;
        std::optional<Varint> ref() const;
        bool ref(Varint&& v);
        bool ref(const Varint& v);
        std::optional<Varint> size() const;
        bool size(Varint&& v);
        bool size(const Varint& v);
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 1;
    };
    struct Metadata {
        Varint name;
        Varint len_exprs;
        std::vector<Varint> expr_refs;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct Param {
        Varint len_exprs;
        std::vector<Varint> expr_refs;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct RangePacked {
        Varint start;
        Varint end;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct StringRef {
        Varint code;
        String string;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct Storages {
        Varint length;
        std::vector<Storage> storages;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct StringRefs {
        Varint refs_length;
        std::vector<StringRef> refs;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct IdentIndexs {
        Varint refs_length;
        std::vector<IdentIndex> refs;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct Ranges {
        Varint length;
        std::vector<RangePacked> ranges;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct IdentRange {
        Varint ident;
        RangePacked range;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct IdentRanges {
        Varint length;
        std::vector<IdentRange> ranges;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
    };
    struct Code {
        AbstractOp op{};
        struct union_struct_15 {
            Metadata metadata;
        };
        struct union_struct_16 {
            Varint ident;
        };
        struct union_struct_17 {
            Varint ident;
            Varint ref;
        };
        struct union_struct_18 {
            Varint ident;
            Varint int_value;
        };
        struct union_struct_19 {
            Varint ident;
            Varint int_value;
        };
        struct union_struct_20 {
            Varint ref;
        };
        struct union_struct_21 {
            Varint ident;
            std::uint64_t int_value64 = 0;
        };
        struct union_struct_22 {
            Varint ident;
        };
        struct union_struct_23 {
            Varint ident;
        };
        struct union_struct_24 {
            Varint ident;
        };
        struct union_struct_25 {
            Varint ident;
            Storages storage;
        };
        struct union_struct_26 {
            Varint ref;
        };
        struct union_struct_27 {
            Varint ident;
        };
        struct union_struct_28 {
            Varint ident;
        };
        struct union_struct_29 {
            Varint ident;
            Varint belong;
        };
        struct union_struct_30 {
            Varint ident;
            Varint belong;
        };
        struct union_struct_31 {
            Varint ident;
        };
        struct union_struct_32 {
            Varint ident;
        };
        struct union_struct_33 {
            Varint ident;
            Varint belong;
        };
        struct union_struct_34 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_35 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_36 {
            Varint ident;
            Varint belong;
        };
        struct union_struct_37 {
            Varint ident;
            Varint ref;
        };
        struct union_struct_38 {
            Varint ident;
            Varint belong;
        };
        struct union_struct_39 {
            Varint ident;
            Varint belong;
        };
        struct union_struct_40 {
            Storages storage;
        };
        struct union_struct_41 {
            Varint ident;
            BinaryOp bop{};
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_42 {
            Varint ident;
            UnaryOp uop{};
            Varint ref;
        };
        struct union_struct_43 {
            Varint ref;
        };
        struct union_struct_44 {
            Varint ident;
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_45 {
            Varint ident;
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_46 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_47 {
            Varint ref;
        };
        struct union_struct_48 {
            Varint ref;
            Endian endian{};
            Varint bit_size;
        };
        struct union_struct_49 {
            Varint left_ref;
            Varint right_ref;
            Endian endian{};
            Varint bit_size;
        };
        struct union_struct_50 {
            Varint left_ref;
            Varint right_ref;
            Endian endian{};
            Varint bit_size;
        };
        struct union_struct_51 {
            Varint ref;
            Endian endian{};
            Varint bit_size;
        };
        struct union_struct_52 {
            Varint left_ref;
            Varint right_ref;
            Endian endian{};
            Varint bit_size;
        };
        struct union_struct_53 {
            Varint ref;
            Endian endian{};
            Varint bit_size;
        };
        struct union_struct_54 {
            Varint ident;
            Storages storage;
            Varint ref;
        };
        struct union_struct_55 {
            Varint ident;
            Storages storage;
            Param param;
        };
        struct union_struct_56 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_57 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_58 {
            Varint ref;
        };
        struct union_struct_59 {
            Varint ref;
        };
        struct union_struct_60 {
            Varint ref;
        };
        struct union_struct_61 {
            Varint ident;
            Storages storage;
            Varint ref;
        };
        struct union_struct_62 {
            Varint ident;
            Storages storage;
        };
        struct union_struct_63 {
            Varint ref;
        };
        struct union_struct_64 {
            Varint ref;
        };
        struct union_struct_65 {
            Varint ref;
        };
        struct union_struct_66 {
            Varint ref;
        };
        struct union_struct_67 {
            Varint ref;
        };
        struct union_struct_68 {
            Varint ref;
        };
        struct union_struct_69 {
            Varint ref;
        };
        struct union_struct_70 {
            Varint ref;
        };
        struct union_struct_71 {
            Varint ref;
        };
        struct union_struct_72 {
            Varint ref;
        };
        struct union_struct_73 {
            Varint ref;
        };
        struct union_struct_74 {
            Varint ref;
        };
        struct union_struct_75 {
            Varint ref;
        };
        struct union_struct_76 {
            Varint ref;
        };
        struct union_struct_77 {
            Varint ref;
        };
        struct union_struct_78 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_79 {
            Varint ref;
        };
        struct union_struct_80 {
            Varint ref;
        };
        struct union_struct_81 {
            Varint ident;
            Varint belong;
        };
        struct union_struct_82 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_83 {
            Varint ident;
        };
        struct union_struct_84 {
            Varint ref;
        };
        struct union_struct_85 {
            Varint ref;
        };
        struct union_struct_86 {
            Varint ref;
        };
        struct union_struct_87 {
            Varint ref;
        };
        struct union_struct_88 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_89 {
            Varint left_ref;
            Varint right_ref;
        };
        struct union_struct_90 {
            Varint ref;
        };
        struct union_struct_91 {
            Param param;
        };
        struct union_struct_92 {
            Varint ident;
            Varint ref;
            Param param;
        };
        struct union_struct_93 {
            Varint ident;
        };
        struct union_struct_94 {
            Varint ident;
        };
        struct union_struct_95 {
            Varint ident;
            Varint ref;
        };
        struct union_struct_96 {
            Varint ref;
        };
        struct union_struct_97 {
            Varint ref;
        };
        struct union_struct_98 {
            Varint ident;
        };
        struct union_struct_99 {
            Varint ident;
        };
        std::variant<std::monostate, union_struct_15, union_struct_16, union_struct_17, union_struct_18, union_struct_19, union_struct_20, union_struct_21, union_struct_22, union_struct_23, union_struct_24, union_struct_25, union_struct_26, union_struct_27, union_struct_28, union_struct_29, union_struct_30, union_struct_31, union_struct_32, union_struct_33, union_struct_34, union_struct_35, union_struct_36, union_struct_37, union_struct_38, union_struct_39, union_struct_40, union_struct_41, union_struct_42, union_struct_43, union_struct_44, union_struct_45, union_struct_46, union_struct_47, union_struct_48, union_struct_49, union_struct_50, union_struct_51, union_struct_52, union_struct_53, union_struct_54, union_struct_55, union_struct_56, union_struct_57, union_struct_58, union_struct_59, union_struct_60, union_struct_61, union_struct_62, union_struct_63, union_struct_64, union_struct_65, union_struct_66, union_struct_67, union_struct_68, union_struct_69, union_struct_70, union_struct_71, union_struct_72, union_struct_73, union_struct_74, union_struct_75, union_struct_76, union_struct_77, union_struct_78, union_struct_79, union_struct_80, union_struct_81, union_struct_82, union_struct_83, union_struct_84, union_struct_85, union_struct_86, union_struct_87, union_struct_88, union_struct_89, union_struct_90, union_struct_91, union_struct_92, union_struct_93, union_struct_94, union_struct_95, union_struct_96, union_struct_97, union_struct_98, union_struct_99> union_variant_14;
        std::optional<Varint> belong() const;
        bool belong(Varint&& v);
        bool belong(const Varint& v);
        std::optional<Varint> bit_size() const;
        bool bit_size(Varint&& v);
        bool bit_size(const Varint& v);
        std::optional<BinaryOp> bop() const;
        bool bop(BinaryOp&& v);
        bool bop(const BinaryOp& v);
        std::optional<Endian> endian() const;
        bool endian(Endian&& v);
        bool endian(const Endian& v);
        std::optional<Varint> ident() const;
        bool ident(Varint&& v);
        bool ident(const Varint& v);
        std::optional<Varint> int_value() const;
        bool int_value(Varint&& v);
        bool int_value(const Varint& v);
        std::optional<std::uint64_t> int_value64() const;
        bool int_value64(std::uint64_t&& v);
        bool int_value64(const std::uint64_t& v);
        std::optional<Varint> left_ref() const;
        bool left_ref(Varint&& v);
        bool left_ref(const Varint& v);
        std::optional<Metadata> metadata() const;
        bool metadata(Metadata&& v);
        bool metadata(const Metadata& v);
        std::optional<Param> param() const;
        bool param(Param&& v);
        bool param(const Param& v);
        std::optional<Varint> ref() const;
        bool ref(Varint&& v);
        bool ref(const Varint& v);
        std::optional<Varint> right_ref() const;
        bool right_ref(Varint&& v);
        bool right_ref(const Varint& v);
        std::optional<Storages> storage() const;
        bool storage(Storages&& v);
        bool storage(const Storages& v);
        std::optional<UnaryOp> uop() const;
        bool uop(UnaryOp&& v);
        bool uop(const UnaryOp& v);
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 1;
    };
    struct BinaryModule {
        //"RBGM" (4 bytes)
        StringRefs strings;
        StringRefs identifiers;
        IdentIndexs ident_indexes;
        Ranges programs;
        IdentRanges ident_ranges;
        Varint code_length;
        std::vector<Code> code;
        ::futils::error::Error<> encode(::futils::binary::writer& w) const;
        ::futils::error::Error<> decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 4;
    };
    inline std::optional<Varint> Storage::ref() const {
        if (StorageType::INT == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::UINT == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::FLOAT == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_3)) {
                return std::nullopt;
            }
            return std::get<4>((*this).union_variant_3).ref;
        }
        if (StorageType::RECURSIVE_STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_8>(union_variant_3)) {
                return std::nullopt;
            }
            return std::get<5>((*this).union_variant_3).ref;
        }
        if (StorageType::BYTE_VECTOR == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::ENUM == (*this).type) {
            if (!std::holds_alternative<union_struct_10>(union_variant_3)) {
                return std::nullopt;
            }
            return std::get<7>((*this).union_variant_3).ref;
        }
        if (StorageType::ARRAY == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::VARIANT == (*this).type) {
            if (!std::holds_alternative<union_struct_12>(union_variant_3)) {
                return std::nullopt;
            }
            return std::get<9>((*this).union_variant_3).ref;
        }
        return std::nullopt;
    }
    inline bool Storage::ref(const Varint& v) {
        if (StorageType::INT == (*this).type) {
            return false;
        }
        if (StorageType::UINT == (*this).type) {
            return false;
        }
        if (StorageType::FLOAT == (*this).type) {
            return false;
        }
        if (StorageType::STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_3)) {
                union_variant_3 = union_struct_7();
            }
            std::get<4>((*this).union_variant_3).ref = v;
            return true;
        }
        if (StorageType::RECURSIVE_STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_8>(union_variant_3)) {
                union_variant_3 = union_struct_8();
            }
            std::get<5>((*this).union_variant_3).ref = v;
            return true;
        }
        if (StorageType::BYTE_VECTOR == (*this).type) {
            return false;
        }
        if (StorageType::ENUM == (*this).type) {
            if (!std::holds_alternative<union_struct_10>(union_variant_3)) {
                union_variant_3 = union_struct_10();
            }
            std::get<7>((*this).union_variant_3).ref = v;
            return true;
        }
        if (StorageType::ARRAY == (*this).type) {
            return false;
        }
        if (StorageType::VARIANT == (*this).type) {
            if (!std::holds_alternative<union_struct_12>(union_variant_3)) {
                union_variant_3 = union_struct_12();
            }
            std::get<9>((*this).union_variant_3).ref = v;
            return true;
        }
        return false;
    }
    inline bool Storage::ref(Varint&& v) {
        if (StorageType::INT == (*this).type) {
            return false;
        }
        if (StorageType::UINT == (*this).type) {
            return false;
        }
        if (StorageType::FLOAT == (*this).type) {
            return false;
        }
        if (StorageType::STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_3)) {
                union_variant_3 = union_struct_7();
            }
            std::get<4>((*this).union_variant_3).ref = std::move(v);
            return true;
        }
        if (StorageType::RECURSIVE_STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_8>(union_variant_3)) {
                union_variant_3 = union_struct_8();
            }
            std::get<5>((*this).union_variant_3).ref = std::move(v);
            return true;
        }
        if (StorageType::BYTE_VECTOR == (*this).type) {
            return false;
        }
        if (StorageType::ENUM == (*this).type) {
            if (!std::holds_alternative<union_struct_10>(union_variant_3)) {
                union_variant_3 = union_struct_10();
            }
            std::get<7>((*this).union_variant_3).ref = std::move(v);
            return true;
        }
        if (StorageType::ARRAY == (*this).type) {
            return false;
        }
        if (StorageType::VARIANT == (*this).type) {
            if (!std::holds_alternative<union_struct_12>(union_variant_3)) {
                union_variant_3 = union_struct_12();
            }
            std::get<9>((*this).union_variant_3).ref = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Storage::size() const {
        if (StorageType::INT == (*this).type) {
            if (!std::holds_alternative<union_struct_4>(union_variant_3)) {
                return std::nullopt;
            }
            return std::get<1>((*this).union_variant_3).size;
        }
        if (StorageType::UINT == (*this).type) {
            if (!std::holds_alternative<union_struct_5>(union_variant_3)) {
                return std::nullopt;
            }
            return std::get<2>((*this).union_variant_3).size;
        }
        if (StorageType::FLOAT == (*this).type) {
            if (!std::holds_alternative<union_struct_6>(union_variant_3)) {
                return std::nullopt;
            }
            return std::get<3>((*this).union_variant_3).size;
        }
        if (StorageType::STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_3)) {
                return std::nullopt;
            }
            return std::get<4>((*this).union_variant_3).size;
        }
        if (StorageType::RECURSIVE_STRUCT_REF == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::BYTE_VECTOR == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::ENUM == (*this).type) {
            return std::nullopt;
        }
        if (StorageType::ARRAY == (*this).type) {
            if (!std::holds_alternative<union_struct_11>(union_variant_3)) {
                return std::nullopt;
            }
            return std::get<8>((*this).union_variant_3).size;
        }
        if (StorageType::VARIANT == (*this).type) {
            if (!std::holds_alternative<union_struct_12>(union_variant_3)) {
                return std::nullopt;
            }
            return std::get<9>((*this).union_variant_3).size;
        }
        return std::nullopt;
    }
    inline bool Storage::size(const Varint& v) {
        if (StorageType::INT == (*this).type) {
            if (!std::holds_alternative<union_struct_4>(union_variant_3)) {
                union_variant_3 = union_struct_4();
            }
            std::get<1>((*this).union_variant_3).size = v;
            return true;
        }
        if (StorageType::UINT == (*this).type) {
            if (!std::holds_alternative<union_struct_5>(union_variant_3)) {
                union_variant_3 = union_struct_5();
            }
            std::get<2>((*this).union_variant_3).size = v;
            return true;
        }
        if (StorageType::FLOAT == (*this).type) {
            if (!std::holds_alternative<union_struct_6>(union_variant_3)) {
                union_variant_3 = union_struct_6();
            }
            std::get<3>((*this).union_variant_3).size = v;
            return true;
        }
        if (StorageType::STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_3)) {
                union_variant_3 = union_struct_7();
            }
            std::get<4>((*this).union_variant_3).size = v;
            return true;
        }
        if (StorageType::RECURSIVE_STRUCT_REF == (*this).type) {
            return false;
        }
        if (StorageType::BYTE_VECTOR == (*this).type) {
            return false;
        }
        if (StorageType::ENUM == (*this).type) {
            return false;
        }
        if (StorageType::ARRAY == (*this).type) {
            if (!std::holds_alternative<union_struct_11>(union_variant_3)) {
                union_variant_3 = union_struct_11();
            }
            std::get<8>((*this).union_variant_3).size = v;
            return true;
        }
        if (StorageType::VARIANT == (*this).type) {
            if (!std::holds_alternative<union_struct_12>(union_variant_3)) {
                union_variant_3 = union_struct_12();
            }
            std::get<9>((*this).union_variant_3).size = v;
            return true;
        }
        return false;
    }
    inline bool Storage::size(Varint&& v) {
        if (StorageType::INT == (*this).type) {
            if (!std::holds_alternative<union_struct_4>(union_variant_3)) {
                union_variant_3 = union_struct_4();
            }
            std::get<1>((*this).union_variant_3).size = std::move(v);
            return true;
        }
        if (StorageType::UINT == (*this).type) {
            if (!std::holds_alternative<union_struct_5>(union_variant_3)) {
                union_variant_3 = union_struct_5();
            }
            std::get<2>((*this).union_variant_3).size = std::move(v);
            return true;
        }
        if (StorageType::FLOAT == (*this).type) {
            if (!std::holds_alternative<union_struct_6>(union_variant_3)) {
                union_variant_3 = union_struct_6();
            }
            std::get<3>((*this).union_variant_3).size = std::move(v);
            return true;
        }
        if (StorageType::STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_3)) {
                union_variant_3 = union_struct_7();
            }
            std::get<4>((*this).union_variant_3).size = std::move(v);
            return true;
        }
        if (StorageType::RECURSIVE_STRUCT_REF == (*this).type) {
            return false;
        }
        if (StorageType::BYTE_VECTOR == (*this).type) {
            return false;
        }
        if (StorageType::ENUM == (*this).type) {
            return false;
        }
        if (StorageType::ARRAY == (*this).type) {
            if (!std::holds_alternative<union_struct_11>(union_variant_3)) {
                union_variant_3 = union_struct_11();
            }
            std::get<8>((*this).union_variant_3).size = std::move(v);
            return true;
        }
        if (StorageType::VARIANT == (*this).type) {
            if (!std::holds_alternative<union_struct_12>(union_variant_3)) {
                union_variant_3 = union_struct_12();
            }
            std::get<9>((*this).union_variant_3).size = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::belong() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<15>((*this).union_variant_14).belong;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_30>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<16>((*this).union_variant_14).belong;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<19>((*this).union_variant_14).belong;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_36>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<22>((*this).union_variant_14).belong;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_38>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<24>((*this).union_variant_14).belong;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<25>((*this).union_variant_14).belong;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_81>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<67>((*this).union_variant_14).belong;
        }
        return std::nullopt;
    }
    inline bool Code::belong(const Varint& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_14)) {
                union_variant_14 = union_struct_29();
            }
            std::get<15>((*this).union_variant_14).belong = v;
            return true;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_30>(union_variant_14)) {
                union_variant_14 = union_struct_30();
            }
            std::get<16>((*this).union_variant_14).belong = v;
            return true;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_14)) {
                union_variant_14 = union_struct_33();
            }
            std::get<19>((*this).union_variant_14).belong = v;
            return true;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_36>(union_variant_14)) {
                union_variant_14 = union_struct_36();
            }
            std::get<22>((*this).union_variant_14).belong = v;
            return true;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_38>(union_variant_14)) {
                union_variant_14 = union_struct_38();
            }
            std::get<24>((*this).union_variant_14).belong = v;
            return true;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_14)) {
                union_variant_14 = union_struct_39();
            }
            std::get<25>((*this).union_variant_14).belong = v;
            return true;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::DEC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_81>(union_variant_14)) {
                union_variant_14 = union_struct_81();
            }
            std::get<67>((*this).union_variant_14).belong = v;
            return true;
        }
        return false;
    }
    inline bool Code::belong(Varint&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_14)) {
                union_variant_14 = union_struct_29();
            }
            std::get<15>((*this).union_variant_14).belong = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_30>(union_variant_14)) {
                union_variant_14 = union_struct_30();
            }
            std::get<16>((*this).union_variant_14).belong = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_14)) {
                union_variant_14 = union_struct_33();
            }
            std::get<19>((*this).union_variant_14).belong = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_36>(union_variant_14)) {
                union_variant_14 = union_struct_36();
            }
            std::get<22>((*this).union_variant_14).belong = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_38>(union_variant_14)) {
                union_variant_14 = union_struct_38();
            }
            std::get<24>((*this).union_variant_14).belong = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_14)) {
                union_variant_14 = union_struct_39();
            }
            std::get<25>((*this).union_variant_14).belong = std::move(v);
            return true;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::DEC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_81>(union_variant_14)) {
                union_variant_14 = union_struct_81();
            }
            std::get<67>((*this).union_variant_14).belong = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::bit_size() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_48>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<34>((*this).union_variant_14).bit_size;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<35>((*this).union_variant_14).bit_size;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<36>((*this).union_variant_14).bit_size;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<37>((*this).union_variant_14).bit_size;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<38>((*this).union_variant_14).bit_size;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<39>((*this).union_variant_14).bit_size;
        }
        return std::nullopt;
    }
    inline bool Code::bit_size(const Varint& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_48>(union_variant_14)) {
                union_variant_14 = union_struct_48();
            }
            std::get<34>((*this).union_variant_14).bit_size = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_14)) {
                union_variant_14 = union_struct_49();
            }
            std::get<35>((*this).union_variant_14).bit_size = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_14)) {
                union_variant_14 = union_struct_50();
            }
            std::get<36>((*this).union_variant_14).bit_size = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_14)) {
                union_variant_14 = union_struct_51();
            }
            std::get<37>((*this).union_variant_14).bit_size = v;
            return true;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_14)) {
                union_variant_14 = union_struct_52();
            }
            std::get<38>((*this).union_variant_14).bit_size = v;
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_14)) {
                union_variant_14 = union_struct_53();
            }
            std::get<39>((*this).union_variant_14).bit_size = v;
            return true;
        }
        return false;
    }
    inline bool Code::bit_size(Varint&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_48>(union_variant_14)) {
                union_variant_14 = union_struct_48();
            }
            std::get<34>((*this).union_variant_14).bit_size = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_14)) {
                union_variant_14 = union_struct_49();
            }
            std::get<35>((*this).union_variant_14).bit_size = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_14)) {
                union_variant_14 = union_struct_50();
            }
            std::get<36>((*this).union_variant_14).bit_size = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_14)) {
                union_variant_14 = union_struct_51();
            }
            std::get<37>((*this).union_variant_14).bit_size = std::move(v);
            return true;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_14)) {
                union_variant_14 = union_struct_52();
            }
            std::get<38>((*this).union_variant_14).bit_size = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_14)) {
                union_variant_14 = union_struct_53();
            }
            std::get<39>((*this).union_variant_14).bit_size = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<BinaryOp> Code::bop() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<27>((*this).union_variant_14).bop;
        }
        return std::nullopt;
    }
    inline bool Code::bop(const BinaryOp& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_14)) {
                union_variant_14 = union_struct_41();
            }
            std::get<27>((*this).union_variant_14).bop = v;
            return true;
        }
        return false;
    }
    inline bool Code::bop(BinaryOp&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_14)) {
                union_variant_14 = union_struct_41();
            }
            std::get<27>((*this).union_variant_14).bop = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Endian> Code::endian() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_48>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<34>((*this).union_variant_14).endian;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<35>((*this).union_variant_14).endian;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<36>((*this).union_variant_14).endian;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<37>((*this).union_variant_14).endian;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<38>((*this).union_variant_14).endian;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<39>((*this).union_variant_14).endian;
        }
        return std::nullopt;
    }
    inline bool Code::endian(const Endian& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_48>(union_variant_14)) {
                union_variant_14 = union_struct_48();
            }
            std::get<34>((*this).union_variant_14).endian = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_14)) {
                union_variant_14 = union_struct_49();
            }
            std::get<35>((*this).union_variant_14).endian = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_14)) {
                union_variant_14 = union_struct_50();
            }
            std::get<36>((*this).union_variant_14).endian = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_14)) {
                union_variant_14 = union_struct_51();
            }
            std::get<37>((*this).union_variant_14).endian = v;
            return true;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_14)) {
                union_variant_14 = union_struct_52();
            }
            std::get<38>((*this).union_variant_14).endian = v;
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_14)) {
                union_variant_14 = union_struct_53();
            }
            std::get<39>((*this).union_variant_14).endian = v;
            return true;
        }
        return false;
    }
    inline bool Code::endian(Endian&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_48>(union_variant_14)) {
                union_variant_14 = union_struct_48();
            }
            std::get<34>((*this).union_variant_14).endian = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_14)) {
                union_variant_14 = union_struct_49();
            }
            std::get<35>((*this).union_variant_14).endian = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_14)) {
                union_variant_14 = union_struct_50();
            }
            std::get<36>((*this).union_variant_14).endian = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_14)) {
                union_variant_14 = union_struct_51();
            }
            std::get<37>((*this).union_variant_14).endian = std::move(v);
            return true;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_14)) {
                union_variant_14 = union_struct_52();
            }
            std::get<38>((*this).union_variant_14).endian = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_14)) {
                union_variant_14 = union_struct_53();
            }
            std::get<39>((*this).union_variant_14).endian = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::ident() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_16>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<2>((*this).union_variant_14).ident;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<3>((*this).union_variant_14).ident;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            if (!std::holds_alternative<union_struct_18>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<4>((*this).union_variant_14).ident;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_19>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<5>((*this).union_variant_14).ident;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            if (!std::holds_alternative<union_struct_21>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<7>((*this).union_variant_14).ident;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            if (!std::holds_alternative<union_struct_22>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<8>((*this).union_variant_14).ident;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            if (!std::holds_alternative<union_struct_23>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<9>((*this).union_variant_14).ident;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            if (!std::holds_alternative<union_struct_24>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<10>((*this).union_variant_14).ident;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_25>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<11>((*this).union_variant_14).ident;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_27>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<13>((*this).union_variant_14).ident;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_28>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<14>((*this).union_variant_14).ident;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<15>((*this).union_variant_14).ident;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_30>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<16>((*this).union_variant_14).ident;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_31>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<17>((*this).union_variant_14).ident;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_32>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<18>((*this).union_variant_14).ident;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<19>((*this).union_variant_14).ident;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_36>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<22>((*this).union_variant_14).ident;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<23>((*this).union_variant_14).ident;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_38>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<24>((*this).union_variant_14).ident;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<25>((*this).union_variant_14).ident;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<27>((*this).union_variant_14).ident;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<28>((*this).union_variant_14).ident;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<30>((*this).union_variant_14).ident;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<31>((*this).union_variant_14).ident;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<40>((*this).union_variant_14).ident;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<41>((*this).union_variant_14).ident;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<47>((*this).union_variant_14).ident;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<48>((*this).union_variant_14).ident;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_81>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<67>((*this).union_variant_14).ident;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_83>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<69>((*this).union_variant_14).ident;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<78>((*this).union_variant_14).ident;
        }
        if (AbstractOp::BIT_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_93>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<79>((*this).union_variant_14).ident;
        }
        if (AbstractOp::BYTE_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_94>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<80>((*this).union_variant_14).ident;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<81>((*this).union_variant_14).ident;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CAN_READ == (*this).op) {
            if (!std::holds_alternative<union_struct_98>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<84>((*this).union_variant_14).ident;
        }
        if (AbstractOp::REMAIN_BYTES == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<85>((*this).union_variant_14).ident;
        }
        return std::nullopt;
    }
    inline bool Code::ident(const Varint& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_16>(union_variant_14)) {
                union_variant_14 = union_struct_16();
            }
            std::get<2>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_14)) {
                union_variant_14 = union_struct_17();
            }
            std::get<3>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            if (!std::holds_alternative<union_struct_18>(union_variant_14)) {
                union_variant_14 = union_struct_18();
            }
            std::get<4>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_19>(union_variant_14)) {
                union_variant_14 = union_struct_19();
            }
            std::get<5>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            if (!std::holds_alternative<union_struct_21>(union_variant_14)) {
                union_variant_14 = union_struct_21();
            }
            std::get<7>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            if (!std::holds_alternative<union_struct_22>(union_variant_14)) {
                union_variant_14 = union_struct_22();
            }
            std::get<8>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            if (!std::holds_alternative<union_struct_23>(union_variant_14)) {
                union_variant_14 = union_struct_23();
            }
            std::get<9>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            if (!std::holds_alternative<union_struct_24>(union_variant_14)) {
                union_variant_14 = union_struct_24();
            }
            std::get<10>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_25>(union_variant_14)) {
                union_variant_14 = union_struct_25();
            }
            std::get<11>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_27>(union_variant_14)) {
                union_variant_14 = union_struct_27();
            }
            std::get<13>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_28>(union_variant_14)) {
                union_variant_14 = union_struct_28();
            }
            std::get<14>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_14)) {
                union_variant_14 = union_struct_29();
            }
            std::get<15>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_30>(union_variant_14)) {
                union_variant_14 = union_struct_30();
            }
            std::get<16>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_31>(union_variant_14)) {
                union_variant_14 = union_struct_31();
            }
            std::get<17>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_32>(union_variant_14)) {
                union_variant_14 = union_struct_32();
            }
            std::get<18>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_14)) {
                union_variant_14 = union_struct_33();
            }
            std::get<19>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_36>(union_variant_14)) {
                union_variant_14 = union_struct_36();
            }
            std::get<22>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_14)) {
                union_variant_14 = union_struct_37();
            }
            std::get<23>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_38>(union_variant_14)) {
                union_variant_14 = union_struct_38();
            }
            std::get<24>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_14)) {
                union_variant_14 = union_struct_39();
            }
            std::get<25>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_14)) {
                union_variant_14 = union_struct_41();
            }
            std::get<27>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_14)) {
                union_variant_14 = union_struct_42();
            }
            std::get<28>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_14)) {
                union_variant_14 = union_struct_44();
            }
            std::get<30>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_14)) {
                union_variant_14 = union_struct_45();
            }
            std::get<31>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_14)) {
                union_variant_14 = union_struct_54();
            }
            std::get<40>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_14)) {
                union_variant_14 = union_struct_55();
            }
            std::get<41>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::DEC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_14)) {
                union_variant_14 = union_struct_61();
            }
            std::get<47>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_14)) {
                union_variant_14 = union_struct_62();
            }
            std::get<48>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_81>(union_variant_14)) {
                union_variant_14 = union_struct_81();
            }
            std::get<67>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_83>(union_variant_14)) {
                union_variant_14 = union_struct_83();
            }
            std::get<69>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_14)) {
                union_variant_14 = union_struct_92();
            }
            std::get<78>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::BIT_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_93>(union_variant_14)) {
                union_variant_14 = union_struct_93();
            }
            std::get<79>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::BYTE_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_94>(union_variant_14)) {
                union_variant_14 = union_struct_94();
            }
            std::get<80>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_14)) {
                union_variant_14 = union_struct_95();
            }
            std::get<81>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            return false;
        }
        if (AbstractOp::CAN_READ == (*this).op) {
            if (!std::holds_alternative<union_struct_98>(union_variant_14)) {
                union_variant_14 = union_struct_98();
            }
            std::get<84>((*this).union_variant_14).ident = v;
            return true;
        }
        if (AbstractOp::REMAIN_BYTES == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_14)) {
                union_variant_14 = union_struct_99();
            }
            std::get<85>((*this).union_variant_14).ident = v;
            return true;
        }
        return false;
    }
    inline bool Code::ident(Varint&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_16>(union_variant_14)) {
                union_variant_14 = union_struct_16();
            }
            std::get<2>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_14)) {
                union_variant_14 = union_struct_17();
            }
            std::get<3>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            if (!std::holds_alternative<union_struct_18>(union_variant_14)) {
                union_variant_14 = union_struct_18();
            }
            std::get<4>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_19>(union_variant_14)) {
                union_variant_14 = union_struct_19();
            }
            std::get<5>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            if (!std::holds_alternative<union_struct_21>(union_variant_14)) {
                union_variant_14 = union_struct_21();
            }
            std::get<7>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            if (!std::holds_alternative<union_struct_22>(union_variant_14)) {
                union_variant_14 = union_struct_22();
            }
            std::get<8>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            if (!std::holds_alternative<union_struct_23>(union_variant_14)) {
                union_variant_14 = union_struct_23();
            }
            std::get<9>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            if (!std::holds_alternative<union_struct_24>(union_variant_14)) {
                union_variant_14 = union_struct_24();
            }
            std::get<10>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_25>(union_variant_14)) {
                union_variant_14 = union_struct_25();
            }
            std::get<11>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_27>(union_variant_14)) {
                union_variant_14 = union_struct_27();
            }
            std::get<13>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_28>(union_variant_14)) {
                union_variant_14 = union_struct_28();
            }
            std::get<14>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_14)) {
                union_variant_14 = union_struct_29();
            }
            std::get<15>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_30>(union_variant_14)) {
                union_variant_14 = union_struct_30();
            }
            std::get<16>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_31>(union_variant_14)) {
                union_variant_14 = union_struct_31();
            }
            std::get<17>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_32>(union_variant_14)) {
                union_variant_14 = union_struct_32();
            }
            std::get<18>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_14)) {
                union_variant_14 = union_struct_33();
            }
            std::get<19>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_36>(union_variant_14)) {
                union_variant_14 = union_struct_36();
            }
            std::get<22>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_14)) {
                union_variant_14 = union_struct_37();
            }
            std::get<23>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_38>(union_variant_14)) {
                union_variant_14 = union_struct_38();
            }
            std::get<24>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_14)) {
                union_variant_14 = union_struct_39();
            }
            std::get<25>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_14)) {
                union_variant_14 = union_struct_41();
            }
            std::get<27>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_14)) {
                union_variant_14 = union_struct_42();
            }
            std::get<28>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_14)) {
                union_variant_14 = union_struct_44();
            }
            std::get<30>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_14)) {
                union_variant_14 = union_struct_45();
            }
            std::get<31>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_14)) {
                union_variant_14 = union_struct_54();
            }
            std::get<40>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_14)) {
                union_variant_14 = union_struct_55();
            }
            std::get<41>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::DEC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_14)) {
                union_variant_14 = union_struct_61();
            }
            std::get<47>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_14)) {
                union_variant_14 = union_struct_62();
            }
            std::get<48>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_81>(union_variant_14)) {
                union_variant_14 = union_struct_81();
            }
            std::get<67>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_83>(union_variant_14)) {
                union_variant_14 = union_struct_83();
            }
            std::get<69>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_14)) {
                union_variant_14 = union_struct_92();
            }
            std::get<78>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::BIT_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_93>(union_variant_14)) {
                union_variant_14 = union_struct_93();
            }
            std::get<79>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::BYTE_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_94>(union_variant_14)) {
                union_variant_14 = union_struct_94();
            }
            std::get<80>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_14)) {
                union_variant_14 = union_struct_95();
            }
            std::get<81>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            return false;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            return false;
        }
        if (AbstractOp::CAN_READ == (*this).op) {
            if (!std::holds_alternative<union_struct_98>(union_variant_14)) {
                union_variant_14 = union_struct_98();
            }
            std::get<84>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        if (AbstractOp::REMAIN_BYTES == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_14)) {
                union_variant_14 = union_struct_99();
            }
            std::get<85>((*this).union_variant_14).ident = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::int_value() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            if (!std::holds_alternative<union_struct_18>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<4>((*this).union_variant_14).int_value;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_19>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<5>((*this).union_variant_14).int_value;
        }
        return std::nullopt;
    }
    inline bool Code::int_value(const Varint& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            if (!std::holds_alternative<union_struct_18>(union_variant_14)) {
                union_variant_14 = union_struct_18();
            }
            std::get<4>((*this).union_variant_14).int_value = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_19>(union_variant_14)) {
                union_variant_14 = union_struct_19();
            }
            std::get<5>((*this).union_variant_14).int_value = v;
            return true;
        }
        return false;
    }
    inline bool Code::int_value(Varint&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            if (!std::holds_alternative<union_struct_18>(union_variant_14)) {
                union_variant_14 = union_struct_18();
            }
            std::get<4>((*this).union_variant_14).int_value = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_19>(union_variant_14)) {
                union_variant_14 = union_struct_19();
            }
            std::get<5>((*this).union_variant_14).int_value = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<std::uint64_t> Code::int_value64() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            if (!std::holds_alternative<union_struct_21>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<7>((*this).union_variant_14).int_value64;
        }
        return std::nullopt;
    }
    inline bool Code::int_value64(const std::uint64_t& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            if (!std::holds_alternative<union_struct_21>(union_variant_14)) {
                union_variant_14 = union_struct_21();
            }
            std::get<7>((*this).union_variant_14).int_value64 = v;
            return true;
        }
        return false;
    }
    inline bool Code::int_value64(std::uint64_t&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            if (!std::holds_alternative<union_struct_21>(union_variant_14)) {
                union_variant_14 = union_struct_21();
            }
            std::get<7>((*this).union_variant_14).int_value64 = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::left_ref() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_34>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<20>((*this).union_variant_14).left_ref;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_35>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<21>((*this).union_variant_14).left_ref;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<27>((*this).union_variant_14).left_ref;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<30>((*this).union_variant_14).left_ref;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<31>((*this).union_variant_14).left_ref;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<32>((*this).union_variant_14).left_ref;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<35>((*this).union_variant_14).left_ref;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<36>((*this).union_variant_14).left_ref;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<38>((*this).union_variant_14).left_ref;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_56>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<42>((*this).union_variant_14).left_ref;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_57>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<43>((*this).union_variant_14).left_ref;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_78>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<64>((*this).union_variant_14).left_ref;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::APPEND == (*this).op) {
            if (!std::holds_alternative<union_struct_82>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<68>((*this).union_variant_14).left_ref;
        }
        if (AbstractOp::DEFINE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_88>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<74>((*this).union_variant_14).left_ref;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_89>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<75>((*this).union_variant_14).left_ref;
        }
        return std::nullopt;
    }
    inline bool Code::left_ref(const Varint& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_34>(union_variant_14)) {
                union_variant_14 = union_struct_34();
            }
            std::get<20>((*this).union_variant_14).left_ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_35>(union_variant_14)) {
                union_variant_14 = union_struct_35();
            }
            std::get<21>((*this).union_variant_14).left_ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_14)) {
                union_variant_14 = union_struct_41();
            }
            std::get<27>((*this).union_variant_14).left_ref = v;
            return true;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_14)) {
                union_variant_14 = union_struct_44();
            }
            std::get<30>((*this).union_variant_14).left_ref = v;
            return true;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_14)) {
                union_variant_14 = union_struct_45();
            }
            std::get<31>((*this).union_variant_14).left_ref = v;
            return true;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_14)) {
                union_variant_14 = union_struct_46();
            }
            std::get<32>((*this).union_variant_14).left_ref = v;
            return true;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_14)) {
                union_variant_14 = union_struct_49();
            }
            std::get<35>((*this).union_variant_14).left_ref = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_14)) {
                union_variant_14 = union_struct_50();
            }
            std::get<36>((*this).union_variant_14).left_ref = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_14)) {
                union_variant_14 = union_struct_52();
            }
            std::get<38>((*this).union_variant_14).left_ref = v;
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_56>(union_variant_14)) {
                union_variant_14 = union_struct_56();
            }
            std::get<42>((*this).union_variant_14).left_ref = v;
            return true;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_57>(union_variant_14)) {
                union_variant_14 = union_struct_57();
            }
            std::get<43>((*this).union_variant_14).left_ref = v;
            return true;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::DEC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_78>(union_variant_14)) {
                union_variant_14 = union_struct_78();
            }
            std::get<64>((*this).union_variant_14).left_ref = v;
            return true;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            if (!std::holds_alternative<union_struct_82>(union_variant_14)) {
                union_variant_14 = union_struct_82();
            }
            std::get<68>((*this).union_variant_14).left_ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_88>(union_variant_14)) {
                union_variant_14 = union_struct_88();
            }
            std::get<74>((*this).union_variant_14).left_ref = v;
            return true;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_89>(union_variant_14)) {
                union_variant_14 = union_struct_89();
            }
            std::get<75>((*this).union_variant_14).left_ref = v;
            return true;
        }
        return false;
    }
    inline bool Code::left_ref(Varint&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_34>(union_variant_14)) {
                union_variant_14 = union_struct_34();
            }
            std::get<20>((*this).union_variant_14).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_35>(union_variant_14)) {
                union_variant_14 = union_struct_35();
            }
            std::get<21>((*this).union_variant_14).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_14)) {
                union_variant_14 = union_struct_41();
            }
            std::get<27>((*this).union_variant_14).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_14)) {
                union_variant_14 = union_struct_44();
            }
            std::get<30>((*this).union_variant_14).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_14)) {
                union_variant_14 = union_struct_45();
            }
            std::get<31>((*this).union_variant_14).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_14)) {
                union_variant_14 = union_struct_46();
            }
            std::get<32>((*this).union_variant_14).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_14)) {
                union_variant_14 = union_struct_49();
            }
            std::get<35>((*this).union_variant_14).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_14)) {
                union_variant_14 = union_struct_50();
            }
            std::get<36>((*this).union_variant_14).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_14)) {
                union_variant_14 = union_struct_52();
            }
            std::get<38>((*this).union_variant_14).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_56>(union_variant_14)) {
                union_variant_14 = union_struct_56();
            }
            std::get<42>((*this).union_variant_14).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_57>(union_variant_14)) {
                union_variant_14 = union_struct_57();
            }
            std::get<43>((*this).union_variant_14).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::DEC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_78>(union_variant_14)) {
                union_variant_14 = union_struct_78();
            }
            std::get<64>((*this).union_variant_14).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            if (!std::holds_alternative<union_struct_82>(union_variant_14)) {
                union_variant_14 = union_struct_82();
            }
            std::get<68>((*this).union_variant_14).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_88>(union_variant_14)) {
                union_variant_14 = union_struct_88();
            }
            std::get<74>((*this).union_variant_14).left_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_89>(union_variant_14)) {
                union_variant_14 = union_struct_89();
            }
            std::get<75>((*this).union_variant_14).left_ref = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Metadata> Code::metadata() const {
        if (AbstractOp::METADATA == (*this).op) {
            if (!std::holds_alternative<union_struct_15>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<1>((*this).union_variant_14).metadata;
        }
        return std::nullopt;
    }
    inline bool Code::metadata(const Metadata& v) {
        if (AbstractOp::METADATA == (*this).op) {
            if (!std::holds_alternative<union_struct_15>(union_variant_14)) {
                union_variant_14 = union_struct_15();
            }
            std::get<1>((*this).union_variant_14).metadata = v;
            return true;
        }
        return false;
    }
    inline bool Code::metadata(Metadata&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            if (!std::holds_alternative<union_struct_15>(union_variant_14)) {
                union_variant_14 = union_struct_15();
            }
            std::get<1>((*this).union_variant_14).metadata = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Param> Code::param() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<41>((*this).union_variant_14).param;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<77>((*this).union_variant_14).param;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<78>((*this).union_variant_14).param;
        }
        return std::nullopt;
    }
    inline bool Code::param(const Param& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_14)) {
                union_variant_14 = union_struct_55();
            }
            std::get<41>((*this).union_variant_14).param = v;
            return true;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::DEC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_14)) {
                union_variant_14 = union_struct_91();
            }
            std::get<77>((*this).union_variant_14).param = v;
            return true;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_14)) {
                union_variant_14 = union_struct_92();
            }
            std::get<78>((*this).union_variant_14).param = v;
            return true;
        }
        return false;
    }
    inline bool Code::param(Param&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_14)) {
                union_variant_14 = union_struct_55();
            }
            std::get<41>((*this).union_variant_14).param = std::move(v);
            return true;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::DEC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_14)) {
                union_variant_14 = union_struct_91();
            }
            std::get<77>((*this).union_variant_14).param = std::move(v);
            return true;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_14)) {
                union_variant_14 = union_struct_92();
            }
            std::get<78>((*this).union_variant_14).param = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::ref() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<3>((*this).union_variant_14).ref;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            if (!std::holds_alternative<union_struct_20>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<6>((*this).union_variant_14).ref;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            if (!std::holds_alternative<union_struct_26>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<12>((*this).union_variant_14).ref;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<23>((*this).union_variant_14).ref;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<28>((*this).union_variant_14).ref;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            if (!std::holds_alternative<union_struct_43>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<29>((*this).union_variant_14).ref;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            if (!std::holds_alternative<union_struct_47>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<33>((*this).union_variant_14).ref;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_48>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<34>((*this).union_variant_14).ref;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<37>((*this).union_variant_14).ref;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<39>((*this).union_variant_14).ref;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<40>((*this).union_variant_14).ref;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            if (!std::holds_alternative<union_struct_58>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<44>((*this).union_variant_14).ref;
        }
        if (AbstractOp::DEC == (*this).op) {
            if (!std::holds_alternative<union_struct_59>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<45>((*this).union_variant_14).ref;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            if (!std::holds_alternative<union_struct_60>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<46>((*this).union_variant_14).ref;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<47>((*this).union_variant_14).ref;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<49>((*this).union_variant_14).ref;
        }
        if (AbstractOp::IF == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<50>((*this).union_variant_14).ref;
        }
        if (AbstractOp::ELIF == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<51>((*this).union_variant_14).ref;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<52>((*this).union_variant_14).ref;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<53>((*this).union_variant_14).ref;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<54>((*this).union_variant_14).ref;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<55>((*this).union_variant_14).ref;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_70>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<56>((*this).union_variant_14).ref;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_71>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<57>((*this).union_variant_14).ref;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_72>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<58>((*this).union_variant_14).ref;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_73>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<59>((*this).union_variant_14).ref;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_74>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<60>((*this).union_variant_14).ref;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_75>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<61>((*this).union_variant_14).ref;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_76>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<62>((*this).union_variant_14).ref;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_77>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<63>((*this).union_variant_14).ref;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CASE == (*this).op) {
            if (!std::holds_alternative<union_struct_79>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<65>((*this).union_variant_14).ref;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_80>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<66>((*this).union_variant_14).ref;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_84>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<70>((*this).union_variant_14).ref;
        }
        if (AbstractOp::RET == (*this).op) {
            if (!std::holds_alternative<union_struct_85>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<71>((*this).union_variant_14).ref;
        }
        if (AbstractOp::MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_86>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<72>((*this).union_variant_14).ref;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_87>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<73>((*this).union_variant_14).ref;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<76>((*this).union_variant_14).ref;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<78>((*this).union_variant_14).ref;
        }
        if (AbstractOp::BIT_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BYTE_OFFSET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<81>((*this).union_variant_14).ref;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_96>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<82>((*this).union_variant_14).ref;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<83>((*this).union_variant_14).ref;
        }
        return std::nullopt;
    }
    inline bool Code::ref(const Varint& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_14)) {
                union_variant_14 = union_struct_17();
            }
            std::get<3>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            if (!std::holds_alternative<union_struct_20>(union_variant_14)) {
                union_variant_14 = union_struct_20();
            }
            std::get<6>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            if (!std::holds_alternative<union_struct_26>(union_variant_14)) {
                union_variant_14 = union_struct_26();
            }
            std::get<12>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_14)) {
                union_variant_14 = union_struct_37();
            }
            std::get<23>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_14)) {
                union_variant_14 = union_struct_42();
            }
            std::get<28>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            if (!std::holds_alternative<union_struct_43>(union_variant_14)) {
                union_variant_14 = union_struct_43();
            }
            std::get<29>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            if (!std::holds_alternative<union_struct_47>(union_variant_14)) {
                union_variant_14 = union_struct_47();
            }
            std::get<33>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_48>(union_variant_14)) {
                union_variant_14 = union_struct_48();
            }
            std::get<34>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_14)) {
                union_variant_14 = union_struct_51();
            }
            std::get<37>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_14)) {
                union_variant_14 = union_struct_53();
            }
            std::get<39>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_14)) {
                union_variant_14 = union_struct_54();
            }
            std::get<40>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            if (!std::holds_alternative<union_struct_58>(union_variant_14)) {
                union_variant_14 = union_struct_58();
            }
            std::get<44>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::DEC == (*this).op) {
            if (!std::holds_alternative<union_struct_59>(union_variant_14)) {
                union_variant_14 = union_struct_59();
            }
            std::get<45>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            if (!std::holds_alternative<union_struct_60>(union_variant_14)) {
                union_variant_14 = union_struct_60();
            }
            std::get<46>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_14)) {
                union_variant_14 = union_struct_61();
            }
            std::get<47>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_14)) {
                union_variant_14 = union_struct_63();
            }
            std::get<49>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::IF == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_14)) {
                union_variant_14 = union_struct_64();
            }
            std::get<50>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::ELIF == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_14)) {
                union_variant_14 = union_struct_65();
            }
            std::get<51>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_14)) {
                union_variant_14 = union_struct_66();
            }
            std::get<52>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_14)) {
                union_variant_14 = union_struct_67();
            }
            std::get<53>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_14)) {
                union_variant_14 = union_struct_68();
            }
            std::get<54>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_14)) {
                union_variant_14 = union_struct_69();
            }
            std::get<55>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_70>(union_variant_14)) {
                union_variant_14 = union_struct_70();
            }
            std::get<56>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_71>(union_variant_14)) {
                union_variant_14 = union_struct_71();
            }
            std::get<57>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_72>(union_variant_14)) {
                union_variant_14 = union_struct_72();
            }
            std::get<58>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_73>(union_variant_14)) {
                union_variant_14 = union_struct_73();
            }
            std::get<59>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_74>(union_variant_14)) {
                union_variant_14 = union_struct_74();
            }
            std::get<60>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_75>(union_variant_14)) {
                union_variant_14 = union_struct_75();
            }
            std::get<61>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_76>(union_variant_14)) {
                union_variant_14 = union_struct_76();
            }
            std::get<62>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_77>(union_variant_14)) {
                union_variant_14 = union_struct_77();
            }
            std::get<63>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            if (!std::holds_alternative<union_struct_79>(union_variant_14)) {
                union_variant_14 = union_struct_79();
            }
            std::get<65>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_80>(union_variant_14)) {
                union_variant_14 = union_struct_80();
            }
            std::get<66>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_84>(union_variant_14)) {
                union_variant_14 = union_struct_84();
            }
            std::get<70>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::RET == (*this).op) {
            if (!std::holds_alternative<union_struct_85>(union_variant_14)) {
                union_variant_14 = union_struct_85();
            }
            std::get<71>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_86>(union_variant_14)) {
                union_variant_14 = union_struct_86();
            }
            std::get<72>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_87>(union_variant_14)) {
                union_variant_14 = union_struct_87();
            }
            std::get<73>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_14)) {
                union_variant_14 = union_struct_90();
            }
            std::get<76>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_14)) {
                union_variant_14 = union_struct_92();
            }
            std::get<78>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_14)) {
                union_variant_14 = union_struct_95();
            }
            std::get<81>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_96>(union_variant_14)) {
                union_variant_14 = union_struct_96();
            }
            std::get<82>((*this).union_variant_14).ref = v;
            return true;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_14)) {
                union_variant_14 = union_struct_97();
            }
            std::get<83>((*this).union_variant_14).ref = v;
            return true;
        }
        return false;
    }
    inline bool Code::ref(Varint&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_14)) {
                union_variant_14 = union_struct_17();
            }
            std::get<3>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            if (!std::holds_alternative<union_struct_20>(union_variant_14)) {
                union_variant_14 = union_struct_20();
            }
            std::get<6>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            if (!std::holds_alternative<union_struct_26>(union_variant_14)) {
                union_variant_14 = union_struct_26();
            }
            std::get<12>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_14)) {
                union_variant_14 = union_struct_37();
            }
            std::get<23>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_14)) {
                union_variant_14 = union_struct_42();
            }
            std::get<28>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            if (!std::holds_alternative<union_struct_43>(union_variant_14)) {
                union_variant_14 = union_struct_43();
            }
            std::get<29>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            if (!std::holds_alternative<union_struct_47>(union_variant_14)) {
                union_variant_14 = union_struct_47();
            }
            std::get<33>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_48>(union_variant_14)) {
                union_variant_14 = union_struct_48();
            }
            std::get<34>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_14)) {
                union_variant_14 = union_struct_51();
            }
            std::get<37>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_14)) {
                union_variant_14 = union_struct_53();
            }
            std::get<39>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_14)) {
                union_variant_14 = union_struct_54();
            }
            std::get<40>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            if (!std::holds_alternative<union_struct_58>(union_variant_14)) {
                union_variant_14 = union_struct_58();
            }
            std::get<44>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEC == (*this).op) {
            if (!std::holds_alternative<union_struct_59>(union_variant_14)) {
                union_variant_14 = union_struct_59();
            }
            std::get<45>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            if (!std::holds_alternative<union_struct_60>(union_variant_14)) {
                union_variant_14 = union_struct_60();
            }
            std::get<46>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_14)) {
                union_variant_14 = union_struct_61();
            }
            std::get<47>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_14)) {
                union_variant_14 = union_struct_63();
            }
            std::get<49>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::IF == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_14)) {
                union_variant_14 = union_struct_64();
            }
            std::get<50>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::ELIF == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_14)) {
                union_variant_14 = union_struct_65();
            }
            std::get<51>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_14)) {
                union_variant_14 = union_struct_66();
            }
            std::get<52>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_14)) {
                union_variant_14 = union_struct_67();
            }
            std::get<53>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_14)) {
                union_variant_14 = union_struct_68();
            }
            std::get<54>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_14)) {
                union_variant_14 = union_struct_69();
            }
            std::get<55>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_70>(union_variant_14)) {
                union_variant_14 = union_struct_70();
            }
            std::get<56>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_71>(union_variant_14)) {
                union_variant_14 = union_struct_71();
            }
            std::get<57>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_72>(union_variant_14)) {
                union_variant_14 = union_struct_72();
            }
            std::get<58>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_73>(union_variant_14)) {
                union_variant_14 = union_struct_73();
            }
            std::get<59>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_74>(union_variant_14)) {
                union_variant_14 = union_struct_74();
            }
            std::get<60>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_75>(union_variant_14)) {
                union_variant_14 = union_struct_75();
            }
            std::get<61>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_76>(union_variant_14)) {
                union_variant_14 = union_struct_76();
            }
            std::get<62>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_77>(union_variant_14)) {
                union_variant_14 = union_struct_77();
            }
            std::get<63>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::CASE == (*this).op) {
            if (!std::holds_alternative<union_struct_79>(union_variant_14)) {
                union_variant_14 = union_struct_79();
            }
            std::get<65>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_80>(union_variant_14)) {
                union_variant_14 = union_struct_80();
            }
            std::get<66>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_84>(union_variant_14)) {
                union_variant_14 = union_struct_84();
            }
            std::get<70>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::RET == (*this).op) {
            if (!std::holds_alternative<union_struct_85>(union_variant_14)) {
                union_variant_14 = union_struct_85();
            }
            std::get<71>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_86>(union_variant_14)) {
                union_variant_14 = union_struct_86();
            }
            std::get<72>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_87>(union_variant_14)) {
                union_variant_14 = union_struct_87();
            }
            std::get<73>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_14)) {
                union_variant_14 = union_struct_90();
            }
            std::get<76>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_14)) {
                union_variant_14 = union_struct_92();
            }
            std::get<78>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::BIT_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::BYTE_OFFSET == (*this).op) {
            return false;
        }
        if (AbstractOp::ARRAY_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_14)) {
                union_variant_14 = union_struct_95();
            }
            std::get<81>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_96>(union_variant_14)) {
                union_variant_14 = union_struct_96();
            }
            std::get<82>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_14)) {
                union_variant_14 = union_struct_97();
            }
            std::get<83>((*this).union_variant_14).ref = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Varint> Code::right_ref() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_34>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<20>((*this).union_variant_14).right_ref;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_35>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<21>((*this).union_variant_14).right_ref;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<27>((*this).union_variant_14).right_ref;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<30>((*this).union_variant_14).right_ref;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<31>((*this).union_variant_14).right_ref;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<32>((*this).union_variant_14).right_ref;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<35>((*this).union_variant_14).right_ref;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<36>((*this).union_variant_14).right_ref;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<38>((*this).union_variant_14).right_ref;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_56>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<42>((*this).union_variant_14).right_ref;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_57>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<43>((*this).union_variant_14).right_ref;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_78>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<64>((*this).union_variant_14).right_ref;
        }
        if (AbstractOp::CASE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::APPEND == (*this).op) {
            if (!std::holds_alternative<union_struct_82>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<68>((*this).union_variant_14).right_ref;
        }
        if (AbstractOp::DEFINE_PACKED_OPERATION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::RET == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_88>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<74>((*this).union_variant_14).right_ref;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_89>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<75>((*this).union_variant_14).right_ref;
        }
        return std::nullopt;
    }
    inline bool Code::right_ref(const Varint& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_34>(union_variant_14)) {
                union_variant_14 = union_struct_34();
            }
            std::get<20>((*this).union_variant_14).right_ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_35>(union_variant_14)) {
                union_variant_14 = union_struct_35();
            }
            std::get<21>((*this).union_variant_14).right_ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_14)) {
                union_variant_14 = union_struct_41();
            }
            std::get<27>((*this).union_variant_14).right_ref = v;
            return true;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_14)) {
                union_variant_14 = union_struct_44();
            }
            std::get<30>((*this).union_variant_14).right_ref = v;
            return true;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_14)) {
                union_variant_14 = union_struct_45();
            }
            std::get<31>((*this).union_variant_14).right_ref = v;
            return true;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_14)) {
                union_variant_14 = union_struct_46();
            }
            std::get<32>((*this).union_variant_14).right_ref = v;
            return true;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_14)) {
                union_variant_14 = union_struct_49();
            }
            std::get<35>((*this).union_variant_14).right_ref = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_14)) {
                union_variant_14 = union_struct_50();
            }
            std::get<36>((*this).union_variant_14).right_ref = v;
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_14)) {
                union_variant_14 = union_struct_52();
            }
            std::get<38>((*this).union_variant_14).right_ref = v;
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_56>(union_variant_14)) {
                union_variant_14 = union_struct_56();
            }
            std::get<42>((*this).union_variant_14).right_ref = v;
            return true;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_57>(union_variant_14)) {
                union_variant_14 = union_struct_57();
            }
            std::get<43>((*this).union_variant_14).right_ref = v;
            return true;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::DEC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_78>(union_variant_14)) {
                union_variant_14 = union_struct_78();
            }
            std::get<64>((*this).union_variant_14).right_ref = v;
            return true;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            if (!std::holds_alternative<union_struct_82>(union_variant_14)) {
                union_variant_14 = union_struct_82();
            }
            std::get<68>((*this).union_variant_14).right_ref = v;
            return true;
        }
        if (AbstractOp::DEFINE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_88>(union_variant_14)) {
                union_variant_14 = union_struct_88();
            }
            std::get<74>((*this).union_variant_14).right_ref = v;
            return true;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_89>(union_variant_14)) {
                union_variant_14 = union_struct_89();
            }
            std::get<75>((*this).union_variant_14).right_ref = v;
            return true;
        }
        return false;
    }
    inline bool Code::right_ref(Varint&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_34>(union_variant_14)) {
                union_variant_14 = union_struct_34();
            }
            std::get<20>((*this).union_variant_14).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_35>(union_variant_14)) {
                union_variant_14 = union_struct_35();
            }
            std::get<21>((*this).union_variant_14).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_14)) {
                union_variant_14 = union_struct_41();
            }
            std::get<27>((*this).union_variant_14).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_14)) {
                union_variant_14 = union_struct_44();
            }
            std::get<30>((*this).union_variant_14).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_14)) {
                union_variant_14 = union_struct_45();
            }
            std::get<31>((*this).union_variant_14).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_14)) {
                union_variant_14 = union_struct_46();
            }
            std::get<32>((*this).union_variant_14).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_14)) {
                union_variant_14 = union_struct_49();
            }
            std::get<35>((*this).union_variant_14).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_14)) {
                union_variant_14 = union_struct_50();
            }
            std::get<36>((*this).union_variant_14).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_14)) {
                union_variant_14 = union_struct_52();
            }
            std::get<38>((*this).union_variant_14).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_56>(union_variant_14)) {
                union_variant_14 = union_struct_56();
            }
            std::get<42>((*this).union_variant_14).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_57>(union_variant_14)) {
                union_variant_14 = union_struct_57();
            }
            std::get<43>((*this).union_variant_14).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::DEC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            return false;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSERT == (*this).op) {
            return false;
        }
        if (AbstractOp::IF == (*this).op) {
            return false;
        }
        if (AbstractOp::ELIF == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_78>(union_variant_14)) {
                union_variant_14 = union_struct_78();
            }
            std::get<64>((*this).union_variant_14).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::CASE == (*this).op) {
            return false;
        }
        if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::APPEND == (*this).op) {
            if (!std::holds_alternative<union_struct_82>(union_variant_14)) {
                union_variant_14 = union_struct_82();
            }
            std::get<68>((*this).union_variant_14).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DEFINE_PACKED_OPERATION == (*this).op) {
            return false;
        }
        if (AbstractOp::SWITCH_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::RET == (*this).op) {
            return false;
        }
        if (AbstractOp::MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_88>(union_variant_14)) {
                union_variant_14 = union_struct_88();
            }
            std::get<74>((*this).union_variant_14).right_ref = std::move(v);
            return true;
        }
        if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_89>(union_variant_14)) {
                union_variant_14 = union_struct_89();
            }
            std::get<75>((*this).union_variant_14).right_ref = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<Storages> Code::storage() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_25>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<11>((*this).union_variant_14).storage;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_40>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<26>((*this).union_variant_14).storage;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<40>((*this).union_variant_14).storage;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<41>((*this).union_variant_14).storage;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::INC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEC == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<47>((*this).union_variant_14).storage;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<48>((*this).union_variant_14).storage;
        }
        return std::nullopt;
    }
    inline bool Code::storage(const Storages& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_25>(union_variant_14)) {
                union_variant_14 = union_struct_25();
            }
            std::get<11>((*this).union_variant_14).storage = v;
            return true;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_40>(union_variant_14)) {
                union_variant_14 = union_struct_40();
            }
            std::get<26>((*this).union_variant_14).storage = v;
            return true;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_14)) {
                union_variant_14 = union_struct_54();
            }
            std::get<40>((*this).union_variant_14).storage = v;
            return true;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_14)) {
                union_variant_14 = union_struct_55();
            }
            std::get<41>((*this).union_variant_14).storage = v;
            return true;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::DEC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_14)) {
                union_variant_14 = union_struct_61();
            }
            std::get<47>((*this).union_variant_14).storage = v;
            return true;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_14)) {
                union_variant_14 = union_struct_62();
            }
            std::get<48>((*this).union_variant_14).storage = v;
            return true;
        }
        return false;
    }
    inline bool Code::storage(Storages&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_25>(union_variant_14)) {
                union_variant_14 = union_struct_25();
            }
            std::get<11>((*this).union_variant_14).storage = std::move(v);
            return true;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_40>(union_variant_14)) {
                union_variant_14 = union_struct_40();
            }
            std::get<26>((*this).union_variant_14).storage = std::move(v);
            return true;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            return false;
        }
        if (AbstractOp::LOOP_CONDITION == (*this).op) {
            return false;
        }
        if (AbstractOp::ACCESS == (*this).op) {
            return false;
        }
        if (AbstractOp::INDEX == (*this).op) {
            return false;
        }
        if (AbstractOp::ASSIGN == (*this).op) {
            return false;
        }
        if (AbstractOp::BACKWARD == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            return false;
        }
        if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            return false;
        }
        if (AbstractOp::DECODE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::BIT_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_14)) {
                union_variant_14 = union_struct_54();
            }
            std::get<40>((*this).union_variant_14).storage = std::move(v);
            return true;
        }
        if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_14)) {
                union_variant_14 = union_struct_55();
            }
            std::get<41>((*this).union_variant_14).storage = std::move(v);
            return true;
        }
        if (AbstractOp::CALL_ENCODE == (*this).op) {
            return false;
        }
        if (AbstractOp::CALL_DECODE == (*this).op) {
            return false;
        }
        if (AbstractOp::INC == (*this).op) {
            return false;
        }
        if (AbstractOp::DEC == (*this).op) {
            return false;
        }
        if (AbstractOp::EVAL_EXPR == (*this).op) {
            return false;
        }
        if (AbstractOp::STATIC_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_14)) {
                union_variant_14 = union_struct_61();
            }
            std::get<47>((*this).union_variant_14).storage = std::move(v);
            return true;
        }
        if (AbstractOp::NEW_OBJECT == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_14)) {
                union_variant_14 = union_struct_62();
            }
            std::get<48>((*this).union_variant_14).storage = std::move(v);
            return true;
        }
        return false;
    }
    inline std::optional<UnaryOp> Code::uop() const {
        if (AbstractOp::METADATA == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return std::nullopt;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_14)) {
                return std::nullopt;
            }
            return std::get<28>((*this).union_variant_14).uop;
        }
        return std::nullopt;
    }
    inline bool Code::uop(const UnaryOp& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_14)) {
                union_variant_14 = union_struct_42();
            }
            std::get<28>((*this).union_variant_14).uop = v;
            return true;
        }
        return false;
    }
    inline bool Code::uop(UnaryOp&& v) {
        if (AbstractOp::METADATA == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            return false;
        }
        if (AbstractOp::IMPORT == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            return false;
        }
        if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::IDENT_REF == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_STATE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FIELD == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_DECODER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            return false;
        }
        if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            return false;
        }
        if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            return false;
        }
        if (AbstractOp::BINARY == (*this).op) {
            return false;
        }
        if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_14)) {
                union_variant_14 = union_struct_42();
            }
            std::get<28>((*this).union_variant_14).uop = std::move(v);
            return true;
        }
        return false;
    }
    inline ::futils::error::Error<> Varint::encode(::futils::binary::writer& w) const {
        if ((*this).prefix() == 0) {
            std::uint8_t tmp100 = 0;
            tmp100 = (*this).value();
            tmp100 |= std::uint8_t(0) << 6;
            if (!::futils::binary::write_num(w, tmp100, true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed", ::futils::error::Category::lib);
            }
        }
        else if ((*this).prefix() == 1) {
            std::uint16_t tmp100 = 0;
            tmp100 = (*this).value();
            tmp100 |= std::uint16_t(1) << 14;
            if (!::futils::binary::write_num(w, tmp100, true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed", ::futils::error::Category::lib);
            }
        }
        else if ((*this).prefix() == 2) {
            std::uint32_t tmp100 = 0;
            tmp100 = (*this).value();
            tmp100 |= std::uint32_t(2) << 30;
            if (!::futils::binary::write_num(w, tmp100, true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed", ::futils::error::Category::lib);
            }
        }
        else if ((*this).prefix() == 3) {
            std::uint64_t tmp100 = 0;
            tmp100 = (*this).value();
            tmp100 |= std::uint64_t(3) << 62;
            if (!::futils::binary::write_num(w, tmp100, true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed", ::futils::error::Category::lib);
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Varint::decode(::futils::binary::reader& r) {
        if (!r.load_stream(1)) {
            return ::futils::error::Error<>("decode: Varint::value: read bit field failed", ::futils::error::Category::lib);
        }
        std::uint8_t tmp101 = (r.top() >> 6) & 0x3;
        (*this).prefix(tmp101);
        if ((*this).prefix() == 0) {
            std::uint8_t tmp102 = 0;
            if (!::futils::binary::read_num(r, tmp102, true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed", ::futils::error::Category::lib);
            }
            tmp102 &= ~(std::uint8_t(0x3) << 6);
            (*this).value(tmp102);
        }
        else if ((*this).prefix() == 1) {
            std::uint16_t tmp103 = 0;
            if (!::futils::binary::read_num(r, tmp103, true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed", ::futils::error::Category::lib);
            }
            tmp103 &= ~(std::uint16_t(0x3) << 14);
            (*this).value(tmp103);
        }
        else if ((*this).prefix() == 2) {
            std::uint32_t tmp104 = 0;
            if (!::futils::binary::read_num(r, tmp104, true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed", ::futils::error::Category::lib);
            }
            tmp104 &= ~(std::uint32_t(0x3) << 30);
            (*this).value(tmp104);
        }
        else if ((*this).prefix() == 3) {
            std::uint64_t tmp105 = 0;
            if (!::futils::binary::read_num(r, tmp105, true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed", ::futils::error::Category::lib);
            }
            tmp105 &= ~(std::uint64_t(0x3) << 62);
            (*this).value(tmp105);
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Range::encode(::futils::binary::writer& w) const {
        if (!::futils::binary::write_num(w, static_cast<std::uint64_t>((*this).start), true)) {
            return ::futils::error::Error<>("encode: Range::start: write std::uint64_t failed", ::futils::error::Category::lib);
        }
        if (!::futils::binary::write_num(w, static_cast<std::uint64_t>((*this).end), true)) {
            return ::futils::error::Error<>("encode: Range::end: write std::uint64_t failed", ::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Range::decode(::futils::binary::reader& r) {
        if (!::futils::binary::read_num(r, (*this).start, true)) {
            return ::futils::error::Error<>("decode: Range::start: read int failed", ::futils::error::Category::lib);
        }
        if (!::futils::binary::read_num(r, (*this).end, true)) {
            return ::futils::error::Error<>("decode: Range::end: read int failed", ::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> String::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).length.encode(w)) {
            return err;
        }
        auto tmp_106_ = (*this).length.value();
        if (tmp_106_ != (*this).data.size()) {
            return ::futils::error::Error<>("encode: String::data: dynamic length is not compatible with its length; tmp_106_!=(*this).data.size()", ::futils::error::Category::lib);
        }
        if (!w.write((*this).data)) {
            return ::futils::error::Error<>("encode: String::data: write array failed", ::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> String::decode(::futils::binary::reader& r) {
        if (auto err = (*this).length.decode(r)) {
            return err;
        }
        auto tmp_107_ = (*this).length.value();
        if (!r.read((*this).data, tmp_107_)) {
            return ::futils::error::Error<>("decode: String::data: read byte array failed", ::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> IdentIndex::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).ident.encode(w)) {
            return err;
        }
        if (auto err = (*this).index.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> IdentIndex::decode(::futils::binary::reader& r) {
        if (auto err = (*this).ident.decode(r)) {
            return err;
        }
        if (auto err = (*this).index.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Storage::encode(::futils::binary::writer& w) const {
        auto tmp_108_ = static_cast<std::uint8_t>((*this).type);
        if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_108_), true)) {
            return ::futils::error::Error<>("encode: Storage::type: write std::uint8_t failed", ::futils::error::Category::lib);
        }
        if (StorageType::INT == (*this).type) {
            if (!std::holds_alternative<union_struct_4>(union_variant_3)) {
                return ::futils::error::Error<>("encode: Storage: union_variant_3 variant alternative union_struct_4 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<1>((*this).union_variant_3).size.encode(w)) {
                return err;
            }
        }
        else if (StorageType::UINT == (*this).type) {
            if (!std::holds_alternative<union_struct_5>(union_variant_3)) {
                return ::futils::error::Error<>("encode: Storage: union_variant_3 variant alternative union_struct_5 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<2>((*this).union_variant_3).size.encode(w)) {
                return err;
            }
        }
        else if (StorageType::FLOAT == (*this).type) {
            if (!std::holds_alternative<union_struct_6>(union_variant_3)) {
                return ::futils::error::Error<>("encode: Storage: union_variant_3 variant alternative union_struct_6 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<3>((*this).union_variant_3).size.encode(w)) {
                return err;
            }
        }
        else if (StorageType::STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_3)) {
                return ::futils::error::Error<>("encode: Storage: union_variant_3 variant alternative union_struct_7 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<4>((*this).union_variant_3).size.encode(w)) {
                return err;
            }
            if (auto err = std::get<4>((*this).union_variant_3).ref.encode(w)) {
                return err;
            }
        }
        else if (StorageType::RECURSIVE_STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_8>(union_variant_3)) {
                return ::futils::error::Error<>("encode: Storage: union_variant_3 variant alternative union_struct_8 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<5>((*this).union_variant_3).ref.encode(w)) {
                return err;
            }
        }
        else if (StorageType::BYTE_VECTOR == (*this).type) {
        }
        else if (StorageType::ENUM == (*this).type) {
            if (!std::holds_alternative<union_struct_10>(union_variant_3)) {
                return ::futils::error::Error<>("encode: Storage: union_variant_3 variant alternative union_struct_10 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<7>((*this).union_variant_3).ref.encode(w)) {
                return err;
            }
        }
        else if (StorageType::ARRAY == (*this).type) {
            if (!std::holds_alternative<union_struct_11>(union_variant_3)) {
                return ::futils::error::Error<>("encode: Storage: union_variant_3 variant alternative union_struct_11 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<8>((*this).union_variant_3).size.encode(w)) {
                return err;
            }
        }
        else if (StorageType::VARIANT == (*this).type) {
            if (!std::holds_alternative<union_struct_12>(union_variant_3)) {
                return ::futils::error::Error<>("encode: Storage: union_variant_3 variant alternative union_struct_12 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<9>((*this).union_variant_3).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<9>((*this).union_variant_3).size.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Storage::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_109_ = 0;
        if (!::futils::binary::read_num(r, tmp_109_, true)) {
            return ::futils::error::Error<>("decode: Storage::type: read int failed", ::futils::error::Category::lib);
        }
        (*this).type = static_cast<StorageType>(tmp_109_);
        if (StorageType::INT == (*this).type) {
            if (!std::holds_alternative<union_struct_4>(union_variant_3)) {
                union_variant_3 = union_struct_4();
            }
            if (auto err = std::get<1>((*this).union_variant_3).size.decode(r)) {
                return err;
            }
        }
        else if (StorageType::UINT == (*this).type) {
            if (!std::holds_alternative<union_struct_5>(union_variant_3)) {
                union_variant_3 = union_struct_5();
            }
            if (auto err = std::get<2>((*this).union_variant_3).size.decode(r)) {
                return err;
            }
        }
        else if (StorageType::FLOAT == (*this).type) {
            if (!std::holds_alternative<union_struct_6>(union_variant_3)) {
                union_variant_3 = union_struct_6();
            }
            if (auto err = std::get<3>((*this).union_variant_3).size.decode(r)) {
                return err;
            }
        }
        else if (StorageType::STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_7>(union_variant_3)) {
                union_variant_3 = union_struct_7();
            }
            if (auto err = std::get<4>((*this).union_variant_3).size.decode(r)) {
                return err;
            }
            if (auto err = std::get<4>((*this).union_variant_3).ref.decode(r)) {
                return err;
            }
        }
        else if (StorageType::RECURSIVE_STRUCT_REF == (*this).type) {
            if (!std::holds_alternative<union_struct_8>(union_variant_3)) {
                union_variant_3 = union_struct_8();
            }
            if (auto err = std::get<5>((*this).union_variant_3).ref.decode(r)) {
                return err;
            }
        }
        else if (StorageType::BYTE_VECTOR == (*this).type) {
            if (!std::holds_alternative<union_struct_9>(union_variant_3)) {
                union_variant_3 = union_struct_9();
            }
        }
        else if (StorageType::ENUM == (*this).type) {
            if (!std::holds_alternative<union_struct_10>(union_variant_3)) {
                union_variant_3 = union_struct_10();
            }
            if (auto err = std::get<7>((*this).union_variant_3).ref.decode(r)) {
                return err;
            }
        }
        else if (StorageType::ARRAY == (*this).type) {
            if (!std::holds_alternative<union_struct_11>(union_variant_3)) {
                union_variant_3 = union_struct_11();
            }
            if (auto err = std::get<8>((*this).union_variant_3).size.decode(r)) {
                return err;
            }
        }
        else if (StorageType::VARIANT == (*this).type) {
            if (!std::holds_alternative<union_struct_12>(union_variant_3)) {
                union_variant_3 = union_struct_12();
            }
            if (auto err = std::get<9>((*this).union_variant_3).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<9>((*this).union_variant_3).size.decode(r)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Metadata::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).len_exprs.encode(w)) {
            return err;
        }
        auto tmp_110_ = (*this).len_exprs.value();
        if (tmp_110_ != (*this).expr_refs.size()) {
            return ::futils::error::Error<>("encode: Metadata::expr_refs: dynamic length is not compatible with its length; tmp_110_!=(*this).expr_refs.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_111_ : (*this).expr_refs) {
            if (auto err = tmp_111_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Metadata::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).len_exprs.decode(r)) {
            return err;
        }
        auto tmp_112_ = (*this).len_exprs.value();
        (*this).expr_refs.clear();
        for (size_t tmp_114_ = 0; tmp_114_ < tmp_112_; ++tmp_114_) {
            Varint tmp_113_;
            if (auto err = tmp_113_.decode(r)) {
                return err;
            }
            (*this).expr_refs.push_back(std::move(tmp_113_));
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Param::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len_exprs.encode(w)) {
            return err;
        }
        auto tmp_115_ = (*this).len_exprs.value();
        if (tmp_115_ != (*this).expr_refs.size()) {
            return ::futils::error::Error<>("encode: Param::expr_refs: dynamic length is not compatible with its length; tmp_115_!=(*this).expr_refs.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_116_ : (*this).expr_refs) {
            if (auto err = tmp_116_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Param::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len_exprs.decode(r)) {
            return err;
        }
        auto tmp_117_ = (*this).len_exprs.value();
        (*this).expr_refs.clear();
        for (size_t tmp_119_ = 0; tmp_119_ < tmp_117_; ++tmp_119_) {
            Varint tmp_118_;
            if (auto err = tmp_118_.decode(r)) {
                return err;
            }
            (*this).expr_refs.push_back(std::move(tmp_118_));
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> RangePacked::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).start.encode(w)) {
            return err;
        }
        if (auto err = (*this).end.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> RangePacked::decode(::futils::binary::reader& r) {
        if (auto err = (*this).start.decode(r)) {
            return err;
        }
        if (auto err = (*this).end.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> StringRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).code.encode(w)) {
            return err;
        }
        if (auto err = (*this).string.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> StringRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).code.decode(r)) {
            return err;
        }
        if (auto err = (*this).string.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Storages::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).length.encode(w)) {
            return err;
        }
        auto tmp_120_ = (*this).length.value();
        if (tmp_120_ != (*this).storages.size()) {
            return ::futils::error::Error<>("encode: Storages::storages: dynamic length is not compatible with its length; tmp_120_!=(*this).storages.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_121_ : (*this).storages) {
            if (auto err = tmp_121_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Storages::decode(::futils::binary::reader& r) {
        if (auto err = (*this).length.decode(r)) {
            return err;
        }
        auto tmp_122_ = (*this).length.value();
        (*this).storages.clear();
        for (size_t tmp_124_ = 0; tmp_124_ < tmp_122_; ++tmp_124_) {
            Storage tmp_123_;
            if (auto err = tmp_123_.decode(r)) {
                return err;
            }
            (*this).storages.push_back(std::move(tmp_123_));
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> StringRefs::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).refs_length.encode(w)) {
            return err;
        }
        auto tmp_125_ = (*this).refs_length.value();
        if (tmp_125_ != (*this).refs.size()) {
            return ::futils::error::Error<>("encode: StringRefs::refs: dynamic length is not compatible with its length; tmp_125_!=(*this).refs.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_126_ : (*this).refs) {
            if (auto err = tmp_126_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> StringRefs::decode(::futils::binary::reader& r) {
        if (auto err = (*this).refs_length.decode(r)) {
            return err;
        }
        auto tmp_127_ = (*this).refs_length.value();
        (*this).refs.clear();
        for (size_t tmp_129_ = 0; tmp_129_ < tmp_127_; ++tmp_129_) {
            StringRef tmp_128_;
            if (auto err = tmp_128_.decode(r)) {
                return err;
            }
            (*this).refs.push_back(std::move(tmp_128_));
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> IdentIndexs::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).refs_length.encode(w)) {
            return err;
        }
        auto tmp_130_ = (*this).refs_length.value();
        if (tmp_130_ != (*this).refs.size()) {
            return ::futils::error::Error<>("encode: IdentIndexs::refs: dynamic length is not compatible with its length; tmp_130_!=(*this).refs.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_131_ : (*this).refs) {
            if (auto err = tmp_131_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> IdentIndexs::decode(::futils::binary::reader& r) {
        if (auto err = (*this).refs_length.decode(r)) {
            return err;
        }
        auto tmp_132_ = (*this).refs_length.value();
        (*this).refs.clear();
        for (size_t tmp_134_ = 0; tmp_134_ < tmp_132_; ++tmp_134_) {
            IdentIndex tmp_133_;
            if (auto err = tmp_133_.decode(r)) {
                return err;
            }
            (*this).refs.push_back(std::move(tmp_133_));
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Ranges::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).length.encode(w)) {
            return err;
        }
        auto tmp_135_ = (*this).length.value();
        if (tmp_135_ != (*this).ranges.size()) {
            return ::futils::error::Error<>("encode: Ranges::ranges: dynamic length is not compatible with its length; tmp_135_!=(*this).ranges.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_136_ : (*this).ranges) {
            if (auto err = tmp_136_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Ranges::decode(::futils::binary::reader& r) {
        if (auto err = (*this).length.decode(r)) {
            return err;
        }
        auto tmp_137_ = (*this).length.value();
        (*this).ranges.clear();
        for (size_t tmp_139_ = 0; tmp_139_ < tmp_137_; ++tmp_139_) {
            RangePacked tmp_138_;
            if (auto err = tmp_138_.decode(r)) {
                return err;
            }
            (*this).ranges.push_back(std::move(tmp_138_));
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> IdentRange::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).ident.encode(w)) {
            return err;
        }
        if (auto err = (*this).range.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> IdentRange::decode(::futils::binary::reader& r) {
        if (auto err = (*this).ident.decode(r)) {
            return err;
        }
        if (auto err = (*this).range.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> IdentRanges::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).length.encode(w)) {
            return err;
        }
        auto tmp_140_ = (*this).length.value();
        if (tmp_140_ != (*this).ranges.size()) {
            return ::futils::error::Error<>("encode: IdentRanges::ranges: dynamic length is not compatible with its length; tmp_140_!=(*this).ranges.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_141_ : (*this).ranges) {
            if (auto err = tmp_141_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> IdentRanges::decode(::futils::binary::reader& r) {
        if (auto err = (*this).length.decode(r)) {
            return err;
        }
        auto tmp_142_ = (*this).length.value();
        (*this).ranges.clear();
        for (size_t tmp_144_ = 0; tmp_144_ < tmp_142_; ++tmp_144_) {
            IdentRange tmp_143_;
            if (auto err = tmp_143_.decode(r)) {
                return err;
            }
            (*this).ranges.push_back(std::move(tmp_143_));
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Code::encode(::futils::binary::writer& w) const {
        auto tmp_145_ = static_cast<std::uint8_t>((*this).op);
        if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_145_), true)) {
            return ::futils::error::Error<>("encode: Code::op: write std::uint8_t failed", ::futils::error::Category::lib);
        }
        if (AbstractOp::METADATA == (*this).op) {
            if (!std::holds_alternative<union_struct_15>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_15 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<1>((*this).union_variant_14).metadata.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_16>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_16 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<2>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IMPORT == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_17 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<3>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<3>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            if (!std::holds_alternative<union_struct_18>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_18 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<4>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<4>((*this).union_variant_14).int_value.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_19>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_19 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<5>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_14).int_value.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            if (!std::holds_alternative<union_struct_20>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_20 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<6>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            if (!std::holds_alternative<union_struct_21>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_21 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<7>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (!::futils::binary::write_num(w, static_cast<std::uint64_t>(std::get<7>((*this).union_variant_14).int_value64), true)) {
                return ::futils::error::Error<>("encode: Code::int_value64: write std::uint64_t failed", ::futils::error::Category::lib);
            }
        }
        else if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            if (!std::holds_alternative<union_struct_22>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_22 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<8>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            if (!std::holds_alternative<union_struct_23>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_23 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<9>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            if (!std::holds_alternative<union_struct_24>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_24 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<10>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_25>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_25 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<11>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<11>((*this).union_variant_14).storage.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IDENT_REF == (*this).op) {
            if (!std::holds_alternative<union_struct_26>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_26 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<12>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_27>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_27 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<13>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_28>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_28 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<14>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_29 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<15>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<15>((*this).union_variant_14).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_30>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_30 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<16>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<16>((*this).union_variant_14).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_31>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_31 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<17>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_32>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_32 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<18>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_33 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<19>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<19>((*this).union_variant_14).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_34>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_34 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<20>((*this).union_variant_14).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<20>((*this).union_variant_14).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_35>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_35 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<21>((*this).union_variant_14).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<21>((*this).union_variant_14).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_36>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_36 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<22>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<22>((*this).union_variant_14).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_37 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<23>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<23>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_38>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_38 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<24>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<24>((*this).union_variant_14).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_39 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<25>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<25>((*this).union_variant_14).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_40>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_40 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<26>((*this).union_variant_14).storage.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_41 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<27>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            auto tmp_146_ = static_cast<std::uint8_t>(std::get<27>((*this).union_variant_14).bop);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_146_), true)) {
                return ::futils::error::Error<>("encode: Code::bop: write std::uint8_t failed", ::futils::error::Category::lib);
            }
            if (auto err = std::get<27>((*this).union_variant_14).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<27>((*this).union_variant_14).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_42 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<28>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            auto tmp_147_ = static_cast<std::uint8_t>(std::get<28>((*this).union_variant_14).uop);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_147_), true)) {
                return ::futils::error::Error<>("encode: Code::uop: write std::uint8_t failed", ::futils::error::Category::lib);
            }
            if (auto err = std::get<28>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::LOOP_CONDITION == (*this).op) {
            if (!std::holds_alternative<union_struct_43>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_43 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<29>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_44 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<30>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<30>((*this).union_variant_14).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<30>((*this).union_variant_14).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_45 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<31>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<31>((*this).union_variant_14).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<31>((*this).union_variant_14).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_46 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<32>((*this).union_variant_14).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<32>((*this).union_variant_14).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::BACKWARD == (*this).op) {
            if (!std::holds_alternative<union_struct_47>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_47 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<33>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_48>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_48 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<34>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
            auto tmp_148_ = static_cast<std::uint8_t>(std::get<34>((*this).union_variant_14).endian);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_148_), true)) {
                return ::futils::error::Error<>("encode: Code::endian: write std::uint8_t failed", ::futils::error::Category::lib);
            }
            if (auto err = std::get<34>((*this).union_variant_14).bit_size.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_49 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<35>((*this).union_variant_14).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<35>((*this).union_variant_14).right_ref.encode(w)) {
                return err;
            }
            auto tmp_149_ = static_cast<std::uint8_t>(std::get<35>((*this).union_variant_14).endian);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_149_), true)) {
                return ::futils::error::Error<>("encode: Code::endian: write std::uint8_t failed", ::futils::error::Category::lib);
            }
            if (auto err = std::get<35>((*this).union_variant_14).bit_size.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_50 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<36>((*this).union_variant_14).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<36>((*this).union_variant_14).right_ref.encode(w)) {
                return err;
            }
            auto tmp_150_ = static_cast<std::uint8_t>(std::get<36>((*this).union_variant_14).endian);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_150_), true)) {
                return ::futils::error::Error<>("encode: Code::endian: write std::uint8_t failed", ::futils::error::Category::lib);
            }
            if (auto err = std::get<36>((*this).union_variant_14).bit_size.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_51 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<37>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
            auto tmp_151_ = static_cast<std::uint8_t>(std::get<37>((*this).union_variant_14).endian);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_151_), true)) {
                return ::futils::error::Error<>("encode: Code::endian: write std::uint8_t failed", ::futils::error::Category::lib);
            }
            if (auto err = std::get<37>((*this).union_variant_14).bit_size.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_52 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<38>((*this).union_variant_14).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<38>((*this).union_variant_14).right_ref.encode(w)) {
                return err;
            }
            auto tmp_152_ = static_cast<std::uint8_t>(std::get<38>((*this).union_variant_14).endian);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_152_), true)) {
                return ::futils::error::Error<>("encode: Code::endian: write std::uint8_t failed", ::futils::error::Category::lib);
            }
            if (auto err = std::get<38>((*this).union_variant_14).bit_size.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_53 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<39>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
            auto tmp_153_ = static_cast<std::uint8_t>(std::get<39>((*this).union_variant_14).endian);
            if (!::futils::binary::write_num(w, static_cast<std::uint8_t>(tmp_153_), true)) {
                return ::futils::error::Error<>("encode: Code::endian: write std::uint8_t failed", ::futils::error::Category::lib);
            }
            if (auto err = std::get<39>((*this).union_variant_14).bit_size.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::BIT_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_54 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<40>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<40>((*this).union_variant_14).storage.encode(w)) {
                return err;
            }
            if (auto err = std::get<40>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_55 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<41>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<41>((*this).union_variant_14).storage.encode(w)) {
                return err;
            }
            if (auto err = std::get<41>((*this).union_variant_14).param.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_56>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_56 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<42>((*this).union_variant_14).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<42>((*this).union_variant_14).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_57>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_57 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<43>((*this).union_variant_14).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<43>((*this).union_variant_14).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::INC == (*this).op) {
            if (!std::holds_alternative<union_struct_58>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_58 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<44>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEC == (*this).op) {
            if (!std::holds_alternative<union_struct_59>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_59 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<45>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::EVAL_EXPR == (*this).op) {
            if (!std::holds_alternative<union_struct_60>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_60 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<46>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::STATIC_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_61 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<47>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<47>((*this).union_variant_14).storage.encode(w)) {
                return err;
            }
            if (auto err = std::get<47>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::NEW_OBJECT == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_62 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<48>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<48>((*this).union_variant_14).storage.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ASSERT == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_63 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<49>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::IF == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_64 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<50>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ELIF == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_65 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<51>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_66 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<52>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_67 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<53>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_68 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<54>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_69 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<55>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_70>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_70 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<56>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_71>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_71 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<57>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_72>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_72 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<58>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_73>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_73 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<59>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_74>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_74 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<60>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_75>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_75 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<61>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_76>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_76 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<62>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_77>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_77 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<63>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_78>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_78 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<64>((*this).union_variant_14).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<64>((*this).union_variant_14).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::CASE == (*this).op) {
            if (!std::holds_alternative<union_struct_79>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_79 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<65>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_80>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_80 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<66>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_81>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_81 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<67>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<67>((*this).union_variant_14).belong.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::APPEND == (*this).op) {
            if (!std::holds_alternative<union_struct_82>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_82 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<68>((*this).union_variant_14).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<68>((*this).union_variant_14).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_83>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_83 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<69>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::SWITCH_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_84>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_84 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<70>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::RET == (*this).op) {
            if (!std::holds_alternative<union_struct_85>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_85 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<71>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_86>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_86 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<72>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_87>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_87 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<73>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_88>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_88 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<74>((*this).union_variant_14).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<74>((*this).union_variant_14).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_89>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_89 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<75>((*this).union_variant_14).left_ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<75>((*this).union_variant_14).right_ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_90 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<76>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_91 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<77>((*this).union_variant_14).param.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_92 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<78>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<78>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
            if (auto err = std::get<78>((*this).union_variant_14).param.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::BIT_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_93>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_93 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<79>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::BYTE_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_94>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_94 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<80>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::ARRAY_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_95 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<81>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
            if (auto err = std::get<81>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_96>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_96 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<82>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_97 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<83>((*this).union_variant_14).ref.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::CAN_READ == (*this).op) {
            if (!std::holds_alternative<union_struct_98>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_98 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<84>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
        }
        else if (AbstractOp::REMAIN_BYTES == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_14)) {
                return ::futils::error::Error<>("encode: Code: union_variant_14 variant alternative union_struct_99 is not set", ::futils::error::Category::lib);
            }
            if (auto err = std::get<85>((*this).union_variant_14).ident.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> Code::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_154_ = 0;
        if (!::futils::binary::read_num(r, tmp_154_, true)) {
            return ::futils::error::Error<>("decode: Code::op: read int failed", ::futils::error::Category::lib);
        }
        (*this).op = static_cast<AbstractOp>(tmp_154_);
        if (AbstractOp::METADATA == (*this).op) {
            if (!std::holds_alternative<union_struct_15>(union_variant_14)) {
                union_variant_14 = union_struct_15();
            }
            if (auto err = std::get<1>((*this).union_variant_14).metadata.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_16>(union_variant_14)) {
                union_variant_14 = union_struct_16();
            }
            if (auto err = std::get<2>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IMPORT == (*this).op) {
            if (!std::holds_alternative<union_struct_17>(union_variant_14)) {
                union_variant_14 = union_struct_17();
            }
            if (auto err = std::get<3>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<3>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_CHAR == (*this).op) {
            if (!std::holds_alternative<union_struct_18>(union_variant_14)) {
                union_variant_14 = union_struct_18();
            }
            if (auto err = std::get<4>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<4>((*this).union_variant_14).int_value.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_19>(union_variant_14)) {
                union_variant_14 = union_struct_19();
            }
            if (auto err = std::get<5>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_14).int_value.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::SPECIFY_FIXED_VALUE == (*this).op) {
            if (!std::holds_alternative<union_struct_20>(union_variant_14)) {
                union_variant_14 = union_struct_20();
            }
            if (auto err = std::get<6>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_INT64 == (*this).op) {
            if (!std::holds_alternative<union_struct_21>(union_variant_14)) {
                union_variant_14 = union_struct_21();
            }
            if (auto err = std::get<7>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (!::futils::binary::read_num(r, std::get<7>((*this).union_variant_14).int_value64, true)) {
                return ::futils::error::Error<>("decode: Code::int_value64: read int failed", ::futils::error::Category::lib);
            }
        }
        else if (AbstractOp::IMMEDIATE_STRING == (*this).op) {
            if (!std::holds_alternative<union_struct_22>(union_variant_14)) {
                union_variant_14 = union_struct_22();
            }
            if (auto err = std::get<8>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_TRUE == (*this).op) {
            if (!std::holds_alternative<union_struct_23>(union_variant_14)) {
                union_variant_14 = union_struct_23();
            }
            if (auto err = std::get<9>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_FALSE == (*this).op) {
            if (!std::holds_alternative<union_struct_24>(union_variant_14)) {
                union_variant_14 = union_struct_24();
            }
            if (auto err = std::get<10>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IMMEDIATE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_25>(union_variant_14)) {
                union_variant_14 = union_struct_25();
            }
            if (auto err = std::get<11>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<11>((*this).union_variant_14).storage.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IDENT_REF == (*this).op) {
            if (!std::holds_alternative<union_struct_26>(union_variant_14)) {
                union_variant_14 = union_struct_26();
            }
            if (auto err = std::get<12>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_27>(union_variant_14)) {
                union_variant_14 = union_struct_27();
            }
            if (auto err = std::get<13>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_28>(union_variant_14)) {
                union_variant_14 = union_struct_28();
            }
            if (auto err = std::get<14>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_29>(union_variant_14)) {
                union_variant_14 = union_struct_29();
            }
            if (auto err = std::get<15>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<15>((*this).union_variant_14).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_30>(union_variant_14)) {
                union_variant_14 = union_struct_30();
            }
            if (auto err = std::get<16>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<16>((*this).union_variant_14).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_31>(union_variant_14)) {
                union_variant_14 = union_struct_31();
            }
            if (auto err = std::get<17>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_32>(union_variant_14)) {
                union_variant_14 = union_struct_32();
            }
            if (auto err = std::get<18>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_33>(union_variant_14)) {
                union_variant_14 = union_struct_33();
            }
            if (auto err = std::get<19>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<19>((*this).union_variant_14).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_ENCODER == (*this).op) {
            if (!std::holds_alternative<union_struct_34>(union_variant_14)) {
                union_variant_14 = union_struct_34();
            }
            if (auto err = std::get<20>((*this).union_variant_14).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<20>((*this).union_variant_14).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_DECODER == (*this).op) {
            if (!std::holds_alternative<union_struct_35>(union_variant_14)) {
                union_variant_14 = union_struct_35();
            }
            if (auto err = std::get<21>((*this).union_variant_14).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<21>((*this).union_variant_14).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_36>(union_variant_14)) {
                union_variant_14 = union_struct_36();
            }
            if (auto err = std::get<22>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<22>((*this).union_variant_14).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_VARIABLE == (*this).op) {
            if (!std::holds_alternative<union_struct_37>(union_variant_14)) {
                union_variant_14 = union_struct_37();
            }
            if (auto err = std::get<23>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<23>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_38>(union_variant_14)) {
                union_variant_14 = union_struct_38();
            }
            if (auto err = std::get<24>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<24>((*this).union_variant_14).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_39>(union_variant_14)) {
                union_variant_14 = union_struct_39();
            }
            if (auto err = std::get<25>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<25>((*this).union_variant_14).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::SPECIFY_STORAGE_TYPE == (*this).op) {
            if (!std::holds_alternative<union_struct_40>(union_variant_14)) {
                union_variant_14 = union_struct_40();
            }
            if (auto err = std::get<26>((*this).union_variant_14).storage.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::BINARY == (*this).op) {
            if (!std::holds_alternative<union_struct_41>(union_variant_14)) {
                union_variant_14 = union_struct_41();
            }
            if (auto err = std::get<27>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            std::uint8_t tmp_155_ = 0;
            if (!::futils::binary::read_num(r, tmp_155_, true)) {
                return ::futils::error::Error<>("decode: Code::bop: read int failed", ::futils::error::Category::lib);
            }
            std::get<27>((*this).union_variant_14).bop = static_cast<BinaryOp>(tmp_155_);
            if (auto err = std::get<27>((*this).union_variant_14).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<27>((*this).union_variant_14).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::UNARY == (*this).op) {
            if (!std::holds_alternative<union_struct_42>(union_variant_14)) {
                union_variant_14 = union_struct_42();
            }
            if (auto err = std::get<28>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            std::uint8_t tmp_156_ = 0;
            if (!::futils::binary::read_num(r, tmp_156_, true)) {
                return ::futils::error::Error<>("decode: Code::uop: read int failed", ::futils::error::Category::lib);
            }
            std::get<28>((*this).union_variant_14).uop = static_cast<UnaryOp>(tmp_156_);
            if (auto err = std::get<28>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::LOOP_CONDITION == (*this).op) {
            if (!std::holds_alternative<union_struct_43>(union_variant_14)) {
                union_variant_14 = union_struct_43();
            }
            if (auto err = std::get<29>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ACCESS == (*this).op) {
            if (!std::holds_alternative<union_struct_44>(union_variant_14)) {
                union_variant_14 = union_struct_44();
            }
            if (auto err = std::get<30>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<30>((*this).union_variant_14).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<30>((*this).union_variant_14).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::INDEX == (*this).op) {
            if (!std::holds_alternative<union_struct_45>(union_variant_14)) {
                union_variant_14 = union_struct_45();
            }
            if (auto err = std::get<31>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<31>((*this).union_variant_14).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<31>((*this).union_variant_14).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ASSIGN == (*this).op) {
            if (!std::holds_alternative<union_struct_46>(union_variant_14)) {
                union_variant_14 = union_struct_46();
            }
            if (auto err = std::get<32>((*this).union_variant_14).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<32>((*this).union_variant_14).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::BACKWARD == (*this).op) {
            if (!std::holds_alternative<union_struct_47>(union_variant_14)) {
                union_variant_14 = union_struct_47();
            }
            if (auto err = std::get<33>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ENCODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_48>(union_variant_14)) {
                union_variant_14 = union_struct_48();
            }
            if (auto err = std::get<34>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
            std::uint8_t tmp_157_ = 0;
            if (!::futils::binary::read_num(r, tmp_157_, true)) {
                return ::futils::error::Error<>("decode: Code::endian: read int failed", ::futils::error::Category::lib);
            }
            std::get<34>((*this).union_variant_14).endian = static_cast<Endian>(tmp_157_);
            if (auto err = std::get<34>((*this).union_variant_14).bit_size.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ENCODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_49>(union_variant_14)) {
                union_variant_14 = union_struct_49();
            }
            if (auto err = std::get<35>((*this).union_variant_14).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<35>((*this).union_variant_14).right_ref.decode(r)) {
                return err;
            }
            std::uint8_t tmp_158_ = 0;
            if (!::futils::binary::read_num(r, tmp_158_, true)) {
                return ::futils::error::Error<>("decode: Code::endian: read int failed", ::futils::error::Category::lib);
            }
            std::get<35>((*this).union_variant_14).endian = static_cast<Endian>(tmp_158_);
            if (auto err = std::get<35>((*this).union_variant_14).bit_size.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECODE_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_50>(union_variant_14)) {
                union_variant_14 = union_struct_50();
            }
            if (auto err = std::get<36>((*this).union_variant_14).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<36>((*this).union_variant_14).right_ref.decode(r)) {
                return err;
            }
            std::uint8_t tmp_159_ = 0;
            if (!::futils::binary::read_num(r, tmp_159_, true)) {
                return ::futils::error::Error<>("decode: Code::endian: read int failed", ::futils::error::Category::lib);
            }
            std::get<36>((*this).union_variant_14).endian = static_cast<Endian>(tmp_159_);
            if (auto err = std::get<36>((*this).union_variant_14).bit_size.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECODE_INT_VECTOR_UNTIL_EOF == (*this).op) {
            if (!std::holds_alternative<union_struct_51>(union_variant_14)) {
                union_variant_14 = union_struct_51();
            }
            if (auto err = std::get<37>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
            std::uint8_t tmp_160_ = 0;
            if (!::futils::binary::read_num(r, tmp_160_, true)) {
                return ::futils::error::Error<>("decode: Code::endian: read int failed", ::futils::error::Category::lib);
            }
            std::get<37>((*this).union_variant_14).endian = static_cast<Endian>(tmp_160_);
            if (auto err = std::get<37>((*this).union_variant_14).bit_size.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::PEEK_INT_VECTOR == (*this).op) {
            if (!std::holds_alternative<union_struct_52>(union_variant_14)) {
                union_variant_14 = union_struct_52();
            }
            if (auto err = std::get<38>((*this).union_variant_14).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<38>((*this).union_variant_14).right_ref.decode(r)) {
                return err;
            }
            std::uint8_t tmp_161_ = 0;
            if (!::futils::binary::read_num(r, tmp_161_, true)) {
                return ::futils::error::Error<>("decode: Code::endian: read int failed", ::futils::error::Category::lib);
            }
            std::get<38>((*this).union_variant_14).endian = static_cast<Endian>(tmp_161_);
            if (auto err = std::get<38>((*this).union_variant_14).bit_size.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECODE_INT == (*this).op) {
            if (!std::holds_alternative<union_struct_53>(union_variant_14)) {
                union_variant_14 = union_struct_53();
            }
            if (auto err = std::get<39>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
            std::uint8_t tmp_162_ = 0;
            if (!::futils::binary::read_num(r, tmp_162_, true)) {
                return ::futils::error::Error<>("decode: Code::endian: read int failed", ::futils::error::Category::lib);
            }
            std::get<39>((*this).union_variant_14).endian = static_cast<Endian>(tmp_162_);
            if (auto err = std::get<39>((*this).union_variant_14).bit_size.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::BIT_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_54>(union_variant_14)) {
                union_variant_14 = union_struct_54();
            }
            if (auto err = std::get<40>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<40>((*this).union_variant_14).storage.decode(r)) {
                return err;
            }
            if (auto err = std::get<40>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::CALL_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_55>(union_variant_14)) {
                union_variant_14 = union_struct_55();
            }
            if (auto err = std::get<41>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<41>((*this).union_variant_14).storage.decode(r)) {
                return err;
            }
            if (auto err = std::get<41>((*this).union_variant_14).param.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::CALL_ENCODE == (*this).op) {
            if (!std::holds_alternative<union_struct_56>(union_variant_14)) {
                union_variant_14 = union_struct_56();
            }
            if (auto err = std::get<42>((*this).union_variant_14).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<42>((*this).union_variant_14).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::CALL_DECODE == (*this).op) {
            if (!std::holds_alternative<union_struct_57>(union_variant_14)) {
                union_variant_14 = union_struct_57();
            }
            if (auto err = std::get<43>((*this).union_variant_14).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<43>((*this).union_variant_14).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::INC == (*this).op) {
            if (!std::holds_alternative<union_struct_58>(union_variant_14)) {
                union_variant_14 = union_struct_58();
            }
            if (auto err = std::get<44>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEC == (*this).op) {
            if (!std::holds_alternative<union_struct_59>(union_variant_14)) {
                union_variant_14 = union_struct_59();
            }
            if (auto err = std::get<45>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::EVAL_EXPR == (*this).op) {
            if (!std::holds_alternative<union_struct_60>(union_variant_14)) {
                union_variant_14 = union_struct_60();
            }
            if (auto err = std::get<46>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::STATIC_CAST == (*this).op) {
            if (!std::holds_alternative<union_struct_61>(union_variant_14)) {
                union_variant_14 = union_struct_61();
            }
            if (auto err = std::get<47>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<47>((*this).union_variant_14).storage.decode(r)) {
                return err;
            }
            if (auto err = std::get<47>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::NEW_OBJECT == (*this).op) {
            if (!std::holds_alternative<union_struct_62>(union_variant_14)) {
                union_variant_14 = union_struct_62();
            }
            if (auto err = std::get<48>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<48>((*this).union_variant_14).storage.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ASSERT == (*this).op) {
            if (!std::holds_alternative<union_struct_63>(union_variant_14)) {
                union_variant_14 = union_struct_63();
            }
            if (auto err = std::get<49>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::IF == (*this).op) {
            if (!std::holds_alternative<union_struct_64>(union_variant_14)) {
                union_variant_14 = union_struct_64();
            }
            if (auto err = std::get<50>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ELIF == (*this).op) {
            if (!std::holds_alternative<union_struct_65>(union_variant_14)) {
                union_variant_14 = union_struct_65();
            }
            if (auto err = std::get<51>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_FORMAT == (*this).op) {
            if (!std::holds_alternative<union_struct_66>(union_variant_14)) {
                union_variant_14 = union_struct_66();
            }
            if (auto err = std::get<52>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_STATE == (*this).op) {
            if (!std::holds_alternative<union_struct_67>(union_variant_14)) {
                union_variant_14 = union_struct_67();
            }
            if (auto err = std::get<53>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_68>(union_variant_14)) {
                union_variant_14 = union_struct_68();
            }
            if (auto err = std::get<54>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_PROPERTY == (*this).op) {
            if (!std::holds_alternative<union_struct_69>(union_variant_14)) {
                union_variant_14 = union_struct_69();
            }
            if (auto err = std::get<55>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_70>(union_variant_14)) {
                union_variant_14 = union_struct_70();
            }
            if (auto err = std::get<56>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_71>(union_variant_14)) {
                union_variant_14 = union_struct_71();
            }
            if (auto err = std::get<57>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_72>(union_variant_14)) {
                union_variant_14 = union_struct_72();
            }
            if (auto err = std::get<58>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_ENUM == (*this).op) {
            if (!std::holds_alternative<union_struct_73>(union_variant_14)) {
                union_variant_14 = union_struct_73();
            }
            if (auto err = std::get<59>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_ENUM_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_74>(union_variant_14)) {
                union_variant_14 = union_struct_74();
            }
            if (auto err = std::get<60>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_FUNCTION == (*this).op) {
            if (!std::holds_alternative<union_struct_75>(union_variant_14)) {
                union_variant_14 = union_struct_75();
            }
            if (auto err = std::get<61>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_76>(union_variant_14)) {
                union_variant_14 = union_struct_76();
            }
            if (auto err = std::get<62>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_UNION_MEMBER == (*this).op) {
            if (!std::holds_alternative<union_struct_77>(union_variant_14)) {
                union_variant_14 = union_struct_77();
            }
            if (auto err = std::get<63>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::CONDITIONAL_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_78>(union_variant_14)) {
                union_variant_14 = union_struct_78();
            }
            if (auto err = std::get<64>((*this).union_variant_14).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<64>((*this).union_variant_14).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::CASE == (*this).op) {
            if (!std::holds_alternative<union_struct_79>(union_variant_14)) {
                union_variant_14 = union_struct_79();
            }
            if (auto err = std::get<65>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECLARE_PROGRAM == (*this).op) {
            if (!std::holds_alternative<union_struct_80>(union_variant_14)) {
                union_variant_14 = union_struct_80();
            }
            if (auto err = std::get<66>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_BIT_FIELD == (*this).op) {
            if (!std::holds_alternative<union_struct_81>(union_variant_14)) {
                union_variant_14 = union_struct_81();
            }
            if (auto err = std::get<67>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<67>((*this).union_variant_14).belong.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::APPEND == (*this).op) {
            if (!std::holds_alternative<union_struct_82>(union_variant_14)) {
                union_variant_14 = union_struct_82();
            }
            if (auto err = std::get<68>((*this).union_variant_14).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<68>((*this).union_variant_14).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DEFINE_PACKED_OPERATION == (*this).op) {
            if (!std::holds_alternative<union_struct_83>(union_variant_14)) {
                union_variant_14 = union_struct_83();
            }
            if (auto err = std::get<69>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::SWITCH_UNION == (*this).op) {
            if (!std::holds_alternative<union_struct_84>(union_variant_14)) {
                union_variant_14 = union_struct_84();
            }
            if (auto err = std::get<70>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::RET == (*this).op) {
            if (!std::holds_alternative<union_struct_85>(union_variant_14)) {
                union_variant_14 = union_struct_85();
            }
            if (auto err = std::get<71>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_86>(union_variant_14)) {
                union_variant_14 = union_struct_86();
            }
            if (auto err = std::get<72>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::EXHAUSTIVE_MATCH == (*this).op) {
            if (!std::holds_alternative<union_struct_87>(union_variant_14)) {
                union_variant_14 = union_struct_87();
            }
            if (auto err = std::get<73>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ENCODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_88>(union_variant_14)) {
                union_variant_14 = union_struct_88();
            }
            if (auto err = std::get<74>((*this).union_variant_14).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<74>((*this).union_variant_14).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::DECODER_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_89>(union_variant_14)) {
                union_variant_14 = union_struct_89();
            }
            if (auto err = std::get<75>((*this).union_variant_14).left_ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<75>((*this).union_variant_14).right_ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::STATE_VARIABLE_PARAMETER == (*this).op) {
            if (!std::holds_alternative<union_struct_90>(union_variant_14)) {
                union_variant_14 = union_struct_90();
            }
            if (auto err = std::get<76>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::EXPLICIT_ERROR == (*this).op) {
            if (!std::holds_alternative<union_struct_91>(union_variant_14)) {
                union_variant_14 = union_struct_91();
            }
            if (auto err = std::get<77>((*this).union_variant_14).param.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::CALL == (*this).op) {
            if (!std::holds_alternative<union_struct_92>(union_variant_14)) {
                union_variant_14 = union_struct_92();
            }
            if (auto err = std::get<78>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<78>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
            if (auto err = std::get<78>((*this).union_variant_14).param.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::BIT_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_93>(union_variant_14)) {
                union_variant_14 = union_struct_93();
            }
            if (auto err = std::get<79>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::BYTE_OFFSET == (*this).op) {
            if (!std::holds_alternative<union_struct_94>(union_variant_14)) {
                union_variant_14 = union_struct_94();
            }
            if (auto err = std::get<80>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::ARRAY_SIZE == (*this).op) {
            if (!std::holds_alternative<union_struct_95>(union_variant_14)) {
                union_variant_14 = union_struct_95();
            }
            if (auto err = std::get<81>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
            if (auto err = std::get<81>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::BEGIN_ENCODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_96>(union_variant_14)) {
                union_variant_14 = union_struct_96();
            }
            if (auto err = std::get<82>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::BEGIN_DECODE_SUB_RANGE == (*this).op) {
            if (!std::holds_alternative<union_struct_97>(union_variant_14)) {
                union_variant_14 = union_struct_97();
            }
            if (auto err = std::get<83>((*this).union_variant_14).ref.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::CAN_READ == (*this).op) {
            if (!std::holds_alternative<union_struct_98>(union_variant_14)) {
                union_variant_14 = union_struct_98();
            }
            if (auto err = std::get<84>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
        }
        else if (AbstractOp::REMAIN_BYTES == (*this).op) {
            if (!std::holds_alternative<union_struct_99>(union_variant_14)) {
                union_variant_14 = union_struct_99();
            }
            if (auto err = std::get<85>((*this).union_variant_14).ident.decode(r)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> BinaryModule::encode(::futils::binary::writer& w) const {
        if (!w.write(::futils::view::rvec("RBGM", 4))) {
            return ::futils::error::Error<>("encode: BinaryModule::magic: write string failed; \"RBGM\"", ::futils::error::Category::lib);
        }
        if (auto err = (*this).strings.encode(w)) {
            return err;
        }
        if (auto err = (*this).identifiers.encode(w)) {
            return err;
        }
        if (auto err = (*this).ident_indexes.encode(w)) {
            return err;
        }
        if (auto err = (*this).programs.encode(w)) {
            return err;
        }
        if (auto err = (*this).ident_ranges.encode(w)) {
            return err;
        }
        if (auto err = (*this).code_length.encode(w)) {
            return err;
        }
        auto tmp_163_ = (*this).code_length.value();
        if (tmp_163_ != (*this).code.size()) {
            return ::futils::error::Error<>("encode: BinaryModule::code: dynamic length is not compatible with its length; tmp_163_!=(*this).code.size()", ::futils::error::Category::lib);
        }
        for (auto& tmp_164_ : (*this).code) {
            if (auto err = tmp_164_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    inline ::futils::error::Error<> BinaryModule::decode(::futils::binary::reader& r) {
        ::futils::view::rvec tmp_165_ = {};
        if (!r.read_direct(tmp_165_, 4)) {
            return ::futils::error::Error<>("decode: BinaryModule::magic: read string failed", ::futils::error::Category::lib);
        }
        if (tmp_165_ != ::futils::view::rvec("RBGM", 4)) {
            return ::futils::error::Error<>("decode: BinaryModule::magic: read string failed; not match to \"RBGM\"", ::futils::error::Category::lib);
        }
        if (auto err = (*this).strings.decode(r)) {
            return err;
        }
        if (auto err = (*this).identifiers.decode(r)) {
            return err;
        }
        if (auto err = (*this).ident_indexes.decode(r)) {
            return err;
        }
        if (auto err = (*this).programs.decode(r)) {
            return err;
        }
        if (auto err = (*this).ident_ranges.decode(r)) {
            return err;
        }
        if (auto err = (*this).code_length.decode(r)) {
            return err;
        }
        auto tmp_166_ = (*this).code_length.value();
        (*this).code.clear();
        for (size_t tmp_168_ = 0; tmp_168_ < tmp_166_; ++tmp_168_) {
            Code tmp_167_;
            if (auto err = tmp_167_.decode(r)) {
                return err;
            }
            (*this).code.push_back(std::move(tmp_167_));
        }
        return ::futils::error::Error<>();
    }
}  // namespace rebgn
