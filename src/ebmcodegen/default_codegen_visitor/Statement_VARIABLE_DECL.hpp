/*DO NOT EDIT BELOW SECTION MANUALLY*/
/*license*/
// Template generated by ebmcodegen at https://github.com/on-keyday/rebrgen
/*
  Name: Statement_VARIABLE_DECL
  Available variables:
    *this: Visitor
    module_: MappingTable
    item_id: StatementRef
    kind: StatementKind
    var_decl: VariableDecl
      name: IdentifierRef
      var_type: TypeRef
      initial_value: ExpressionRef
      is_constant: bool
      is_reference: bool
      reserved: std::uint8_t
*/
/*DO NOT EDIT ABOVE SECTION MANUALLY*/
// This code is included within the visit_Statement_VARIABLE_DECL function.
// We can use variables like `this` (for Visitor) and `var_decl` directly.
if (var_decl.is_reference()) {
    MAYBE(initial_value, visit_Expression(*this, var_decl.initial_value));
    module_.directly_map_statement_identifier(item_id, initial_value.to_string());
    return {};
}
CodeWriter w;
auto name = this->module_.get_identifier_or(item_id);
MAYBE(type_str_val, visit_Type(*this, var_decl.var_type));
std::optional<Result> initial_value;

if (!is_nil(var_decl.initial_value)) {
    auto add = add_writer();
    MAYBE(initial_value_, visit_Expression(*this, var_decl.initial_value));
    MAYBE(got, get_writer());
    w.merge(std::move(got));
    initial_value = initial_value_;
}
if (variable_define_keyword.size()) {
    w.write(variable_define_keyword, " ");
}
w.write(name);
if (variable_with_type) {
    w.write(variable_type_separator, " ", type_str_val.to_writer());
}
if (initial_value) {
    w.write(" = ", initial_value->to_string());
}

w.writeln();

return w;