# RE:brgen

RE:brgen (rebrgen,https://github.com/on-keyday/rebrgen) is a generator construction project for brgen(https://github.com/on-keyday/brgen)

# What is brgen

brgen is a project to create 1. DSL that represents binary format simply and effective, and 2. code generators that generates usable struct/encoder/decoder/etc... tuples in several programming languages.

rebrgen is part of 2.

# Directories

- brgen/ - base brgen directory as submodule (same content as https://github.com/on-keyday/brgen)
  - example/ - example set of brgen DSL
- src/ - source code

  - bm/ - binary module definition
    - binary_module.bgn - definition base of binary_module.hpp and binary_module.cpp (DSL). this defines BinaryModule structure and AbstractOp enum and etc... for code generation base.
    - binary_module.hpp and binary_module.cpp - generated file from binary_module.bgn
  - bmgen/ - translate brgen AST(as represented in brgen/web/doc/content/docs/ast.md) to BinaryModule (defined in binary_module.bgn)
    - transform/ - Binary Module transformation logic
    - main.cpp - entry point
  - bm2/ - generator common tools and generator-generator
    - gen_template.cpp - generator-generator source code (including entry point)
  - bm2{lang_name}/ - generator for lang_name. lang name list can be get by script/list_lang.py. these generators generate target code from BinaryModule
    - bm2hexmap - map hex representation to format. this is not a code generator.
    - bm2rust and bm2cpp - these are written by hand before generator-generator created
    - hook/ - each hook directory
  - test/ - test input files (\*.bgn)
    - test_cases.bgn - main test cases
    - crash/ - files that caused program crash in past

- script/ - some script

  - binary_module.bat - generate src/bm/binary_module.hpp and src/bm/binary_module.cpp
  - list_lang.py - list up language names
  - build.bat and build.ps1 and build.sh - build tools
  - generate.bat and generate.ps1 and generate.sh - build generator-generator(`tool\gen_template`) and generate the code generators (`tool\bm2{lang_name}`)
  - run_generated.bat and run_generated.ps1 and run_generated.sh - build the code generators (`tool\bm2{lang_name}`) and run code generators

- save/ - temporary testing directory (ignored by .gitignore)
- tool/ - built tools installed (tool names are same as src/{dir_name}) (ignored by .gitignore)
- web/ - built tools for WebPlayground (ignored by .gitignore)
- docs/ - documentation files (currently generated by AI and not enough correctness)

# Development Cycle

Action order below is no matter. You can choose actions below as if you need

- modify src/bm2/gen_template.cpp for language independent logic
- modify src/bm2{lang_name}/config.json for language specific placeholders. base templates are in src/bm2/config_template.json (but maybe, you should see Flags::from_json in src/bm2/gen_template.cpp for complete logic and should see gen_template.cpp for usage)
- modify or add files in src/bm2{lang_name}/hook/ for language specific custom logic. you can get basic hook definition in src/bm2/hook_list.bgn and can get by executing `tool\gen_template --print-hooks`
- you can run `generate.bat` or `generate.sh` for generate the code generators
- you can run `run_generated.bat` or `run_generated.sh` to run the generated code generators and save the result in `save/save.{language_specific_suffix}`
