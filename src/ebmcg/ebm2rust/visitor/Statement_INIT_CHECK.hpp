/*DO NOT EDIT BELOW SECTION MANUALLY*/
/*license*/
// Template generated by ebmcodegen at https://github.com/on-keyday/rebrgen
/*
  Name: Statement_INIT_CHECK
  Available variables:
    *this: Visitor
    module_: MappingTable
    item_id: StatementRef
    kind: StatementKind
    init_check: InitCheck
      init_check_type: InitCheckType
      target_field: ExpressionRef
      expect_value: ExpressionRef
*/
/*DO NOT EDIT ABOVE SECTION MANUALLY*/

/*here to write the hook*/

MAYBE(target_expr, module_.get_expression(init_check.target_field));
MAYBE(target_type, module_.get_type(target_expr.body.type));
MAYBE(expect_expr, module_.get_expression(init_check.expect_value));

if (target_type.kind != ebm::TypeKind::VARIANT) {
    return unexpect_error("unsupported type for INIT_CHECK: {}", to_string(target_type.body.kind));
}

MAYBE(variant_index, get_variant_index(*this, target_expr.body.type, expect_expr.body.type));

MAYBE(target, visit_Expression(*this, init_check.target_field));
MAYBE(target_type_rust, visit_Type(*this, target_expr.body.type));

auto default_ = CODE(target_type_rust.to_writer(), "::V", std::to_string(variant_index), "(Default::default())");
auto matches = CODE("matches!(", target.to_writer(), ", ", target_type_rust.to_writer(), "::V", std::to_string(variant_index), "(_))");

CodeWriter w;
if (init_check.init_check_type == ebm::InitCheckType::encode) {
    w.writeln("if !", matches, " {");
    {
        auto scope = w.indent_scope();
        w.writeln("return Err(anyhow::anyhow!(\"unexpected value\"));");
    }
    w.writeln("}");
}
else if (init_check.init_check_type == ebm::InitCheckType::decode || init_check.init_check_type == ebm::InitCheckType::union_set) {
    w.writeln("if !", matches, "{");
    {
        auto scope = w.indent_scope();
        w.writeln(target.to_writer(), " = ", default_, ";");
    }
    w.writeln("}");
}
else if (init_check.init_check_type == ebm::InitCheckType::union_get) {
    w.writeln("if !", matches, " {");
    {
        auto scope = w.indent_scope();
        w.writeln("return Err(anyhow::anyhow!(\"unexpected variant\"));");
    }
    w.writeln("}");
}
else {
    return unexpect_error("not supported init_check_type: {}", to_string(init_check.init_check_type));
}

return w;
