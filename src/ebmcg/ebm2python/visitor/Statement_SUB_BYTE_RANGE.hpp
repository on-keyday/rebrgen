/*DO NOT EDIT BELOW SECTION MANUALLY*/
/*license*/
// Template generated by ebmcodegen at https://github.com/on-keyday/rebrgen
/*
  Name: Statement_SUB_BYTE_RANGE
  Available variables:
    *this: Visitor
    module_: MappingTable
    item_id: StatementRef
    kind: StatementKind
    sub_byte_range: SubByteRange
      stream_type: StreamType
      range_type: SubByteRangeType
      expression: *ExpressionRef
      length: *ExpressionRef
      offset: *ExpressionRef
      io_ref: StatementRef
      parent_io_ref: StatementRef
      io_statement: StatementRef
*/
/*DO NOT EDIT ABOVE SECTION MANUALLY*/

/*here to write the hook*/
auto io_ = module_.get_associated_identifier(sub_byte_range.io_ref);
MAYBE(do_io, visit_Statement(*this, sub_byte_range.io_statement));

CodeWriter w;
auto parent_io_ = module_.get_associated_identifier(sub_byte_range.parent_io_ref);
MAYBE(length, sub_byte_range.length());
MAYBE(length_str, visit_Expression(*this, length));

if (sub_byte_range.stream_type == ebm::StreamType::INPUT) {
    w.writeln(io_, " = io.BytesIO(", parent_io_, ".read(", length_str.to_writer(), "))");
}
else {
    w.writeln(io_, " = io.BytesIO()");
}
merge_result(*this, w, do_io);
if (sub_byte_range.stream_type == ebm::StreamType::OUTPUT) {
    w.writeln("assert ", length_str.to_writer(), " == builtins.len(", io_, ".getvalue())");
    w.writeln(parent_io_, ".write(", io_, ".getvalue())");
}

return w;