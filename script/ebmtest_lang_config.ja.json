{
    "validation_error": "カスタムの検証エラー例外",
    "root_struct_not_found": "ルート構造体 '{root_struct_name}' がスキーマに見つかりません。",
    "path_should_be_object": "パス '{path}' はオブジェクトであるべきですが、型が異なります。{type}",
    "path_should_have_kind": "パス '{path}' は 'kind' フィールドを持つべきですが、見つかりません。 (有効な値: {valid_values})",
    "invalid_kind_value": "パス '{path}' の 'kind' の値 '{kind_value}' は不正です。(有効な値: {valid_values})",
    "invalid_field": "パス '{path}' に不正なフィールドがあります: {extra_fields}",
    "missing_required_field": "パス '{path}' に必須フィールド '{field_name}' がありません。",
    "path_should_be_array": "パス '{new_path}' は配列であるべきですが、型が異なります。{type}",
    "not_enum_member": "パス '{path}' の値 '{value}' は Enum '{type_name}' のメンバーではありません。 (有効な値: {valid_values})",
    "type_cannot_have_object": "パス '{path}' の型 '{type_name}' はオブジェクトを持つことができません。",
    "path_should_be_object_or_int": "パス '{path}' はオブジェクトまたは整数であるべきですが、型が異なります。{type}",
    "path_should_be_int": "パス '{path}' は整数であるべきですが、型が異なります。{type}",
    "path_should_be_bool": "パス '{path}' はブール値であるべきですが、型が異なります。{type}",
    "path_should_be_string": "パス '{path}' は文字列であるべきですが、型が異なります。{type}",
    "unknown_type": "パス '{path}' のスキーマで定義されている型 '{type_name}' は不明な型です。",
    "equality_error": "カスタムの等価性比較エラー例外",
    "equality_tester_docstring": "テスト対象(T1)とテストケース(T2)のJSONオブジェクトの等価性を検証するクラス。\nT1のRef型はebm_mapを用いて解決する。",
    "compare_entry_point": "比較プロセスのエントリーポイント",
    "compare_value_recursively": "型に基づいて値を再帰的に比較する",
    "compare_ref_specially": "Ref型を特別に比較する",
    "values_not_equal": "パス '{path}' の値が異なります: T1=`{t1_val}`, T2=`{t2_val}`",
    "ids_not_equal": "パス '{path}' のIDが異なります: T1 ID=`{t1_ref}`, T2 ID=`{t2_ref}`",
    "type_mismatch_t1_object": "パス '{path}' で型の不整合: T1はオブジェクトですが、T2は不正な型です。{t1_type} vs {t2_type}",
    "type_mismatch_t1_numeric": "パス '{path}' で型の不整合: T1は数値ですが、T2はオブジェクトです。{t1_val} vs {t2_val}",
    "ref_values_not_equal": "パス '{path}' のRef値が異なります: T1=`{t1_val}`, T2=`{t2_val}`",
    "invalid_t1_value_type": "パス '{path}' のT1の値の型が不正です。",
    "compare_object_recursively": "オブジェクト（辞書）を再帰的に比較する",
    "not_object": "パス '{path}' のどちらかまたは両方がオブジェクトではありません。{t1_type} vs {t2_type}",
    "kind_mismatch": "パス '{path}' の 'kind' が異なります: T1=`{t1_kind}`, T2=`{t2_kind}`",
    "kind_not_in_schema": "パス '{path}' の 'kind' '{t1_kind}' はスキーマに存在しません。",
    "not_array": "パス '{new_path}' のどちらかが配列ではありません。",
    "array_length_mismatch": "パス '{new_path}' の配列の長さが異なります: T1は{t1_len}個, T2は{t2_len}個",
    "cli_entry_point": "CLIのエントリーポイント",
    "cli_description": "JSONデータが指定されたスキーマに準拠しているかを検証します。",
    "test_data_help": "検証対象のEBM/JSONファイル (T1の元データ)",
    "struct_name_help": "検証の起点となるルート構造体名",
    "test_case_help": "テストケースJSONファイル(T2)",
    "converting_to_json_ebm": "🔄 '{test_data}' を ebmgen で JSON-EBM に変換中...",
    "file_not_found": "エラー: ファイルが見つかりません: {filename}",
    "json_parse_error": "エラー: JSONの解析に失敗しました: {error}",
    "validating_schema": "🔬 ファイル '{test_data}' が '{struct_name}' スキーマに準拠しているか検証中...",
    "validation_success": "✅ 検証成功: スキーマに準拠しています。",
    "filtering_data_with_query": "🔍 ebmgen queryを使用して対象データを絞り込みます",
    "query": "    - クエリ: {query}",
    "extracted_ids": "🔍 抽出結果ID: {ids}",
    "extracting_t1_with_jq": "🔍 jqを使用してテスト対象(T1)を抽出中...",
    "condition": "    - 条件: {condition}",
    "validating_test_case_schema": "🔬 テストケース '{test_case}' の 'case' が '{struct_to_compare}' スキーマに準拠しているか検証中...",
    "test_case_validation_success": "✅ 検証成功: テストケースはスキーマに準拠しています。",
    "validating_instance": "ターゲット: {index}/{total}",
    "validating_t1_schema": "🔬 テスト対象(T1)が '{struct_to_compare}' スキーマに準拠しているか検証中...",
    "t1_validation_success": "✅ 検証成功: テスト対象はスキーマに準拠しています。",
    "validating_equality": "🔬 テストケース '{test_case}' を用いて等価性を検証中...",
    "t1_info": "    - T1: '{test_data}' の '{verification_target_info}' の結果",
    "t2_info": "    - T2: '{test_case}' の 'case' フィールド",
    "excluded_fields": "    - テスト除外フィールド: {rough_field}",
    "equality_validation_success": "✅ 等価性検証成功: テスト対象(T1)とテストケース(T2)は意味的に等しいです。",
    "validation_failed": "❌ 検証に失敗しました:\n{error}",
    "unexpected_error": "予期せぬエラーが発生しました: {error}"
}