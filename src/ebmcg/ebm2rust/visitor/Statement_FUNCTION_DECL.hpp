/*DO NOT EDIT BELOW SECTION MANUALLY*/
/*license*/
// Template generated by ebmcodegen at https://github.com/on-keyday/rebrgen
/*
  Name: Statement_FUNCTION_DECL
  Available variables:
    *this: Visitor
    module_: MappingTable
    item_id: StatementRef
    kind: StatementKind
    func_decl: FunctionDecl
      name: IdentifierRef
      return_type: TypeRef
      params: Block
        len: Varint
        container: std::vector<StatementRef>
      parent_format: StatementRef
      kind: FunctionKind
      body: StatementRef
*/
/*DO NOT EDIT ABOVE SECTION MANUALLY*/

/*here to write the hook*/
auto name = module_.get_associated_identifier(item_id);
MAYBE(return_type_str, visit_Type(*this, func_decl.return_type));

CodeWriter w;
w.write("pub fn ", name, "(");

// Parameters
bool first_param = true;
if (!is_nil(func_decl.parent_format)) {  // Check if it's a method (has a parent format)
    w.write("&mut self");
    first_param = false;
}

for (auto& param_ref : func_decl.params.container) {
    MAYBE(param_stmt, module_.get_statement(param_ref));
    if (param_stmt.body.kind == ebm::StatementKind::PARAMETER_DECL) {
        auto param_name = module_.get_associated_identifier(param_ref);
        MAYBE(param_type_str, visit_Type(*this, param_stmt.body.param_decl()->param_type));
        if (!first_param) {
            w.write(", ");
        }
        w.write(param_name, ": ", param_type_str.to_writer());
        first_param = false;
    }
}
w.writeln(") -> ", return_type_str.to_writer(), " {");
{
    auto scope = w.indent_scope();
    if (!is_nil(func_decl.body)) {
        MAYBE(body_str, visit_Statement(*this, func_decl.body));
        w.write(body_str.to_writer());
    }
}
w.writeln("}");

return w;