/*DO NOT EDIT BELOW SECTION MANUALLY*/
/*license*/
// Template generated by ebmcodegen at https://github.com/on-keyday/rebrgen
/*
  Name: Expression_TYPE_CAST_before
  Available variables:
    *this: Visitor
    module_: MappingTable
    item_id: ExpressionRef
    type: TypeRef
    kind: ExpressionKind
    cast_kind: CastType
    from_type: TypeRef
    source_expr: ExpressionRef
*/
/*DO NOT EDIT ABOVE SECTION MANUALLY*/

/*here to write the hook*/
if (cast_kind == ebm::CastType::ENUM_TO_INT) {
    MAYBE(source_expr_str, visit_Expression(*this, source_expr));
    MAYBE(target_type_str, visit_Type(*this, type));
    return CODE(target_type_str.to_writer(), "(", source_expr_str.to_writer(), ".value if isinstance(", source_expr_str.to_writer(), ",enum.Enum) else ", source_expr_str.to_writer(), ")");
}
if (module_.get_type_kind(type) == ebm::TypeKind::ENUM) {
    MAYBE(source_expr_str, visit_Expression(*this, source_expr));
    MAYBE(target_type, module_.get_type(type));
    auto id_ = *target_type.body.id();
    auto enum_name = module_.get_associated_identifier(id_);
    return CODE("(", enum_name, "(", source_expr_str.to_writer(), ") if ", enum_name, "._value2member_map_.get(", source_expr_str.to_writer(), ", None) is not None else ", source_expr_str.to_writer(), ")");
}
if (module_.get_type_kind(type) == ebm::TypeKind::VARIANT) {
    return visit_Expression(*this, source_expr);
}