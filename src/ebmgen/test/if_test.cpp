#include <gtest/gtest.h>
#include "ebmgen/load_json.hpp"
#include "ebmgen/converter.hpp"
#include "ebm/extended_binary_module.hpp"

TEST(IntegrationTest, SimpleIf) {
    // The JSON file is generated by CMake in the build directory
    auto ast = ebmgen::load_json("src/ebmgen/test/bgn/if_true.ast.json", nullptr);
    ASSERT_TRUE(ast.has_value()) << ast.error().error<std::string>();

    ebm::ExtendedBinaryModule ebm;
    ebmgen::ConverterContext ctx;
    auto stmt = ctx.convert_statement(*ast);
    ASSERT_TRUE(stmt) << stmt.error().error<std::string>();

    auto program = ctx.repository().get_statement(*stmt);
    ASSERT_TRUE(program) << "Failed to retrieve the converted statement";
    ASSERT_EQ(program->body.statement_kind, ebm::StatementOp::PROGRAM_DECL);
    auto block = program->body.block();
    ASSERT_TRUE(block) << "Program block is empty";
    ASSERT_EQ(block->container.size(), 1) << "Expected one statement in the program block";
    auto if_stmt = ctx.repository().get_statement(block->container[0]);
    ASSERT_TRUE(if_stmt) << "Failed to retrieve the IF statement";
    ASSERT_EQ(if_stmt->body.statement_kind, ebm::StatementOp::IF_STATEMENT);
    auto if_body = if_stmt->body.if_statement();
    ASSERT_TRUE(if_body) << "IF statement body is empty";
    ASSERT_NE(if_body->condition.id.value(), 0) << "Condition expression ID is invalid";
    auto cond = ctx.repository().get_expression(if_body->condition);
    ASSERT_TRUE(cond) << "Failed to retrieve the condition expression";
    ASSERT_EQ(cond->body.op, ebm::ExpressionOp::LITERAL_BOOL) << "Condition expression is not a boolean literal";
    ASSERT_TRUE(cond->body.bool_value()) << "Condition expression is not true";
    ASSERT_NE(if_body->then_block.id.value(), 0) << "Then block ID is invalid";
    auto then_block = ctx.repository().get_statement(if_body->then_block);
    ASSERT_TRUE(then_block) << "Failed to retrieve the THEN block";
    ASSERT_EQ(then_block->body.statement_kind, ebm::StatementOp::BLOCK) << "Then block is not a BLOCK statement";
    auto then_body = then_block->body.block();
    ASSERT_TRUE(then_body) << "Then block body is empty";
    ASSERT_EQ(then_body->container.size(), 1) << "Expected one statement in the THEN block";
    auto field_stmt = ctx.repository().get_statement(then_body->container[0]);
    ASSERT_TRUE(field_stmt) << "Failed to retrieve the field statement";
    ASSERT_EQ(field_stmt->body.statement_kind, ebm::StatementOp::FIELD_DECL) << "Field statement is not a FIELD_DECL";
    auto field_body = field_stmt->body.field_decl();
    ASSERT_TRUE(field_body) << "Field declaration body is empty";
    ASSERT_NE(field_body->name.id.value(), 0) << "Field name ID is invalid";
    ASSERT_NE(field_body->field_type.id.value(), 0) << "Field type ID is invalid";
    auto field_type = ctx.repository().get_type(field_body->field_type);
    ASSERT_TRUE(field_type) << "Failed to retrieve the field type";
    ASSERT_EQ(field_type->body.kind, ebm::TypeKind::UINT) << "Field type is not UINT";
    auto size = field_type->body.size();
    ASSERT_TRUE(size) << "Field type size is not defined";
    ASSERT_EQ(*size, 8) << "Field type size is not 8 bits";
}
