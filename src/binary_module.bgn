config.cpp.namespace = "rebgn"
config.cpp.bytes_type = "std::string"
config.cpp.sys_include = "string"

format Varint:
    prefix :u2
    match prefix:
        0 => value :u6
        1 => value :u14
        2 => value :u30
        3 => value :u62


enum AbstractOp:
    :u8
    NOP

    
    DEFINE_METADATA
    END_METADATA
    IMPORT
    SPECIFY_ENDIAN
    SPECIFY_BIT_ORDER
    SPECIFY_ALIGNMENT
    SPECIFY_LENGTH
    EXPLICIT_ERROR
    MAP_TYPE

    DEFINE_FORMAT
    END_FORMAT

    DEFINE_FIELD
    STORAGE_TYPE
    END_FIELD
    
    DEFINE_FUNCTION
    END_FUNCTION
    
    DEFINE_ENUM
    END_ENUM
    
    DEFINE_ENUM_MEMBER
    END_ENUM_MEMBER
    
    DEFINE_UNION
    END_UNION

    
    ENCODE_INT
    DECODE_INT
    ENCODE_FLOAT
    DECODE_FLOAT
    CALL_ENCODE
    CALL_DECODE

    LOOP
    END_LOOP

    IF
    ELIF
    ELSE
    END_IF

    MATCH
    CASE
    END_MATCH

    DEFINE_VARIABLE
    END_VARIABLE
    
    ASSIGN

    ACCESS
    ENUM_MEMBER

    INDEX
    APPEND

    ADD
    SUB
    MUL
    DIV
    MOD
    BAND
    BOR
    BXOR
    NOT
    SHL
    SHR
    INC
    DEC
    NEG
    CALL
    RET

    IMMEDIATE_BOOL
    IMMEDIATE_INT
    IMMEDIATE_STRING

format String:
    length :Varint
    data :[length.value]u8

format StringRef:
    code :Varint
    string :String

enum StorageType:
    :u8
    # terminal
    INT   
    UINT 
    FLOAT 
    STRUCT 
    BYTE_VECTOR # special case of vector

    # qualifiers
    ENUM
    ARRAY
    VECTOR


format Storage:
    type :StorageType
    match type:
        StorageType.INT => size :Varint
        StorageType.UINT => size :Varint
        StorageType.FLOAT => size :Varint
        StorageType.STRUCT => ident :Varint
        StorageType.BYTE_VECTOR => ..
        StorageType.ENUM:
            .. # todo: will be recursive
        StorageType.ARRAY:
            size :Varint
            ..
        StorageType.VECTOR:
            ..

format Storages:
    length :Varint
    storages :[length.value]Storage

format Code:
    op :AbstractOp
    match op:
        AbstractOp.DEFINE_METADATA => name :StringRef
        AbstractOp.IMMEDIATE_INT => int_value :u64
        AbstractOp.DEFINE_FORMAT => ident :Varint
        AbstractOp.DEFINE_FIELD => ident :Varint

format Refs:
    refs_length :Varint
    refs :[refs_length.value]Varint

format BinaryModule:
    strings :Refs
    identifiers :Refs
    code_length :Varint
    code :[code_length.value]Code
