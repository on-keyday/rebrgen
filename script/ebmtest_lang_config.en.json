{
    "validation_error": "Custom validation error exception",
    "root_struct_not_found": "Root struct '{root_struct_name}' not found in schema.",
    "path_should_be_object": "Path '{path}' should be an object, but is of type {type ·Éõ·É®}",
    "path_should_have_kind": "Path '{path}' should have a 'kind' field, but it was not found. (Valid values: {valid_values})",
    "invalid_kind_value": "The value of 'kind' in path '{path}' is invalid: '{kind_value}'. (Valid values: {valid_values})",
    "invalid_field": "Invalid field in path '{path}': {extra_fields}",
    "missing_required_field": "Missing required field '{field_name}' in path '{path}'.",
    "path_should_be_array": "Path '{new_path}' should be an array, but is of type {type ·Éõ·É®}",
    "not_enum_member": "Value '{value}' in path '{path}' is not a member of Enum '{type_name}'. (Valid values: {valid_values})",
    "type_cannot_have_object": "Type '{type_name}' in path '{path}' cannot have an object.",
    "path_should_be_object_or_int": "Path '{path}' should be an object or an integer, but is of type {type ·Éõ·É®}",
    "path_should_be_int": "Path '{path}' should be an integer, but is of type {type ·Éõ·É®}",
    "path_should_be_bool": "Path '{path}' should be a boolean, but is of type {type ·Éõ·É®}",
    "path_should_be_string": "Path '{path}' should be a string, but is of type {type ·Éõ·É®}",
    "unknown_type": "Type '{type_name}' defined in the schema for path '{path}' is unknown.",
    "equality_error": "Custom equality comparison error exception",
    "equality_tester_docstring": "A class to validate the equality of JSON objects for a test target (T1) and a test case (T2).\nThe Ref type of T1 is resolved using ebm_map.",
    "compare_entry_point": "Entry point for the comparison process",
    "compare_value_recursively": "Recursively compare values based on their type",
    "compare_ref_specially": "Compare Ref types specially",
    "values_not_equal": "Value mismatch at path '{path}': T1=`{t1_val}`, T2=`{t2_val}`",
    "ids_not_equal": "ID mismatch at path '{path}': T1 ID=`{t1_ref}`, T2 ID=`{t2_ref}`",
    "type_mismatch_t1_object": "Type mismatch at path '{path}': T1 is an object, but T2 is of an invalid type. {t1_type} vs {t2_type}",
    "type_mismatch_t1_numeric": "Type mismatch at path '{path}': T1 is a number, but T2 is an object. {t1_val} vs {t2_val}",
    "ref_values_not_equal": "Ref value mismatch at path '{path}': T1=`{t1_val}`, T2=`{t2_val}`",
    "invalid_t1_value_type": "Invalid type for T1 value at path '{path}'.",
    "compare_object_recursively": "Recursively compare objects (dictionaries)",
    "not_object": "One or both are not objects at path '{path}'. {t1_type} vs {t2_type}",
    "kind_mismatch": "'kind' mismatch at path '{path}': T1=`{t1_kind}`, T2=`{t2_kind}`",
    "kind_not_in_schema": "'kind' '{t1_kind}' at path '{path}' does not exist in the schema.",
    "not_array": "One or both are not arrays at path '{new_path}'.",
    "array_length_mismatch": "Array length mismatch at path '{new_path}': T1 has {t1_len} items, T2 has {t2_len} items",
    "cli_entry_point": "CLI entry point",
    "cli_description": "Validates whether JSON data conforms to a specified schema.",
    "test_data_help": "EBM/JSON file to validate (T1 source data)",
    "struct_name_help": "Root struct name to start validation from",
    "test_case_help": "Test case JSON file (T2)",
    "converting_to_json_ebm": "üîÑ Converting '{test_data}' to JSON-EBM with ebmgen...",
    "file_not_found": "Error: File not found: {filename}",
    "json_parse_error": "Error: Failed to parse JSON: {error}",
    "validating_schema": "üî¨ Validating if file '{test_data}' conforms to '{struct_name}' schema...",
    "validation_success": "‚úÖ Validation successful: Conforms to schema.",
    "filtering_data_with_query": "üîç Filtering data using ebmgen query...",
    "query": "    - Query: {query}",
    "extracted_ids": "üîç Extracted IDs: {ids}",
    "extracting_t1_with_jq": "üîç Extracting test target (T1) using jq...",
    "condition": "    - Condition: {condition}",
    "validating_test_case_schema": "üî¨ Validating if 'case' in test case '{test_case}' conforms to '{struct_to_compare}' schema...",
    "test_case_validation_success": "‚úÖ Validation successful: Test case conforms to schema.",
    "validating_instance": "Target: {index}/{total}",
    "validating_t1_schema": "üî¨ Validating if test target (T1) conforms to '{struct_to_compare}' schema...",
    "t1_validation_success": "‚úÖ Validation successful: Test target conforms to schema.",
    "validating_equality": "üî¨ Validating equality using test case '{test_case}'...",
    "t1_info": "    - T1: Result of '{verification_target_info}' from '{test_data}'",
    "t2_info": "    - T2: 'case' field from '{test_case}'",
    "excluded_fields": "    - Excluded fields: {rough_field}",
    "equality_validation_success": "‚úÖ Equality validation successful: Test target (T1) and test case (T2) are semantically equal.",
    "validation_failed": "‚ùå Validation failed:\n{error}",
    "unexpected_error": "An unexpected error occurred: {error}"
}