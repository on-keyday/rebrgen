!@section func_if_after.txt
if(is_empty_block) {
    w.writeln("pass");
}
!@section func_elif_after.txt
!@include func_if_after.txt
!@section func_else_after.txt
!@include func_if_after.txt
!@section block_define_union_member_after.txt
!@include func_if_after.txt

!@section block_define_enum.txt
w.writeln("class ",ident,"(Enum):");
defer.push_back(w.indent_scope_ex());


!@section func_call_code_common.txt
w.write("if not ", obj_eval.result, ".", func_name, "(");
add_call_parameter(ctx, w,range);
w.writeln("):");
auto scope = w.indent_scope();
w.writeln("return False");
scope.execute();

!@section func_call_decode.txt
w.writeln("if not isinstance(",obj_eval.result,",",func_belong_name,"):");
auto scope_2 = w.indent_scope();
w.writeln(obj_eval.result,"=",func_belong_name,"()");
scope_2.execute();
!@include func_call_code_common.txt

!@section func_call_encode.txt
w.writeln("if not isinstance(",obj_eval.result,",",func_belong_name,"):");
auto scope_2 = w.indent_scope();
w.writeln("return False");
scope_2.execute();
!@include func_call_code_common.txt

!@section func_define_function_pre_main.txt
auto params = get_parameters(ctx,range);
if(code.func_type().value() == rebgn::FunctionType::UNION_GETTER) {
    if(params.size() == 0) {
        w.writeln("@property");
    }
}
else if(code.func_type().value() == rebgn::FunctionType::UNION_SETTER) {
    if(params.size() == 1) {
        w.writeln("@",ident,".setter");
    }
}
!@section first_scan_before.txt
bool has_is_little_endian = false;
!@section first_scan_is_little_endian.txt
has_is_little_endian = true;
goto OUT_FIRST_SCAN;
!@section file_top.txt
# Code generated by bm2py of https://github.com/on-keyday/rebrgen
from typing import IO,Optional,Union
from enum import Enum
!@section file_top_after.txt
if(has_is_little_endian) {
    ctx.cw.writeln("import sys");
} 
ctx.cw.writeln("");
!@section eval_binary_op.txt
if(op == rebgn::BinaryOp::logical_or) {
    opstr = "or";
}
else if(op == rebgn::BinaryOp::logical_and) {
    opstr = "and";
}
!@section escape_ident.txt
if(code.op == rebgn::AbstractOp::DEFINE_FUNCTION) {
    auto func_type = code.func_type().value();
    auto func_range = ctx.range(code.ident().value());
    if(func_type == rebgn::FunctionType::UNION_SETTER) {
        auto params = get_parameters(ctx,func_range);
        if(params.size() != 1) {
            str = "set_" + str;
        }
    }
    if(func_type== rebgn::FunctionType::VECTOR_SETTER) {
        str = "set_" + str;
    }
}
!@section cmptest_build.txt
copy_file(INPUT,OUTPUT)
!@section cmptest_run.txt
run_command(["python",EXEC,INPUT,OUTPUT])
!@section keywords.txt
False
None
True
and
as
assert
async
await
break
class
continue
def
del
elif
else
except
finally
for
from
global
if
import
in
is
lambda
nonlocal
not
or
pass
raise
return
try
while
with
yield
!@section flags.txt
async|use_async|bool|false|use async operation
!@end_section
