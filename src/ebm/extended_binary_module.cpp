//Code generated by json2cpp2
#ifndef EBM_API
#ifdef _WIN32
#define EBM_API __declspec(dllexport)
#else
#define EBM_API __attribute__((visibility("default")))
#endif
#endif
#include "extended_binary_module.hpp"
namespace ebm {
    const ExpressionRef* Size::ref() const {
        if (SizeUnit::UNKNOWN==(*this).unit) {
        return nullptr;
        }
        if (SizeUnit::BIT_FIXED==(*this).unit) {
        return nullptr;
        }
        if (SizeUnit::BYTE_FIXED==(*this).unit) {
        return nullptr;
        }
        if (SizeUnit::ELEMENT_FIXED==(*this).unit) {
        return nullptr;
        }
        if (SizeUnit::BIT_DYNAMIC==(*this).unit) {
        if(!std::holds_alternative<union_struct_9>(union_variant_4)) {
            return nullptr;
        }
        return std::addressof(std::get<5>((*this).union_variant_4).ref);
        }
        if (SizeUnit::BYTE_DYNAMIC==(*this).unit) {
        if(!std::holds_alternative<union_struct_10>(union_variant_4)) {
            return nullptr;
        }
        return std::addressof(std::get<6>((*this).union_variant_4).ref);
        }
        if (SizeUnit::ELEMENT_DYNAMIC==(*this).unit) {
        if(!std::holds_alternative<union_struct_11>(union_variant_4)) {
            return nullptr;
        }
        return std::addressof(std::get<7>((*this).union_variant_4).ref);
        }
        return nullptr;
    }
    ExpressionRef* Size::ref() {
        return const_cast<ExpressionRef*>(std::as_const(*this).ref());
    }
    bool Size::ref(const ExpressionRef& v) {
        if (SizeUnit::UNKNOWN==(*this).unit) {
            return false;
        }
        if (SizeUnit::BIT_FIXED==(*this).unit) {
            return false;
        }
        if (SizeUnit::BYTE_FIXED==(*this).unit) {
            return false;
        }
        if (SizeUnit::ELEMENT_FIXED==(*this).unit) {
            return false;
        }
        if (SizeUnit::BIT_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_9>(union_variant_4)) {
                union_variant_4 = union_struct_9();
            }
            std::get<5>((*this).union_variant_4).ref = v;
            return true;
        }
        if (SizeUnit::BYTE_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_10>(union_variant_4)) {
                union_variant_4 = union_struct_10();
            }
            std::get<6>((*this).union_variant_4).ref = v;
            return true;
        }
        if (SizeUnit::ELEMENT_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_11>(union_variant_4)) {
                union_variant_4 = union_struct_11();
            }
            std::get<7>((*this).union_variant_4).ref = v;
            return true;
        }
        return false;
    }
    bool Size::ref(ExpressionRef&& v) {
        if (SizeUnit::UNKNOWN==(*this).unit) {
            return false;
        }
        if (SizeUnit::BIT_FIXED==(*this).unit) {
            return false;
        }
        if (SizeUnit::BYTE_FIXED==(*this).unit) {
            return false;
        }
        if (SizeUnit::ELEMENT_FIXED==(*this).unit) {
            return false;
        }
        if (SizeUnit::BIT_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_9>(union_variant_4)) {
                union_variant_4 = union_struct_9();
            }
            std::get<5>((*this).union_variant_4).ref = std::move(v);
            return true;
        }
        if (SizeUnit::BYTE_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_10>(union_variant_4)) {
                union_variant_4 = union_struct_10();
            }
            std::get<6>((*this).union_variant_4).ref = std::move(v);
            return true;
        }
        if (SizeUnit::ELEMENT_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_11>(union_variant_4)) {
                union_variant_4 = union_struct_11();
            }
            std::get<7>((*this).union_variant_4).ref = std::move(v);
            return true;
        }
        return false;
    }
    const Varint* Size::size() const {
        if (SizeUnit::UNKNOWN==(*this).unit) {
        return nullptr;
        }
        if (SizeUnit::BIT_FIXED==(*this).unit) {
        if(!std::holds_alternative<union_struct_6>(union_variant_4)) {
            return nullptr;
        }
        return std::addressof(std::get<2>((*this).union_variant_4).size);
        }
        if (SizeUnit::BYTE_FIXED==(*this).unit) {
        if(!std::holds_alternative<union_struct_7>(union_variant_4)) {
            return nullptr;
        }
        return std::addressof(std::get<3>((*this).union_variant_4).size);
        }
        if (SizeUnit::ELEMENT_FIXED==(*this).unit) {
        if(!std::holds_alternative<union_struct_8>(union_variant_4)) {
            return nullptr;
        }
        return std::addressof(std::get<4>((*this).union_variant_4).size);
        }
        return nullptr;
    }
    Varint* Size::size() {
        return const_cast<Varint*>(std::as_const(*this).size());
    }
    bool Size::size(const Varint& v) {
        if (SizeUnit::UNKNOWN==(*this).unit) {
            return false;
        }
        if (SizeUnit::BIT_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_6>(union_variant_4)) {
                union_variant_4 = union_struct_6();
            }
            std::get<2>((*this).union_variant_4).size = v;
            return true;
        }
        if (SizeUnit::BYTE_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_7>(union_variant_4)) {
                union_variant_4 = union_struct_7();
            }
            std::get<3>((*this).union_variant_4).size = v;
            return true;
        }
        if (SizeUnit::ELEMENT_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_8>(union_variant_4)) {
                union_variant_4 = union_struct_8();
            }
            std::get<4>((*this).union_variant_4).size = v;
            return true;
        }
        return false;
    }
    bool Size::size(Varint&& v) {
        if (SizeUnit::UNKNOWN==(*this).unit) {
            return false;
        }
        if (SizeUnit::BIT_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_6>(union_variant_4)) {
                union_variant_4 = union_struct_6();
            }
            std::get<2>((*this).union_variant_4).size = std::move(v);
            return true;
        }
        if (SizeUnit::BYTE_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_7>(union_variant_4)) {
                union_variant_4 = union_struct_7();
            }
            std::get<3>((*this).union_variant_4).size = std::move(v);
            return true;
        }
        if (SizeUnit::ELEMENT_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_8>(union_variant_4)) {
                union_variant_4 = union_struct_8();
            }
            std::get<4>((*this).union_variant_4).size = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* ExpressionBody::array_expr() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
        if(!std::holds_alternative<union_struct_32>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<19>((*this).union_variant_13).array_expr);
        }
        return nullptr;
    }
    ExpressionRef* ExpressionBody::array_expr() {
        return const_cast<ExpressionRef*>(std::as_const(*this).array_expr());
    }
    bool ExpressionBody::array_expr(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            if(!std::holds_alternative<union_struct_32>(union_variant_13)) {
                union_variant_13 = union_struct_32();
            }
            std::get<19>((*this).union_variant_13).array_expr = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::array_expr(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            if(!std::holds_alternative<union_struct_32>(union_variant_13)) {
                union_variant_13 = union_struct_32();
            }
            std::get<19>((*this).union_variant_13).array_expr = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* ExpressionBody::base() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        if(!std::holds_alternative<union_struct_24>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<11>((*this).union_variant_13).base);
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        if(!std::holds_alternative<union_struct_25>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<12>((*this).union_variant_13).base);
        }
        return nullptr;
    }
    ExpressionRef* ExpressionBody::base() {
        return const_cast<ExpressionRef*>(std::as_const(*this).base());
    }
    bool ExpressionBody::base(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            if(!std::holds_alternative<union_struct_24>(union_variant_13)) {
                union_variant_13 = union_struct_24();
            }
            std::get<11>((*this).union_variant_13).base = v;
            return true;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            if(!std::holds_alternative<union_struct_25>(union_variant_13)) {
                union_variant_13 = union_struct_25();
            }
            std::get<12>((*this).union_variant_13).base = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::base(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            if(!std::holds_alternative<union_struct_24>(union_variant_13)) {
                union_variant_13 = union_struct_24();
            }
            std::get<11>((*this).union_variant_13).base = std::move(v);
            return true;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            if(!std::holds_alternative<union_struct_25>(union_variant_13)) {
                union_variant_13 = union_struct_25();
            }
            std::get<12>((*this).union_variant_13).base = std::move(v);
            return true;
        }
        return false;
    }
    const std::uint8_t* ExpressionBody::bool_value() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        if(!std::holds_alternative<union_struct_16>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<3>((*this).union_variant_13).bool_value);
        }
        return nullptr;
    }
    std::uint8_t* ExpressionBody::bool_value() {
        return const_cast<std::uint8_t*>(std::as_const(*this).bool_value());
    }
    bool ExpressionBody::bool_value(const std::uint8_t& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            if(!std::holds_alternative<union_struct_16>(union_variant_13)) {
                union_variant_13 = union_struct_16();
            }
            std::get<3>((*this).union_variant_13).bool_value = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::bool_value(std::uint8_t&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            if(!std::holds_alternative<union_struct_16>(union_variant_13)) {
                union_variant_13 = union_struct_16();
            }
            std::get<3>((*this).union_variant_13).bool_value = std::move(v);
            return true;
        }
        return false;
    }
    const BinaryOp* ExpressionBody::bop() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        if(!std::holds_alternative<union_struct_21>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<8>((*this).union_variant_13).bop);
        }
        return nullptr;
    }
    BinaryOp* ExpressionBody::bop() {
        return const_cast<BinaryOp*>(std::as_const(*this).bop());
    }
    bool ExpressionBody::bop(const BinaryOp& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            if(!std::holds_alternative<union_struct_21>(union_variant_13)) {
                union_variant_13 = union_struct_21();
            }
            std::get<8>((*this).union_variant_13).bop = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::bop(BinaryOp&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            if(!std::holds_alternative<union_struct_21>(union_variant_13)) {
                union_variant_13 = union_struct_21();
            }
            std::get<8>((*this).union_variant_13).bop = std::move(v);
            return true;
        }
        return false;
    }
    const CallDesc* ExpressionBody::call_desc() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        if(!std::holds_alternative<union_struct_23>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<10>((*this).union_variant_13).call_desc);
        }
        return nullptr;
    }
    CallDesc* ExpressionBody::call_desc() {
        return const_cast<CallDesc*>(std::as_const(*this).call_desc());
    }
    bool ExpressionBody::call_desc(const CallDesc& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            if(!std::holds_alternative<union_struct_23>(union_variant_13)) {
                union_variant_13 = union_struct_23();
            }
            std::get<10>((*this).union_variant_13).call_desc = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::call_desc(CallDesc&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            if(!std::holds_alternative<union_struct_23>(union_variant_13)) {
                union_variant_13 = union_struct_23();
            }
            std::get<10>((*this).union_variant_13).call_desc = std::move(v);
            return true;
        }
        return false;
    }
    const CastType* ExpressionBody::cast_kind() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        if(!std::holds_alternative<union_struct_26>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<13>((*this).union_variant_13).cast_kind);
        }
        return nullptr;
    }
    CastType* ExpressionBody::cast_kind() {
        return const_cast<CastType*>(std::as_const(*this).cast_kind());
    }
    bool ExpressionBody::cast_kind(const CastType& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            if(!std::holds_alternative<union_struct_26>(union_variant_13)) {
                union_variant_13 = union_struct_26();
            }
            std::get<13>((*this).union_variant_13).cast_kind = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::cast_kind(CastType&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            if(!std::holds_alternative<union_struct_26>(union_variant_13)) {
                union_variant_13 = union_struct_26();
            }
            std::get<13>((*this).union_variant_13).cast_kind = std::move(v);
            return true;
        }
        return false;
    }
    const Varint* ExpressionBody::char_value() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        if(!std::holds_alternative<union_struct_19>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<6>((*this).union_variant_13).char_value);
        }
        return nullptr;
    }
    Varint* ExpressionBody::char_value() {
        return const_cast<Varint*>(std::as_const(*this).char_value());
    }
    bool ExpressionBody::char_value(const Varint& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            if(!std::holds_alternative<union_struct_19>(union_variant_13)) {
                union_variant_13 = union_struct_19();
            }
            std::get<6>((*this).union_variant_13).char_value = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::char_value(Varint&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            if(!std::holds_alternative<union_struct_19>(union_variant_13)) {
                union_variant_13 = union_struct_19();
            }
            std::get<6>((*this).union_variant_13).char_value = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* ExpressionBody::condition() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CONDITIONAL==(*this).kind) {
        if(!std::holds_alternative<union_struct_38>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<25>((*this).union_variant_13).condition);
        }
        return nullptr;
    }
    ExpressionRef* ExpressionBody::condition() {
        return const_cast<ExpressionRef*>(std::as_const(*this).condition());
    }
    bool ExpressionBody::condition(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_38>(union_variant_13)) {
                union_variant_13 = union_struct_38();
            }
            std::get<25>((*this).union_variant_13).condition = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::condition(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_38>(union_variant_13)) {
                union_variant_13 = union_struct_38();
            }
            std::get<25>((*this).union_variant_13).condition = std::move(v);
            return true;
        }
        return false;
    }
    const StatementRef* ExpressionBody::conditional_stmt() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
        if(!std::holds_alternative<union_struct_37>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<24>((*this).union_variant_13).conditional_stmt);
        }
        return nullptr;
    }
    StatementRef* ExpressionBody::conditional_stmt() {
        return const_cast<StatementRef*>(std::as_const(*this).conditional_stmt());
    }
    bool ExpressionBody::conditional_stmt(const StatementRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_37>(union_variant_13)) {
                union_variant_13 = union_struct_37();
            }
            std::get<24>((*this).union_variant_13).conditional_stmt = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::conditional_stmt(StatementRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_37>(union_variant_13)) {
                union_variant_13 = union_struct_37();
            }
            std::get<24>((*this).union_variant_13).conditional_stmt = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* ExpressionBody::else_() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CONDITIONAL==(*this).kind) {
        if(!std::holds_alternative<union_struct_38>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<25>((*this).union_variant_13).else_);
        }
        return nullptr;
    }
    ExpressionRef* ExpressionBody::else_() {
        return const_cast<ExpressionRef*>(std::as_const(*this).else_());
    }
    bool ExpressionBody::else_(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_38>(union_variant_13)) {
                union_variant_13 = union_struct_38();
            }
            std::get<25>((*this).union_variant_13).else_ = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::else_(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_38>(union_variant_13)) {
                union_variant_13 = union_struct_38();
            }
            std::get<25>((*this).union_variant_13).else_ = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* ExpressionBody::end() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
        if(!std::holds_alternative<union_struct_27>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<14>((*this).union_variant_13).end);
        }
        return nullptr;
    }
    ExpressionRef* ExpressionBody::end() {
        return const_cast<ExpressionRef*>(std::as_const(*this).end());
    }
    bool ExpressionBody::end(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_27>(union_variant_13)) {
                union_variant_13 = union_struct_27();
            }
            std::get<14>((*this).union_variant_13).end = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::end(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_27>(union_variant_13)) {
                union_variant_13 = union_struct_27();
            }
            std::get<14>((*this).union_variant_13).end = std::move(v);
            return true;
        }
        return false;
    }
    const StatementRef* ExpressionBody::endian_expr() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
        if(!std::holds_alternative<union_struct_28>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<15>((*this).union_variant_13).endian_expr);
        }
        return nullptr;
    }
    StatementRef* ExpressionBody::endian_expr() {
        return const_cast<StatementRef*>(std::as_const(*this).endian_expr());
    }
    bool ExpressionBody::endian_expr(const StatementRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            if(!std::holds_alternative<union_struct_28>(union_variant_13)) {
                union_variant_13 = union_struct_28();
            }
            std::get<15>((*this).union_variant_13).endian_expr = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::endian_expr(StatementRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            if(!std::holds_alternative<union_struct_28>(union_variant_13)) {
                union_variant_13 = union_struct_28();
            }
            std::get<15>((*this).union_variant_13).endian_expr = std::move(v);
            return true;
        }
        return false;
    }
    const TypeRef* ExpressionBody::from_type() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        if(!std::holds_alternative<union_struct_26>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<13>((*this).union_variant_13).from_type);
        }
        return nullptr;
    }
    TypeRef* ExpressionBody::from_type() {
        return const_cast<TypeRef*>(std::as_const(*this).from_type());
    }
    bool ExpressionBody::from_type(const TypeRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            if(!std::holds_alternative<union_struct_26>(union_variant_13)) {
                union_variant_13 = union_struct_26();
            }
            std::get<13>((*this).union_variant_13).from_type = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::from_type(TypeRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            if(!std::holds_alternative<union_struct_26>(union_variant_13)) {
                union_variant_13 = union_struct_26();
            }
            std::get<13>((*this).union_variant_13).from_type = std::move(v);
            return true;
        }
        return false;
    }
    const StatementRef* ExpressionBody::id() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        if(!std::holds_alternative<union_struct_20>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<7>((*this).union_variant_13).id);
        }
        return nullptr;
    }
    StatementRef* ExpressionBody::id() {
        return const_cast<StatementRef*>(std::as_const(*this).id());
    }
    bool ExpressionBody::id(const StatementRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            if(!std::holds_alternative<union_struct_20>(union_variant_13)) {
                union_variant_13 = union_struct_20();
            }
            std::get<7>((*this).union_variant_13).id = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::id(StatementRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            if(!std::holds_alternative<union_struct_20>(union_variant_13)) {
                union_variant_13 = union_struct_20();
            }
            std::get<7>((*this).union_variant_13).id = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* ExpressionBody::index() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        if(!std::holds_alternative<union_struct_24>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<11>((*this).union_variant_13).index);
        }
        return nullptr;
    }
    ExpressionRef* ExpressionBody::index() {
        return const_cast<ExpressionRef*>(std::as_const(*this).index());
    }
    bool ExpressionBody::index(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            if(!std::holds_alternative<union_struct_24>(union_variant_13)) {
                union_variant_13 = union_struct_24();
            }
            std::get<11>((*this).union_variant_13).index = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::index(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            if(!std::holds_alternative<union_struct_24>(union_variant_13)) {
                union_variant_13 = union_struct_24();
            }
            std::get<11>((*this).union_variant_13).index = std::move(v);
            return true;
        }
        return false;
    }
    const std::uint64_t* ExpressionBody::int64_value() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        if(!std::holds_alternative<union_struct_15>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<2>((*this).union_variant_13).int64_value);
        }
        return nullptr;
    }
    std::uint64_t* ExpressionBody::int64_value() {
        return const_cast<std::uint64_t*>(std::as_const(*this).int64_value());
    }
    bool ExpressionBody::int64_value(const std::uint64_t& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            if(!std::holds_alternative<union_struct_15>(union_variant_13)) {
                union_variant_13 = union_struct_15();
            }
            std::get<2>((*this).union_variant_13).int64_value = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::int64_value(std::uint64_t&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            if(!std::holds_alternative<union_struct_15>(union_variant_13)) {
                union_variant_13 = union_struct_15();
            }
            std::get<2>((*this).union_variant_13).int64_value = std::move(v);
            return true;
        }
        return false;
    }
    const Varint* ExpressionBody::int_value() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        if(!std::holds_alternative<union_struct_14>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<1>((*this).union_variant_13).int_value);
        }
        return nullptr;
    }
    Varint* ExpressionBody::int_value() {
        return const_cast<Varint*>(std::as_const(*this).int_value());
    }
    bool ExpressionBody::int_value(const Varint& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            if(!std::holds_alternative<union_struct_14>(union_variant_13)) {
                union_variant_13 = union_struct_14();
            }
            std::get<1>((*this).union_variant_13).int_value = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::int_value(Varint&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            if(!std::holds_alternative<union_struct_14>(union_variant_13)) {
                union_variant_13 = union_struct_14();
            }
            std::get<1>((*this).union_variant_13).int_value = std::move(v);
            return true;
        }
        return false;
    }
    const StatementRef* ExpressionBody::io_statement() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
        if(!std::holds_alternative<union_struct_35>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<22>((*this).union_variant_13).io_statement);
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
        if(!std::holds_alternative<union_struct_36>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<23>((*this).union_variant_13).io_statement);
        }
        return nullptr;
    }
    StatementRef* ExpressionBody::io_statement() {
        return const_cast<StatementRef*>(std::as_const(*this).io_statement());
    }
    bool ExpressionBody::io_statement(const StatementRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_13)) {
                union_variant_13 = union_struct_35();
            }
            std::get<22>((*this).union_variant_13).io_statement = v;
            return true;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_36>(union_variant_13)) {
                union_variant_13 = union_struct_36();
            }
            std::get<23>((*this).union_variant_13).io_statement = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::io_statement(StatementRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_13)) {
                union_variant_13 = union_struct_35();
            }
            std::get<22>((*this).union_variant_13).io_statement = std::move(v);
            return true;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_36>(union_variant_13)) {
                union_variant_13 = union_struct_36();
            }
            std::get<23>((*this).union_variant_13).io_statement = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* ExpressionBody::left() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        if(!std::holds_alternative<union_struct_21>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<8>((*this).union_variant_13).left);
        }
        return nullptr;
    }
    ExpressionRef* ExpressionBody::left() {
        return const_cast<ExpressionRef*>(std::as_const(*this).left());
    }
    bool ExpressionBody::left(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            if(!std::holds_alternative<union_struct_21>(union_variant_13)) {
                union_variant_13 = union_struct_21();
            }
            std::get<8>((*this).union_variant_13).left = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::left(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            if(!std::holds_alternative<union_struct_21>(union_variant_13)) {
                union_variant_13 = union_struct_21();
            }
            std::get<8>((*this).union_variant_13).left = std::move(v);
            return true;
        }
        return false;
    }
    const LoweredExpressionRef* ExpressionBody::lowered_expr() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
        if(!std::holds_alternative<union_struct_34>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<21>((*this).union_variant_13).lowered_expr);
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CONDITIONAL==(*this).kind) {
        if(!std::holds_alternative<union_struct_38>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<25>((*this).union_variant_13).lowered_expr);
        }
        return nullptr;
    }
    LoweredExpressionRef* ExpressionBody::lowered_expr() {
        return const_cast<LoweredExpressionRef*>(std::as_const(*this).lowered_expr());
    }
    bool ExpressionBody::lowered_expr(const LoweredExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
            if(!std::holds_alternative<union_struct_34>(union_variant_13)) {
                union_variant_13 = union_struct_34();
            }
            std::get<21>((*this).union_variant_13).lowered_expr = v;
            return true;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_38>(union_variant_13)) {
                union_variant_13 = union_struct_38();
            }
            std::get<25>((*this).union_variant_13).lowered_expr = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::lowered_expr(LoweredExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
            if(!std::holds_alternative<union_struct_34>(union_variant_13)) {
                union_variant_13 = union_struct_34();
            }
            std::get<21>((*this).union_variant_13).lowered_expr = std::move(v);
            return true;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_38>(union_variant_13)) {
                union_variant_13 = union_struct_38();
            }
            std::get<25>((*this).union_variant_13).lowered_expr = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* ExpressionBody::member() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        if(!std::holds_alternative<union_struct_25>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<12>((*this).union_variant_13).member);
        }
        return nullptr;
    }
    ExpressionRef* ExpressionBody::member() {
        return const_cast<ExpressionRef*>(std::as_const(*this).member());
    }
    bool ExpressionBody::member(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            if(!std::holds_alternative<union_struct_25>(union_variant_13)) {
                union_variant_13 = union_struct_25();
            }
            std::get<12>((*this).union_variant_13).member = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::member(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            if(!std::holds_alternative<union_struct_25>(union_variant_13)) {
                union_variant_13 = union_struct_25();
            }
            std::get<12>((*this).union_variant_13).member = std::move(v);
            return true;
        }
        return false;
    }
    const Size* ExpressionBody::num_bytes() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
        if(!std::holds_alternative<union_struct_31>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<18>((*this).union_variant_13).num_bytes);
        }
        return nullptr;
    }
    Size* ExpressionBody::num_bytes() {
        return const_cast<Size*>(std::as_const(*this).num_bytes());
    }
    bool ExpressionBody::num_bytes(const Size& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            if(!std::holds_alternative<union_struct_31>(union_variant_13)) {
                union_variant_13 = union_struct_31();
            }
            std::get<18>((*this).union_variant_13).num_bytes = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::num_bytes(Size&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            if(!std::holds_alternative<union_struct_31>(union_variant_13)) {
                union_variant_13 = union_struct_31();
            }
            std::get<18>((*this).union_variant_13).num_bytes = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* ExpressionBody::operand() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        if(!std::holds_alternative<union_struct_22>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<9>((*this).union_variant_13).operand);
        }
        return nullptr;
    }
    ExpressionRef* ExpressionBody::operand() {
        return const_cast<ExpressionRef*>(std::as_const(*this).operand());
    }
    bool ExpressionBody::operand(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            if(!std::holds_alternative<union_struct_22>(union_variant_13)) {
                union_variant_13 = union_struct_22();
            }
            std::get<9>((*this).union_variant_13).operand = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::operand(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            if(!std::holds_alternative<union_struct_22>(union_variant_13)) {
                union_variant_13 = union_struct_22();
            }
            std::get<9>((*this).union_variant_13).operand = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* ExpressionBody::right() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        if(!std::holds_alternative<union_struct_21>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<8>((*this).union_variant_13).right);
        }
        return nullptr;
    }
    ExpressionRef* ExpressionBody::right() {
        return const_cast<ExpressionRef*>(std::as_const(*this).right());
    }
    bool ExpressionBody::right(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            if(!std::holds_alternative<union_struct_21>(union_variant_13)) {
                union_variant_13 = union_struct_21();
            }
            std::get<8>((*this).union_variant_13).right = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::right(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            if(!std::holds_alternative<union_struct_21>(union_variant_13)) {
                union_variant_13 = union_struct_21();
            }
            std::get<8>((*this).union_variant_13).right = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* ExpressionBody::source_expr() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        if(!std::holds_alternative<union_struct_26>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<13>((*this).union_variant_13).source_expr);
        }
        return nullptr;
    }
    ExpressionRef* ExpressionBody::source_expr() {
        return const_cast<ExpressionRef*>(std::as_const(*this).source_expr());
    }
    bool ExpressionBody::source_expr(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            if(!std::holds_alternative<union_struct_26>(union_variant_13)) {
                union_variant_13 = union_struct_26();
            }
            std::get<13>((*this).union_variant_13).source_expr = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::source_expr(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            if(!std::holds_alternative<union_struct_26>(union_variant_13)) {
                union_variant_13 = union_struct_26();
            }
            std::get<13>((*this).union_variant_13).source_expr = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* ExpressionBody::start() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
        if(!std::holds_alternative<union_struct_27>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<14>((*this).union_variant_13).start);
        }
        return nullptr;
    }
    ExpressionRef* ExpressionBody::start() {
        return const_cast<ExpressionRef*>(std::as_const(*this).start());
    }
    bool ExpressionBody::start(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_27>(union_variant_13)) {
                union_variant_13 = union_struct_27();
            }
            std::get<14>((*this).union_variant_13).start = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::start(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_27>(union_variant_13)) {
                union_variant_13 = union_struct_27();
            }
            std::get<14>((*this).union_variant_13).start = std::move(v);
            return true;
        }
        return false;
    }
    const StreamType* ExpressionBody::stream_type() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
        if(!std::holds_alternative<union_struct_29>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<16>((*this).union_variant_13).stream_type);
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
        if(!std::holds_alternative<union_struct_30>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<17>((*this).union_variant_13).stream_type);
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
        if(!std::holds_alternative<union_struct_31>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<18>((*this).union_variant_13).stream_type);
        }
        return nullptr;
    }
    StreamType* ExpressionBody::stream_type() {
        return const_cast<StreamType*>(std::as_const(*this).stream_type());
    }
    bool ExpressionBody::stream_type(const StreamType& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            if(!std::holds_alternative<union_struct_29>(union_variant_13)) {
                union_variant_13 = union_struct_29();
            }
            std::get<16>((*this).union_variant_13).stream_type = v;
            return true;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            if(!std::holds_alternative<union_struct_30>(union_variant_13)) {
                union_variant_13 = union_struct_30();
            }
            std::get<17>((*this).union_variant_13).stream_type = v;
            return true;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            if(!std::holds_alternative<union_struct_31>(union_variant_13)) {
                union_variant_13 = union_struct_31();
            }
            std::get<18>((*this).union_variant_13).stream_type = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::stream_type(StreamType&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            if(!std::holds_alternative<union_struct_29>(union_variant_13)) {
                union_variant_13 = union_struct_29();
            }
            std::get<16>((*this).union_variant_13).stream_type = std::move(v);
            return true;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            if(!std::holds_alternative<union_struct_30>(union_variant_13)) {
                union_variant_13 = union_struct_30();
            }
            std::get<17>((*this).union_variant_13).stream_type = std::move(v);
            return true;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            if(!std::holds_alternative<union_struct_31>(union_variant_13)) {
                union_variant_13 = union_struct_31();
            }
            std::get<18>((*this).union_variant_13).stream_type = std::move(v);
            return true;
        }
        return false;
    }
    const StringRef* ExpressionBody::string_value() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        if(!std::holds_alternative<union_struct_17>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<4>((*this).union_variant_13).string_value);
        }
        return nullptr;
    }
    StringRef* ExpressionBody::string_value() {
        return const_cast<StringRef*>(std::as_const(*this).string_value());
    }
    bool ExpressionBody::string_value(const StringRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            if(!std::holds_alternative<union_struct_17>(union_variant_13)) {
                union_variant_13 = union_struct_17();
            }
            std::get<4>((*this).union_variant_13).string_value = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::string_value(StringRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            if(!std::holds_alternative<union_struct_17>(union_variant_13)) {
                union_variant_13 = union_struct_17();
            }
            std::get<4>((*this).union_variant_13).string_value = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* ExpressionBody::target_expr() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
        if(!std::holds_alternative<union_struct_33>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<20>((*this).union_variant_13).target_expr);
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
        if(!std::holds_alternative<union_struct_36>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<23>((*this).union_variant_13).target_expr);
        }
        return nullptr;
    }
    ExpressionRef* ExpressionBody::target_expr() {
        return const_cast<ExpressionRef*>(std::as_const(*this).target_expr());
    }
    bool ExpressionBody::target_expr(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
            if(!std::holds_alternative<union_struct_33>(union_variant_13)) {
                union_variant_13 = union_struct_33();
            }
            std::get<20>((*this).union_variant_13).target_expr = v;
            return true;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_36>(union_variant_13)) {
                union_variant_13 = union_struct_36();
            }
            std::get<23>((*this).union_variant_13).target_expr = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::target_expr(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
            if(!std::holds_alternative<union_struct_33>(union_variant_13)) {
                union_variant_13 = union_struct_33();
            }
            std::get<20>((*this).union_variant_13).target_expr = std::move(v);
            return true;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_36>(union_variant_13)) {
                union_variant_13 = union_struct_36();
            }
            std::get<23>((*this).union_variant_13).target_expr = std::move(v);
            return true;
        }
        return false;
    }
    const StatementRef* ExpressionBody::target_stmt() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
        if(!std::holds_alternative<union_struct_35>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<22>((*this).union_variant_13).target_stmt);
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
        if(!std::holds_alternative<union_struct_37>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<24>((*this).union_variant_13).target_stmt);
        }
        return nullptr;
    }
    StatementRef* ExpressionBody::target_stmt() {
        return const_cast<StatementRef*>(std::as_const(*this).target_stmt());
    }
    bool ExpressionBody::target_stmt(const StatementRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_13)) {
                union_variant_13 = union_struct_35();
            }
            std::get<22>((*this).union_variant_13).target_stmt = v;
            return true;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_37>(union_variant_13)) {
                union_variant_13 = union_struct_37();
            }
            std::get<24>((*this).union_variant_13).target_stmt = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::target_stmt(StatementRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_13)) {
                union_variant_13 = union_struct_35();
            }
            std::get<22>((*this).union_variant_13).target_stmt = std::move(v);
            return true;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_37>(union_variant_13)) {
                union_variant_13 = union_struct_37();
            }
            std::get<24>((*this).union_variant_13).target_stmt = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* ExpressionBody::then() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CONDITIONAL==(*this).kind) {
        if(!std::holds_alternative<union_struct_38>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<25>((*this).union_variant_13).then);
        }
        return nullptr;
    }
    ExpressionRef* ExpressionBody::then() {
        return const_cast<ExpressionRef*>(std::as_const(*this).then());
    }
    bool ExpressionBody::then(const ExpressionRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_38>(union_variant_13)) {
                union_variant_13 = union_struct_38();
            }
            std::get<25>((*this).union_variant_13).then = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::then(ExpressionRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            return false;
        }
        if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_ERROR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MAX_VALUE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CONDITIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_38>(union_variant_13)) {
                union_variant_13 = union_struct_38();
            }
            std::get<25>((*this).union_variant_13).then = std::move(v);
            return true;
        }
        return false;
    }
    const TypeRef* ExpressionBody::type_ref() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        if(!std::holds_alternative<union_struct_18>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<5>((*this).union_variant_13).type_ref);
        }
        return nullptr;
    }
    TypeRef* ExpressionBody::type_ref() {
        return const_cast<TypeRef*>(std::as_const(*this).type_ref());
    }
    bool ExpressionBody::type_ref(const TypeRef& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            if(!std::holds_alternative<union_struct_18>(union_variant_13)) {
                union_variant_13 = union_struct_18();
            }
            std::get<5>((*this).union_variant_13).type_ref = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::type_ref(TypeRef&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            if(!std::holds_alternative<union_struct_18>(union_variant_13)) {
                union_variant_13 = union_struct_18();
            }
            std::get<5>((*this).union_variant_13).type_ref = std::move(v);
            return true;
        }
        return false;
    }
    const SizeUnit* ExpressionBody::unit() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::CALL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
        if(!std::holds_alternative<union_struct_29>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<16>((*this).union_variant_13).unit);
        }
        return nullptr;
    }
    SizeUnit* ExpressionBody::unit() {
        return const_cast<SizeUnit*>(std::as_const(*this).unit());
    }
    bool ExpressionBody::unit(const SizeUnit& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            if(!std::holds_alternative<union_struct_29>(union_variant_13)) {
                union_variant_13 = union_struct_29();
            }
            std::get<16>((*this).union_variant_13).unit = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::unit(SizeUnit&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::CALL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            return false;
        }
        if (ExpressionOp::TYPE_CAST==(*this).kind) {
            return false;
        }
        if (ExpressionOp::RANGE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            return false;
        }
        if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            if(!std::holds_alternative<union_struct_29>(union_variant_13)) {
                union_variant_13 = union_struct_29();
            }
            std::get<16>((*this).union_variant_13).unit = std::move(v);
            return true;
        }
        return false;
    }
    const UnaryOp* ExpressionBody::uop() const {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
        return nullptr;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
        if(!std::holds_alternative<union_struct_22>(union_variant_13)) {
            return nullptr;
        }
        return std::addressof(std::get<9>((*this).union_variant_13).uop);
        }
        return nullptr;
    }
    UnaryOp* ExpressionBody::uop() {
        return const_cast<UnaryOp*>(std::as_const(*this).uop());
    }
    bool ExpressionBody::uop(const UnaryOp& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            if(!std::holds_alternative<union_struct_22>(union_variant_13)) {
                union_variant_13 = union_struct_22();
            }
            std::get<9>((*this).union_variant_13).uop = v;
            return true;
        }
        return false;
    }
    bool ExpressionBody::uop(UnaryOp&& v) {
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            return false;
        }
        if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            return false;
        }
        if (ExpressionOp::IDENTIFIER==(*this).kind) {
            return false;
        }
        if (ExpressionOp::BINARY_OP==(*this).kind) {
            return false;
        }
        if (ExpressionOp::UNARY_OP==(*this).kind) {
            if(!std::holds_alternative<union_struct_22>(union_variant_13)) {
                union_variant_13 = union_struct_22();
            }
            std::get<9>((*this).union_variant_13).uop = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* LoopStatement::collection() const {
        if (LoopType::INFINITE==(*this).loop_type) {
        return nullptr;
        }
        if (LoopType::WHILE==(*this).loop_type) {
        return nullptr;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
        if(!std::holds_alternative<union_struct_43>(union_variant_40)) {
            return nullptr;
        }
        return std::addressof(std::get<3>((*this).union_variant_40).collection);
        }
        return nullptr;
    }
    ExpressionRef* LoopStatement::collection() {
        return const_cast<ExpressionRef*>(std::as_const(*this).collection());
    }
    bool LoopStatement::collection(const ExpressionRef& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_43>(union_variant_40)) {
                union_variant_40 = union_struct_43();
            }
            std::get<3>((*this).union_variant_40).collection = v;
            return true;
        }
        return false;
    }
    bool LoopStatement::collection(ExpressionRef&& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_43>(union_variant_40)) {
                union_variant_40 = union_struct_43();
            }
            std::get<3>((*this).union_variant_40).collection = std::move(v);
            return true;
        }
        return false;
    }
    const Condition* LoopStatement::condition() const {
        if (LoopType::INFINITE==(*this).loop_type) {
        return nullptr;
        }
        if (LoopType::WHILE==(*this).loop_type) {
        if(!std::holds_alternative<union_struct_42>(union_variant_40)) {
            return nullptr;
        }
        return std::addressof(std::get<2>((*this).union_variant_40).condition);
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
        return nullptr;
        }
        if (LoopType::FOR==(*this).loop_type) {
        if(!std::holds_alternative<union_struct_44>(union_variant_40)) {
            return nullptr;
        }
        return std::addressof(std::get<4>((*this).union_variant_40).condition);
        }
        return nullptr;
    }
    Condition* LoopStatement::condition() {
        return const_cast<Condition*>(std::as_const(*this).condition());
    }
    bool LoopStatement::condition(const Condition& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_42>(union_variant_40)) {
                union_variant_40 = union_struct_42();
            }
            std::get<2>((*this).union_variant_40).condition = v;
            return true;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_44>(union_variant_40)) {
                union_variant_40 = union_struct_44();
            }
            std::get<4>((*this).union_variant_40).condition = v;
            return true;
        }
        return false;
    }
    bool LoopStatement::condition(Condition&& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_42>(union_variant_40)) {
                union_variant_40 = union_struct_42();
            }
            std::get<2>((*this).union_variant_40).condition = std::move(v);
            return true;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_44>(union_variant_40)) {
                union_variant_40 = union_struct_44();
            }
            std::get<4>((*this).union_variant_40).condition = std::move(v);
            return true;
        }
        return false;
    }
    const StatementRef* LoopStatement::increment() const {
        if (LoopType::INFINITE==(*this).loop_type) {
        return nullptr;
        }
        if (LoopType::WHILE==(*this).loop_type) {
        return nullptr;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
        return nullptr;
        }
        if (LoopType::FOR==(*this).loop_type) {
        if(!std::holds_alternative<union_struct_44>(union_variant_40)) {
            return nullptr;
        }
        return std::addressof(std::get<4>((*this).union_variant_40).increment);
        }
        return nullptr;
    }
    StatementRef* LoopStatement::increment() {
        return const_cast<StatementRef*>(std::as_const(*this).increment());
    }
    bool LoopStatement::increment(const StatementRef& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_44>(union_variant_40)) {
                union_variant_40 = union_struct_44();
            }
            std::get<4>((*this).union_variant_40).increment = v;
            return true;
        }
        return false;
    }
    bool LoopStatement::increment(StatementRef&& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_44>(union_variant_40)) {
                union_variant_40 = union_struct_44();
            }
            std::get<4>((*this).union_variant_40).increment = std::move(v);
            return true;
        }
        return false;
    }
    const StatementRef* LoopStatement::init() const {
        if (LoopType::INFINITE==(*this).loop_type) {
        return nullptr;
        }
        if (LoopType::WHILE==(*this).loop_type) {
        return nullptr;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
        return nullptr;
        }
        if (LoopType::FOR==(*this).loop_type) {
        if(!std::holds_alternative<union_struct_44>(union_variant_40)) {
            return nullptr;
        }
        return std::addressof(std::get<4>((*this).union_variant_40).init);
        }
        return nullptr;
    }
    StatementRef* LoopStatement::init() {
        return const_cast<StatementRef*>(std::as_const(*this).init());
    }
    bool LoopStatement::init(const StatementRef& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_44>(union_variant_40)) {
                union_variant_40 = union_struct_44();
            }
            std::get<4>((*this).union_variant_40).init = v;
            return true;
        }
        return false;
    }
    bool LoopStatement::init(StatementRef&& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_44>(union_variant_40)) {
                union_variant_40 = union_struct_44();
            }
            std::get<4>((*this).union_variant_40).init = std::move(v);
            return true;
        }
        return false;
    }
    const StatementRef* LoopStatement::item_var() const {
        if (LoopType::INFINITE==(*this).loop_type) {
        return nullptr;
        }
        if (LoopType::WHILE==(*this).loop_type) {
        return nullptr;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
        if(!std::holds_alternative<union_struct_43>(union_variant_40)) {
            return nullptr;
        }
        return std::addressof(std::get<3>((*this).union_variant_40).item_var);
        }
        return nullptr;
    }
    StatementRef* LoopStatement::item_var() {
        return const_cast<StatementRef*>(std::as_const(*this).item_var());
    }
    bool LoopStatement::item_var(const StatementRef& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_43>(union_variant_40)) {
                union_variant_40 = union_struct_43();
            }
            std::get<3>((*this).union_variant_40).item_var = v;
            return true;
        }
        return false;
    }
    bool LoopStatement::item_var(StatementRef&& v) {
        if (LoopType::INFINITE==(*this).loop_type) {
            return false;
        }
        if (LoopType::WHILE==(*this).loop_type) {
            return false;
        }
        if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_43>(union_variant_40)) {
                union_variant_40 = union_struct_43();
            }
            std::get<3>((*this).union_variant_40).item_var = std::move(v);
            return true;
        }
        return false;
    }
    const IdentifierRef* StatementBody::alias() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::METADATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
        if(!std::holds_alternative<union_struct_79>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<28>((*this).union_variant_51).alias);
        }
        return nullptr;
    }
    IdentifierRef* StatementBody::alias() {
        return const_cast<IdentifierRef*>(std::as_const(*this).alias());
    }
    bool StatementBody::alias(const IdentifierRef& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
            if(!std::holds_alternative<union_struct_79>(union_variant_51)) {
                union_variant_51 = union_struct_79();
            }
            std::get<28>((*this).union_variant_51).alias = v;
            return true;
        }
        return false;
    }
    bool StatementBody::alias(IdentifierRef&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
            if(!std::holds_alternative<union_struct_79>(union_variant_51)) {
                union_variant_51 = union_struct_79();
            }
            std::get<28>((*this).union_variant_51).alias = std::move(v);
            return true;
        }
        return false;
    }
    const AssertDesc* StatementBody::assert_desc() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        if(!std::holds_alternative<union_struct_58>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<7>((*this).union_variant_51).assert_desc);
        }
        return nullptr;
    }
    AssertDesc* StatementBody::assert_desc() {
        return const_cast<AssertDesc*>(std::as_const(*this).assert_desc());
    }
    bool StatementBody::assert_desc(const AssertDesc& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            if(!std::holds_alternative<union_struct_58>(union_variant_51)) {
                union_variant_51 = union_struct_58();
            }
            std::get<7>((*this).union_variant_51).assert_desc = v;
            return true;
        }
        return false;
    }
    bool StatementBody::assert_desc(AssertDesc&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            if(!std::holds_alternative<union_struct_58>(union_variant_51)) {
                union_variant_51 = union_struct_58();
            }
            std::get<7>((*this).union_variant_51).assert_desc = std::move(v);
            return true;
        }
        return false;
    }
    const Block* StatementBody::block() const {
        if (StatementOp::BLOCK==(*this).kind) {
        if(!std::holds_alternative<union_struct_52>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<1>((*this).union_variant_51).block);
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
        if(!std::holds_alternative<union_struct_76>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<25>((*this).union_variant_51).block);
        }
        return nullptr;
    }
    Block* StatementBody::block() {
        return const_cast<Block*>(std::as_const(*this).block());
    }
    bool StatementBody::block(const Block& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            if(!std::holds_alternative<union_struct_52>(union_variant_51)) {
                union_variant_51 = union_struct_52();
            }
            std::get<1>((*this).union_variant_51).block = v;
            return true;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_76>(union_variant_51)) {
                union_variant_51 = union_struct_76();
            }
            std::get<25>((*this).union_variant_51).block = v;
            return true;
        }
        return false;
    }
    bool StatementBody::block(Block&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            if(!std::holds_alternative<union_struct_52>(union_variant_51)) {
                union_variant_51 = union_struct_52();
            }
            std::get<1>((*this).union_variant_51).block = std::move(v);
            return true;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_76>(union_variant_51)) {
                union_variant_51 = union_struct_76();
            }
            std::get<25>((*this).union_variant_51).block = std::move(v);
            return true;
        }
        return false;
    }
    const LoopFlowControl* StatementBody::break_() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        if(!std::holds_alternative<union_struct_66>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<15>((*this).union_variant_51).break_);
        }
        return nullptr;
    }
    LoopFlowControl* StatementBody::break_() {
        return const_cast<LoopFlowControl*>(std::as_const(*this).break_());
    }
    bool StatementBody::break_(const LoopFlowControl& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            if(!std::holds_alternative<union_struct_66>(union_variant_51)) {
                union_variant_51 = union_struct_66();
            }
            std::get<15>((*this).union_variant_51).break_ = v;
            return true;
        }
        return false;
    }
    bool StatementBody::break_(LoopFlowControl&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            if(!std::holds_alternative<union_struct_66>(union_variant_51)) {
                union_variant_51 = union_struct_66();
            }
            std::get<15>((*this).union_variant_51).break_ = std::move(v);
            return true;
        }
        return false;
    }
    const LoopFlowControl* StatementBody::continue_() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        if(!std::holds_alternative<union_struct_67>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<16>((*this).union_variant_51).continue_);
        }
        return nullptr;
    }
    LoopFlowControl* StatementBody::continue_() {
        return const_cast<LoopFlowControl*>(std::as_const(*this).continue_());
    }
    bool StatementBody::continue_(const LoopFlowControl& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            if(!std::holds_alternative<union_struct_67>(union_variant_51)) {
                union_variant_51 = union_struct_67();
            }
            std::get<16>((*this).union_variant_51).continue_ = v;
            return true;
        }
        return false;
    }
    bool StatementBody::continue_(LoopFlowControl&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            if(!std::holds_alternative<union_struct_67>(union_variant_51)) {
                union_variant_51 = union_struct_67();
            }
            std::get<16>((*this).union_variant_51).continue_ = std::move(v);
            return true;
        }
        return false;
    }
    const EnumDecl* StatementBody::enum_decl() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
        if(!std::holds_alternative<union_struct_71>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<20>((*this).union_variant_51).enum_decl);
        }
        return nullptr;
    }
    EnumDecl* StatementBody::enum_decl() {
        return const_cast<EnumDecl*>(std::as_const(*this).enum_decl());
    }
    bool StatementBody::enum_decl(const EnumDecl& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_71>(union_variant_51)) {
                union_variant_51 = union_struct_71();
            }
            std::get<20>((*this).union_variant_51).enum_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::enum_decl(EnumDecl&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_71>(union_variant_51)) {
                union_variant_51 = union_struct_71();
            }
            std::get<20>((*this).union_variant_51).enum_decl = std::move(v);
            return true;
        }
        return false;
    }
    const EnumMemberDecl* StatementBody::enum_member_decl() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
        if(!std::holds_alternative<union_struct_72>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<21>((*this).union_variant_51).enum_member_decl);
        }
        return nullptr;
    }
    EnumMemberDecl* StatementBody::enum_member_decl() {
        return const_cast<EnumMemberDecl*>(std::as_const(*this).enum_member_decl());
    }
    bool StatementBody::enum_member_decl(const EnumMemberDecl& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_72>(union_variant_51)) {
                union_variant_51 = union_struct_72();
            }
            std::get<21>((*this).union_variant_51).enum_member_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::enum_member_decl(EnumMemberDecl&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_72>(union_variant_51)) {
                union_variant_51 = union_struct_72();
            }
            std::get<21>((*this).union_variant_51).enum_member_decl = std::move(v);
            return true;
        }
        return false;
    }
    const ErrorReport* StatementBody::error_report() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::METADATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_REPORT==(*this).kind) {
        if(!std::holds_alternative<union_struct_81>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<30>((*this).union_variant_51).error_report);
        }
        return nullptr;
    }
    ErrorReport* StatementBody::error_report() {
        return const_cast<ErrorReport*>(std::as_const(*this).error_report());
    }
    bool StatementBody::error_report(const ErrorReport& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_REPORT==(*this).kind) {
            if(!std::holds_alternative<union_struct_81>(union_variant_51)) {
                union_variant_51 = union_struct_81();
            }
            std::get<30>((*this).union_variant_51).error_report = v;
            return true;
        }
        return false;
    }
    bool StatementBody::error_report(ErrorReport&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_REPORT==(*this).kind) {
            if(!std::holds_alternative<union_struct_81>(union_variant_51)) {
                union_variant_51 = union_struct_81();
            }
            std::get<30>((*this).union_variant_51).error_report = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* StatementBody::expression() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::METADATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_REPORT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::EXPRESSION==(*this).kind) {
        if(!std::holds_alternative<union_struct_82>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<31>((*this).union_variant_51).expression);
        }
        return nullptr;
    }
    ExpressionRef* StatementBody::expression() {
        return const_cast<ExpressionRef*>(std::as_const(*this).expression());
    }
    bool StatementBody::expression(const ExpressionRef& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_REPORT==(*this).kind) {
            return false;
        }
        if (StatementOp::EXPRESSION==(*this).kind) {
            if(!std::holds_alternative<union_struct_82>(union_variant_51)) {
                union_variant_51 = union_struct_82();
            }
            std::get<31>((*this).union_variant_51).expression = v;
            return true;
        }
        return false;
    }
    bool StatementBody::expression(ExpressionRef&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_REPORT==(*this).kind) {
            return false;
        }
        if (StatementOp::EXPRESSION==(*this).kind) {
            if(!std::holds_alternative<union_struct_82>(union_variant_51)) {
                union_variant_51 = union_struct_82();
            }
            std::get<31>((*this).union_variant_51).expression = std::move(v);
            return true;
        }
        return false;
    }
    const FieldDecl* StatementBody::field_decl() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
        if(!std::holds_alternative<union_struct_70>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<19>((*this).union_variant_51).field_decl);
        }
        return nullptr;
    }
    FieldDecl* StatementBody::field_decl() {
        return const_cast<FieldDecl*>(std::as_const(*this).field_decl());
    }
    bool StatementBody::field_decl(const FieldDecl& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_70>(union_variant_51)) {
                union_variant_51 = union_struct_70();
            }
            std::get<19>((*this).union_variant_51).field_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::field_decl(FieldDecl&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_70>(union_variant_51)) {
                union_variant_51 = union_struct_70();
            }
            std::get<19>((*this).union_variant_51).field_decl = std::move(v);
            return true;
        }
        return false;
    }
    const FunctionDecl* StatementBody::func_decl() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        if(!std::holds_alternative<union_struct_68>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<17>((*this).union_variant_51).func_decl);
        }
        return nullptr;
    }
    FunctionDecl* StatementBody::func_decl() {
        return const_cast<FunctionDecl*>(std::as_const(*this).func_decl());
    }
    bool StatementBody::func_decl(const FunctionDecl& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_68>(union_variant_51)) {
                union_variant_51 = union_struct_68();
            }
            std::get<17>((*this).union_variant_51).func_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::func_decl(FunctionDecl&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_68>(union_variant_51)) {
                union_variant_51 = union_struct_68();
            }
            std::get<17>((*this).union_variant_51).func_decl = std::move(v);
            return true;
        }
        return false;
    }
    const IfStatement* StatementBody::if_statement() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        if(!std::holds_alternative<union_struct_62>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<11>((*this).union_variant_51).if_statement);
        }
        return nullptr;
    }
    IfStatement* StatementBody::if_statement() {
        return const_cast<IfStatement*>(std::as_const(*this).if_statement());
    }
    bool StatementBody::if_statement(const IfStatement& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_62>(union_variant_51)) {
                union_variant_51 = union_struct_62();
            }
            std::get<11>((*this).union_variant_51).if_statement = v;
            return true;
        }
        return false;
    }
    bool StatementBody::if_statement(IfStatement&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_62>(union_variant_51)) {
                union_variant_51 = union_struct_62();
            }
            std::get<11>((*this).union_variant_51).if_statement = std::move(v);
            return true;
        }
        return false;
    }
    const LoopStatement* StatementBody::loop() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        if(!std::holds_alternative<union_struct_63>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<12>((*this).union_variant_51).loop);
        }
        return nullptr;
    }
    LoopStatement* StatementBody::loop() {
        return const_cast<LoopStatement*>(std::as_const(*this).loop());
    }
    bool StatementBody::loop(const LoopStatement& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_63>(union_variant_51)) {
                union_variant_51 = union_struct_63();
            }
            std::get<12>((*this).union_variant_51).loop = v;
            return true;
        }
        return false;
    }
    bool StatementBody::loop(LoopStatement&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_63>(union_variant_51)) {
                union_variant_51 = union_struct_63();
            }
            std::get<12>((*this).union_variant_51).loop = std::move(v);
            return true;
        }
        return false;
    }
    const LoweredStatements* StatementBody::lowered_statements() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::METADATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_REPORT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::EXPRESSION==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOWERED_STATEMENTS==(*this).kind) {
        if(!std::holds_alternative<union_struct_83>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<32>((*this).union_variant_51).lowered_statements);
        }
        return nullptr;
    }
    LoweredStatements* StatementBody::lowered_statements() {
        return const_cast<LoweredStatements*>(std::as_const(*this).lowered_statements());
    }
    bool StatementBody::lowered_statements(const LoweredStatements& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_REPORT==(*this).kind) {
            return false;
        }
        if (StatementOp::EXPRESSION==(*this).kind) {
            return false;
        }
        if (StatementOp::LOWERED_STATEMENTS==(*this).kind) {
            if(!std::holds_alternative<union_struct_83>(union_variant_51)) {
                union_variant_51 = union_struct_83();
            }
            std::get<32>((*this).union_variant_51).lowered_statements = v;
            return true;
        }
        return false;
    }
    bool StatementBody::lowered_statements(LoweredStatements&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_REPORT==(*this).kind) {
            return false;
        }
        if (StatementOp::EXPRESSION==(*this).kind) {
            return false;
        }
        if (StatementOp::LOWERED_STATEMENTS==(*this).kind) {
            if(!std::holds_alternative<union_struct_83>(union_variant_51)) {
                union_variant_51 = union_struct_83();
            }
            std::get<32>((*this).union_variant_51).lowered_statements = std::move(v);
            return true;
        }
        return false;
    }
    const MatchBranch* StatementBody::match_branch() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        if(!std::holds_alternative<union_struct_65>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<14>((*this).union_variant_51).match_branch);
        }
        return nullptr;
    }
    MatchBranch* StatementBody::match_branch() {
        return const_cast<MatchBranch*>(std::as_const(*this).match_branch());
    }
    bool StatementBody::match_branch(const MatchBranch& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            if(!std::holds_alternative<union_struct_65>(union_variant_51)) {
                union_variant_51 = union_struct_65();
            }
            std::get<14>((*this).union_variant_51).match_branch = v;
            return true;
        }
        return false;
    }
    bool StatementBody::match_branch(MatchBranch&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            if(!std::holds_alternative<union_struct_65>(union_variant_51)) {
                union_variant_51 = union_struct_65();
            }
            std::get<14>((*this).union_variant_51).match_branch = std::move(v);
            return true;
        }
        return false;
    }
    const MatchStatement* StatementBody::match_statement() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        if(!std::holds_alternative<union_struct_64>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<13>((*this).union_variant_51).match_statement);
        }
        return nullptr;
    }
    MatchStatement* StatementBody::match_statement() {
        return const_cast<MatchStatement*>(std::as_const(*this).match_statement());
    }
    bool StatementBody::match_statement(const MatchStatement& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_64>(union_variant_51)) {
                union_variant_51 = union_struct_64();
            }
            std::get<13>((*this).union_variant_51).match_statement = v;
            return true;
        }
        return false;
    }
    bool StatementBody::match_statement(MatchStatement&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_64>(union_variant_51)) {
                union_variant_51 = union_struct_64();
            }
            std::get<13>((*this).union_variant_51).match_statement = std::move(v);
            return true;
        }
        return false;
    }
    const Metadata* StatementBody::metadata() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::METADATA==(*this).kind) {
        if(!std::holds_alternative<union_struct_78>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<27>((*this).union_variant_51).metadata);
        }
        return nullptr;
    }
    Metadata* StatementBody::metadata() {
        return const_cast<Metadata*>(std::as_const(*this).metadata());
    }
    bool StatementBody::metadata(const Metadata& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_78>(union_variant_51)) {
                union_variant_51 = union_struct_78();
            }
            std::get<27>((*this).union_variant_51).metadata = v;
            return true;
        }
        return false;
    }
    bool StatementBody::metadata(Metadata&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_78>(union_variant_51)) {
                union_variant_51 = union_struct_78();
            }
            std::get<27>((*this).union_variant_51).metadata = std::move(v);
            return true;
        }
        return false;
    }
    const IdentifierRef* StatementBody::module_name() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::METADATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
        if(!std::holds_alternative<union_struct_79>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<28>((*this).union_variant_51).module_name);
        }
        return nullptr;
    }
    IdentifierRef* StatementBody::module_name() {
        return const_cast<IdentifierRef*>(std::as_const(*this).module_name());
    }
    bool StatementBody::module_name(const IdentifierRef& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
            if(!std::holds_alternative<union_struct_79>(union_variant_51)) {
                union_variant_51 = union_struct_79();
            }
            std::get<28>((*this).union_variant_51).module_name = v;
            return true;
        }
        return false;
    }
    bool StatementBody::module_name(IdentifierRef&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
            if(!std::holds_alternative<union_struct_79>(union_variant_51)) {
                union_variant_51 = union_struct_79();
            }
            std::get<28>((*this).union_variant_51).module_name = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* StatementBody::offset() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        if(!std::holds_alternative<union_struct_61>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<10>((*this).union_variant_51).offset);
        }
        return nullptr;
    }
    ExpressionRef* StatementBody::offset() {
        return const_cast<ExpressionRef*>(std::as_const(*this).offset());
    }
    bool StatementBody::offset(const ExpressionRef& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            if(!std::holds_alternative<union_struct_61>(union_variant_51)) {
                union_variant_51 = union_struct_61();
            }
            std::get<10>((*this).union_variant_51).offset = v;
            return true;
        }
        return false;
    }
    bool StatementBody::offset(ExpressionRef&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            if(!std::holds_alternative<union_struct_61>(union_variant_51)) {
                union_variant_51 = union_struct_61();
            }
            std::get<10>((*this).union_variant_51).offset = std::move(v);
            return true;
        }
        return false;
    }
    const std::vector<PhiParam>* StatementBody::params() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::METADATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
        if(!std::holds_alternative<union_struct_80>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<29>((*this).union_variant_51).params);
        }
        return nullptr;
    }
    std::vector<PhiParam>* StatementBody::params() {
        return const_cast<std::vector<PhiParam>*>(std::as_const(*this).params());
    }
    bool StatementBody::params(const std::vector<PhiParam>& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
            if(!std::holds_alternative<union_struct_80>(union_variant_51)) {
                union_variant_51 = union_struct_80();
            }
            std::get<29>((*this).union_variant_51).params = v;
            return true;
        }
        return false;
    }
    bool StatementBody::params(std::vector<PhiParam>&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
            if(!std::holds_alternative<union_struct_80>(union_variant_51)) {
                union_variant_51 = union_struct_80();
            }
            std::get<29>((*this).union_variant_51).params = std::move(v);
            return true;
        }
        return false;
    }
    const Varint* StatementBody::params_len() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::METADATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
        if(!std::holds_alternative<union_struct_80>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<29>((*this).union_variant_51).params_len);
        }
        return nullptr;
    }
    Varint* StatementBody::params_len() {
        return const_cast<Varint*>(std::as_const(*this).params_len());
    }
    bool StatementBody::params_len(const Varint& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
            if(!std::holds_alternative<union_struct_80>(union_variant_51)) {
                union_variant_51 = union_struct_80();
            }
            std::get<29>((*this).union_variant_51).params_len = v;
            return true;
        }
        return false;
    }
    bool StatementBody::params_len(Varint&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
            if(!std::holds_alternative<union_struct_80>(union_variant_51)) {
                union_variant_51 = union_struct_80();
            }
            std::get<29>((*this).union_variant_51).params_len = std::move(v);
            return true;
        }
        return false;
    }
    const StatementRef* StatementBody::previous_assignment() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        if(!std::holds_alternative<union_struct_53>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<2>((*this).union_variant_51).previous_assignment);
        }
        if (StatementOp::YIELD==(*this).kind) {
        if(!std::holds_alternative<union_struct_54>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<3>((*this).union_variant_51).previous_assignment);
        }
        return nullptr;
    }
    StatementRef* StatementBody::previous_assignment() {
        return const_cast<StatementRef*>(std::as_const(*this).previous_assignment());
    }
    bool StatementBody::previous_assignment(const StatementRef& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_53>(union_variant_51)) {
                union_variant_51 = union_struct_53();
            }
            std::get<2>((*this).union_variant_51).previous_assignment = v;
            return true;
        }
        if (StatementOp::YIELD==(*this).kind) {
            if(!std::holds_alternative<union_struct_54>(union_variant_51)) {
                union_variant_51 = union_struct_54();
            }
            std::get<3>((*this).union_variant_51).previous_assignment = v;
            return true;
        }
        return false;
    }
    bool StatementBody::previous_assignment(StatementRef&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_53>(union_variant_51)) {
                union_variant_51 = union_struct_53();
            }
            std::get<2>((*this).union_variant_51).previous_assignment = std::move(v);
            return true;
        }
        if (StatementOp::YIELD==(*this).kind) {
            if(!std::holds_alternative<union_struct_54>(union_variant_51)) {
                union_variant_51 = union_struct_54();
            }
            std::get<3>((*this).union_variant_51).previous_assignment = std::move(v);
            return true;
        }
        return false;
    }
    const PropertyDecl* StatementBody::property_decl() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
        if(!std::holds_alternative<union_struct_77>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<26>((*this).union_variant_51).property_decl);
        }
        return nullptr;
    }
    PropertyDecl* StatementBody::property_decl() {
        return const_cast<PropertyDecl*>(std::as_const(*this).property_decl());
    }
    bool StatementBody::property_decl(const PropertyDecl& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_77>(union_variant_51)) {
                union_variant_51 = union_struct_77();
            }
            std::get<26>((*this).union_variant_51).property_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::property_decl(PropertyDecl&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_77>(union_variant_51)) {
                union_variant_51 = union_struct_77();
            }
            std::get<26>((*this).union_variant_51).property_decl = std::move(v);
            return true;
        }
        return false;
    }
    const IOData* StatementBody::read_data() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        if(!std::holds_alternative<union_struct_59>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<8>((*this).union_variant_51).read_data);
        }
        return nullptr;
    }
    IOData* StatementBody::read_data() {
        return const_cast<IOData*>(std::as_const(*this).read_data());
    }
    bool StatementBody::read_data(const IOData& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_59>(union_variant_51)) {
                union_variant_51 = union_struct_59();
            }
            std::get<8>((*this).union_variant_51).read_data = v;
            return true;
        }
        return false;
    }
    bool StatementBody::read_data(IOData&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_59>(union_variant_51)) {
                union_variant_51 = union_struct_59();
            }
            std::get<8>((*this).union_variant_51).read_data = std::move(v);
            return true;
        }
        return false;
    }
    const StreamType* StatementBody::stream_type() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        if(!std::holds_alternative<union_struct_61>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<10>((*this).union_variant_51).stream_type);
        }
        return nullptr;
    }
    StreamType* StatementBody::stream_type() {
        return const_cast<StreamType*>(std::as_const(*this).stream_type());
    }
    bool StatementBody::stream_type(const StreamType& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            if(!std::holds_alternative<union_struct_61>(union_variant_51)) {
                union_variant_51 = union_struct_61();
            }
            std::get<10>((*this).union_variant_51).stream_type = v;
            return true;
        }
        return false;
    }
    bool StatementBody::stream_type(StreamType&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            if(!std::holds_alternative<union_struct_61>(union_variant_51)) {
                union_variant_51 = union_struct_61();
            }
            std::get<10>((*this).union_variant_51).stream_type = std::move(v);
            return true;
        }
        return false;
    }
    const StructDecl* StatementBody::struct_decl() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
        if(!std::holds_alternative<union_struct_73>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<22>((*this).union_variant_51).struct_decl);
        }
        return nullptr;
    }
    StructDecl* StatementBody::struct_decl() {
        return const_cast<StructDecl*>(std::as_const(*this).struct_decl());
    }
    bool StatementBody::struct_decl(const StructDecl& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_73>(union_variant_51)) {
                union_variant_51 = union_struct_73();
            }
            std::get<22>((*this).union_variant_51).struct_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::struct_decl(StructDecl&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_73>(union_variant_51)) {
                union_variant_51 = union_struct_73();
            }
            std::get<22>((*this).union_variant_51).struct_decl = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* StatementBody::target() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        if(!std::holds_alternative<union_struct_53>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<2>((*this).union_variant_51).target);
        }
        if (StatementOp::YIELD==(*this).kind) {
        if(!std::holds_alternative<union_struct_54>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<3>((*this).union_variant_51).target);
        }
        if (StatementOp::APPEND==(*this).kind) {
        if(!std::holds_alternative<union_struct_55>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<4>((*this).union_variant_51).target);
        }
        return nullptr;
    }
    ExpressionRef* StatementBody::target() {
        return const_cast<ExpressionRef*>(std::as_const(*this).target());
    }
    bool StatementBody::target(const ExpressionRef& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_53>(union_variant_51)) {
                union_variant_51 = union_struct_53();
            }
            std::get<2>((*this).union_variant_51).target = v;
            return true;
        }
        if (StatementOp::YIELD==(*this).kind) {
            if(!std::holds_alternative<union_struct_54>(union_variant_51)) {
                union_variant_51 = union_struct_54();
            }
            std::get<3>((*this).union_variant_51).target = v;
            return true;
        }
        if (StatementOp::APPEND==(*this).kind) {
            if(!std::holds_alternative<union_struct_55>(union_variant_51)) {
                union_variant_51 = union_struct_55();
            }
            std::get<4>((*this).union_variant_51).target = v;
            return true;
        }
        return false;
    }
    bool StatementBody::target(ExpressionRef&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_53>(union_variant_51)) {
                union_variant_51 = union_struct_53();
            }
            std::get<2>((*this).union_variant_51).target = std::move(v);
            return true;
        }
        if (StatementOp::YIELD==(*this).kind) {
            if(!std::holds_alternative<union_struct_54>(union_variant_51)) {
                union_variant_51 = union_struct_54();
            }
            std::get<3>((*this).union_variant_51).target = std::move(v);
            return true;
        }
        if (StatementOp::APPEND==(*this).kind) {
            if(!std::holds_alternative<union_struct_55>(union_variant_51)) {
                union_variant_51 = union_struct_55();
            }
            std::get<4>((*this).union_variant_51).target = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* StatementBody::target_var() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::METADATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
        if(!std::holds_alternative<union_struct_80>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<29>((*this).union_variant_51).target_var);
        }
        return nullptr;
    }
    ExpressionRef* StatementBody::target_var() {
        return const_cast<ExpressionRef*>(std::as_const(*this).target_var());
    }
    bool StatementBody::target_var(const ExpressionRef& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
            if(!std::holds_alternative<union_struct_80>(union_variant_51)) {
                union_variant_51 = union_struct_80();
            }
            std::get<29>((*this).union_variant_51).target_var = v;
            return true;
        }
        return false;
    }
    bool StatementBody::target_var(ExpressionRef&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROGRAM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::PROPERTY_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::METADATA==(*this).kind) {
            return false;
        }
        if (StatementOp::IMPORT_MODULE==(*this).kind) {
            return false;
        }
        if (StatementOp::PHI_NODE==(*this).kind) {
            if(!std::holds_alternative<union_struct_80>(union_variant_51)) {
                union_variant_51 = union_struct_80();
            }
            std::get<29>((*this).union_variant_51).target_var = std::move(v);
            return true;
        }
        return false;
    }
    const UnionDecl* StatementBody::union_decl() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
        if(!std::holds_alternative<union_struct_74>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<23>((*this).union_variant_51).union_decl);
        }
        return nullptr;
    }
    UnionDecl* StatementBody::union_decl() {
        return const_cast<UnionDecl*>(std::as_const(*this).union_decl());
    }
    bool StatementBody::union_decl(const UnionDecl& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_74>(union_variant_51)) {
                union_variant_51 = union_struct_74();
            }
            std::get<23>((*this).union_variant_51).union_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::union_decl(UnionDecl&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_74>(union_variant_51)) {
                union_variant_51 = union_struct_74();
            }
            std::get<23>((*this).union_variant_51).union_decl = std::move(v);
            return true;
        }
        return false;
    }
    const UnionMemberDecl* StatementBody::union_member_decl() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
        if(!std::holds_alternative<union_struct_75>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<24>((*this).union_variant_51).union_member_decl);
        }
        return nullptr;
    }
    UnionMemberDecl* StatementBody::union_member_decl() {
        return const_cast<UnionMemberDecl*>(std::as_const(*this).union_member_decl());
    }
    bool StatementBody::union_member_decl(const UnionMemberDecl& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_75>(union_variant_51)) {
                union_variant_51 = union_struct_75();
            }
            std::get<24>((*this).union_variant_51).union_member_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::union_member_decl(UnionMemberDecl&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::FIELD_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::STRUCT_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_75>(union_variant_51)) {
                union_variant_51 = union_struct_75();
            }
            std::get<24>((*this).union_variant_51).union_member_decl = std::move(v);
            return true;
        }
        return false;
    }
    const ExpressionRef* StatementBody::value() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        if(!std::holds_alternative<union_struct_53>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<2>((*this).union_variant_51).value);
        }
        if (StatementOp::YIELD==(*this).kind) {
        if(!std::holds_alternative<union_struct_54>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<3>((*this).union_variant_51).value);
        }
        if (StatementOp::APPEND==(*this).kind) {
        if(!std::holds_alternative<union_struct_55>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<4>((*this).union_variant_51).value);
        }
        if (StatementOp::RETURN==(*this).kind) {
        if(!std::holds_alternative<union_struct_56>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<5>((*this).union_variant_51).value);
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        if(!std::holds_alternative<union_struct_57>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<6>((*this).union_variant_51).value);
        }
        return nullptr;
    }
    ExpressionRef* StatementBody::value() {
        return const_cast<ExpressionRef*>(std::as_const(*this).value());
    }
    bool StatementBody::value(const ExpressionRef& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_53>(union_variant_51)) {
                union_variant_51 = union_struct_53();
            }
            std::get<2>((*this).union_variant_51).value = v;
            return true;
        }
        if (StatementOp::YIELD==(*this).kind) {
            if(!std::holds_alternative<union_struct_54>(union_variant_51)) {
                union_variant_51 = union_struct_54();
            }
            std::get<3>((*this).union_variant_51).value = v;
            return true;
        }
        if (StatementOp::APPEND==(*this).kind) {
            if(!std::holds_alternative<union_struct_55>(union_variant_51)) {
                union_variant_51 = union_struct_55();
            }
            std::get<4>((*this).union_variant_51).value = v;
            return true;
        }
        if (StatementOp::RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_56>(union_variant_51)) {
                union_variant_51 = union_struct_56();
            }
            std::get<5>((*this).union_variant_51).value = v;
            return true;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_57>(union_variant_51)) {
                union_variant_51 = union_struct_57();
            }
            std::get<6>((*this).union_variant_51).value = v;
            return true;
        }
        return false;
    }
    bool StatementBody::value(ExpressionRef&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_53>(union_variant_51)) {
                union_variant_51 = union_struct_53();
            }
            std::get<2>((*this).union_variant_51).value = std::move(v);
            return true;
        }
        if (StatementOp::YIELD==(*this).kind) {
            if(!std::holds_alternative<union_struct_54>(union_variant_51)) {
                union_variant_51 = union_struct_54();
            }
            std::get<3>((*this).union_variant_51).value = std::move(v);
            return true;
        }
        if (StatementOp::APPEND==(*this).kind) {
            if(!std::holds_alternative<union_struct_55>(union_variant_51)) {
                union_variant_51 = union_struct_55();
            }
            std::get<4>((*this).union_variant_51).value = std::move(v);
            return true;
        }
        if (StatementOp::RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_56>(union_variant_51)) {
                union_variant_51 = union_struct_56();
            }
            std::get<5>((*this).union_variant_51).value = std::move(v);
            return true;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_57>(union_variant_51)) {
                union_variant_51 = union_struct_57();
            }
            std::get<6>((*this).union_variant_51).value = std::move(v);
            return true;
        }
        return false;
    }
    const VariableDecl* StatementBody::var_decl() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::BREAK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
        if(!std::holds_alternative<union_struct_69>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<18>((*this).union_variant_51).var_decl);
        }
        return nullptr;
    }
    VariableDecl* StatementBody::var_decl() {
        return const_cast<VariableDecl*>(std::as_const(*this).var_decl());
    }
    bool StatementBody::var_decl(const VariableDecl& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_69>(union_variant_51)) {
                union_variant_51 = union_struct_69();
            }
            std::get<18>((*this).union_variant_51).var_decl = v;
            return true;
        }
        return false;
    }
    bool StatementBody::var_decl(VariableDecl&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::SEEK_STREAM==(*this).kind) {
            return false;
        }
        if (StatementOp::IF_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::MATCH_BRANCH==(*this).kind) {
            return false;
        }
        if (StatementOp::BREAK==(*this).kind) {
            return false;
        }
        if (StatementOp::CONTINUE==(*this).kind) {
            return false;
        }
        if (StatementOp::FUNCTION_DECL==(*this).kind) {
            return false;
        }
        if (StatementOp::VARIABLE_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_69>(union_variant_51)) {
                union_variant_51 = union_struct_69();
            }
            std::get<18>((*this).union_variant_51).var_decl = std::move(v);
            return true;
        }
        return false;
    }
    const IOData* StatementBody::write_data() const {
        if (StatementOp::BLOCK==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::YIELD==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::APPEND==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::ASSERT==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
        return nullptr;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
        if(!std::holds_alternative<union_struct_60>(union_variant_51)) {
            return nullptr;
        }
        return std::addressof(std::get<9>((*this).union_variant_51).write_data);
        }
        return nullptr;
    }
    IOData* StatementBody::write_data() {
        return const_cast<IOData*>(std::as_const(*this).write_data());
    }
    bool StatementBody::write_data(const IOData& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_60>(union_variant_51)) {
                union_variant_51 = union_struct_60();
            }
            std::get<9>((*this).union_variant_51).write_data = v;
            return true;
        }
        return false;
    }
    bool StatementBody::write_data(IOData&& v) {
        if (StatementOp::BLOCK==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSIGNMENT==(*this).kind) {
            return false;
        }
        if (StatementOp::YIELD==(*this).kind) {
            return false;
        }
        if (StatementOp::APPEND==(*this).kind) {
            return false;
        }
        if (StatementOp::RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ERROR_RETURN==(*this).kind) {
            return false;
        }
        if (StatementOp::ASSERT==(*this).kind) {
            return false;
        }
        if (StatementOp::READ_DATA==(*this).kind) {
            return false;
        }
        if (StatementOp::WRITE_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_60>(union_variant_51)) {
                union_variant_51 = union_struct_60();
            }
            std::get<9>((*this).union_variant_51).write_data = std::move(v);
            return true;
        }
        return false;
    }
    const TypeRef* TypeBody::base_type() const {
        if (TypeKind::INT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::UINT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ENUM==(*this).kind) {
        if(!std::holds_alternative<union_struct_94>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<9>((*this).union_variant_85).base_type);
        }
        if (TypeKind::VARIANT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::PTR==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::RANGE==(*this).kind) {
        if(!std::holds_alternative<union_struct_99>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<14>((*this).union_variant_85).base_type);
        }
        return nullptr;
    }
    TypeRef* TypeBody::base_type() {
        return const_cast<TypeRef*>(std::as_const(*this).base_type());
    }
    bool TypeBody::base_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_94>(union_variant_85)) {
                union_variant_85 = union_struct_94();
            }
            std::get<9>((*this).union_variant_85).base_type = v;
            return true;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            return false;
        }
        if (TypeKind::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_99>(union_variant_85)) {
                union_variant_85 = union_struct_99();
            }
            std::get<14>((*this).union_variant_85).base_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::base_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_94>(union_variant_85)) {
                union_variant_85 = union_struct_94();
            }
            std::get<9>((*this).union_variant_85).base_type = std::move(v);
            return true;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            return false;
        }
        if (TypeKind::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_99>(union_variant_85)) {
                union_variant_85 = union_struct_99();
            }
            std::get<14>((*this).union_variant_85).base_type = std::move(v);
            return true;
        }
        return false;
    }
    const TypeRef* TypeBody::common_type() const {
        if (TypeKind::INT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::UINT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        if(!std::holds_alternative<union_struct_95>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<10>((*this).union_variant_85).common_type);
        }
        return nullptr;
    }
    TypeRef* TypeBody::common_type() {
        return const_cast<TypeRef*>(std::as_const(*this).common_type());
    }
    bool TypeBody::common_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_95>(union_variant_85)) {
                union_variant_85 = union_struct_95();
            }
            std::get<10>((*this).union_variant_85).common_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::common_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_95>(union_variant_85)) {
                union_variant_85 = union_struct_95();
            }
            std::get<10>((*this).union_variant_85).common_type = std::move(v);
            return true;
        }
        return false;
    }
    const TypeRef* TypeBody::element_type() const {
        if (TypeKind::INT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::UINT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        if(!std::holds_alternative<union_struct_90>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<5>((*this).union_variant_85).element_type);
        }
        if (TypeKind::VECTOR==(*this).kind) {
        if(!std::holds_alternative<union_struct_91>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<6>((*this).union_variant_85).element_type);
        }
        return nullptr;
    }
    TypeRef* TypeBody::element_type() {
        return const_cast<TypeRef*>(std::as_const(*this).element_type());
    }
    bool TypeBody::element_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_90>(union_variant_85)) {
                union_variant_85 = union_struct_90();
            }
            std::get<5>((*this).union_variant_85).element_type = v;
            return true;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            if(!std::holds_alternative<union_struct_91>(union_variant_85)) {
                union_variant_85 = union_struct_91();
            }
            std::get<6>((*this).union_variant_85).element_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::element_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_90>(union_variant_85)) {
                union_variant_85 = union_struct_90();
            }
            std::get<5>((*this).union_variant_85).element_type = std::move(v);
            return true;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            if(!std::holds_alternative<union_struct_91>(union_variant_85)) {
                union_variant_85 = union_struct_91();
            }
            std::get<6>((*this).union_variant_85).element_type = std::move(v);
            return true;
        }
        return false;
    }
    const StatementRef* TypeBody::id() const {
        if (TypeKind::INT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::UINT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        if(!std::holds_alternative<union_struct_92>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<7>((*this).union_variant_85).id);
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        if(!std::holds_alternative<union_struct_93>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<8>((*this).union_variant_85).id);
        }
        if (TypeKind::ENUM==(*this).kind) {
        if(!std::holds_alternative<union_struct_94>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<9>((*this).union_variant_85).id);
        }
        return nullptr;
    }
    StatementRef* TypeBody::id() {
        return const_cast<StatementRef*>(std::as_const(*this).id());
    }
    bool TypeBody::id(const StatementRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_92>(union_variant_85)) {
                union_variant_85 = union_struct_92();
            }
            std::get<7>((*this).union_variant_85).id = v;
            return true;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_93>(union_variant_85)) {
                union_variant_85 = union_struct_93();
            }
            std::get<8>((*this).union_variant_85).id = v;
            return true;
        }
        if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_94>(union_variant_85)) {
                union_variant_85 = union_struct_94();
            }
            std::get<9>((*this).union_variant_85).id = v;
            return true;
        }
        return false;
    }
    bool TypeBody::id(StatementRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_92>(union_variant_85)) {
                union_variant_85 = union_struct_92();
            }
            std::get<7>((*this).union_variant_85).id = std::move(v);
            return true;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_93>(union_variant_85)) {
                union_variant_85 = union_struct_93();
            }
            std::get<8>((*this).union_variant_85).id = std::move(v);
            return true;
        }
        if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_94>(union_variant_85)) {
                union_variant_85 = union_struct_94();
            }
            std::get<9>((*this).union_variant_85).id = std::move(v);
            return true;
        }
        return false;
    }
    const TypeRef* TypeBody::inner_type() const {
        if (TypeKind::INT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::UINT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
        if(!std::holds_alternative<union_struct_97>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<12>((*this).union_variant_85).inner_type);
        }
        return nullptr;
    }
    TypeRef* TypeBody::inner_type() {
        return const_cast<TypeRef*>(std::as_const(*this).inner_type());
    }
    bool TypeBody::inner_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_97>(union_variant_85)) {
                union_variant_85 = union_struct_97();
            }
            std::get<12>((*this).union_variant_85).inner_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::inner_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_97>(union_variant_85)) {
                union_variant_85 = union_struct_97();
            }
            std::get<12>((*this).union_variant_85).inner_type = std::move(v);
            return true;
        }
        return false;
    }
    const Varint* TypeBody::length() const {
        if (TypeKind::INT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::UINT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        if(!std::holds_alternative<union_struct_90>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<5>((*this).union_variant_85).length);
        }
        return nullptr;
    }
    Varint* TypeBody::length() {
        return const_cast<Varint*>(std::as_const(*this).length());
    }
    bool TypeBody::length(const Varint& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_90>(union_variant_85)) {
                union_variant_85 = union_struct_90();
            }
            std::get<5>((*this).union_variant_85).length = v;
            return true;
        }
        return false;
    }
    bool TypeBody::length(Varint&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_90>(union_variant_85)) {
                union_variant_85 = union_struct_90();
            }
            std::get<5>((*this).union_variant_85).length = std::move(v);
            return true;
        }
        return false;
    }
    const Types* TypeBody::members() const {
        if (TypeKind::INT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::UINT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        if(!std::holds_alternative<union_struct_95>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<10>((*this).union_variant_85).members);
        }
        return nullptr;
    }
    Types* TypeBody::members() {
        return const_cast<Types*>(std::as_const(*this).members());
    }
    bool TypeBody::members(const Types& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_95>(union_variant_85)) {
                union_variant_85 = union_struct_95();
            }
            std::get<10>((*this).union_variant_85).members = v;
            return true;
        }
        return false;
    }
    bool TypeBody::members(Types&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_95>(union_variant_85)) {
                union_variant_85 = union_struct_95();
            }
            std::get<10>((*this).union_variant_85).members = std::move(v);
            return true;
        }
        return false;
    }
    const Types* TypeBody::params() const {
        if (TypeKind::INT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::UINT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::PTR==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::RANGE==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::FUNCTION==(*this).kind) {
        if(!std::holds_alternative<union_struct_100>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<15>((*this).union_variant_85).params);
        }
        return nullptr;
    }
    Types* TypeBody::params() {
        return const_cast<Types*>(std::as_const(*this).params());
    }
    bool TypeBody::params(const Types& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            return false;
        }
        if (TypeKind::RANGE==(*this).kind) {
            return false;
        }
        if (TypeKind::FUNCTION==(*this).kind) {
            if(!std::holds_alternative<union_struct_100>(union_variant_85)) {
                union_variant_85 = union_struct_100();
            }
            std::get<15>((*this).union_variant_85).params = v;
            return true;
        }
        return false;
    }
    bool TypeBody::params(Types&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            return false;
        }
        if (TypeKind::RANGE==(*this).kind) {
            return false;
        }
        if (TypeKind::FUNCTION==(*this).kind) {
            if(!std::holds_alternative<union_struct_100>(union_variant_85)) {
                union_variant_85 = union_struct_100();
            }
            std::get<15>((*this).union_variant_85).params = std::move(v);
            return true;
        }
        return false;
    }
    const TypeRef* TypeBody::pointee_type() const {
        if (TypeKind::INT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::UINT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::PTR==(*this).kind) {
        if(!std::holds_alternative<union_struct_98>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<13>((*this).union_variant_85).pointee_type);
        }
        return nullptr;
    }
    TypeRef* TypeBody::pointee_type() {
        return const_cast<TypeRef*>(std::as_const(*this).pointee_type());
    }
    bool TypeBody::pointee_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            if(!std::holds_alternative<union_struct_98>(union_variant_85)) {
                union_variant_85 = union_struct_98();
            }
            std::get<13>((*this).union_variant_85).pointee_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::pointee_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            if(!std::holds_alternative<union_struct_98>(union_variant_85)) {
                union_variant_85 = union_struct_98();
            }
            std::get<13>((*this).union_variant_85).pointee_type = std::move(v);
            return true;
        }
        return false;
    }
    const TypeRef* TypeBody::property_type() const {
        if (TypeKind::INT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::UINT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
        if(!std::holds_alternative<union_struct_96>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<11>((*this).union_variant_85).property_type);
        }
        return nullptr;
    }
    TypeRef* TypeBody::property_type() {
        return const_cast<TypeRef*>(std::as_const(*this).property_type());
    }
    bool TypeBody::property_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_96>(union_variant_85)) {
                union_variant_85 = union_struct_96();
            }
            std::get<11>((*this).union_variant_85).property_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::property_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_96>(union_variant_85)) {
                union_variant_85 = union_struct_96();
            }
            std::get<11>((*this).union_variant_85).property_type = std::move(v);
            return true;
        }
        return false;
    }
    const TypeRef* TypeBody::return_type() const {
        if (TypeKind::INT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::UINT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::FLOAT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::BOOL==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ARRAY==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::VECTOR==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::STRUCT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::ENUM==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::VARIANT==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::PTR==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::RANGE==(*this).kind) {
        return nullptr;
        }
        if (TypeKind::FUNCTION==(*this).kind) {
        if(!std::holds_alternative<union_struct_100>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<15>((*this).union_variant_85).return_type);
        }
        return nullptr;
    }
    TypeRef* TypeBody::return_type() {
        return const_cast<TypeRef*>(std::as_const(*this).return_type());
    }
    bool TypeBody::return_type(const TypeRef& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            return false;
        }
        if (TypeKind::RANGE==(*this).kind) {
            return false;
        }
        if (TypeKind::FUNCTION==(*this).kind) {
            if(!std::holds_alternative<union_struct_100>(union_variant_85)) {
                union_variant_85 = union_struct_100();
            }
            std::get<15>((*this).union_variant_85).return_type = v;
            return true;
        }
        return false;
    }
    bool TypeBody::return_type(TypeRef&& v) {
        if (TypeKind::INT==(*this).kind) {
            return false;
        }
        if (TypeKind::UINT==(*this).kind) {
            return false;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            return false;
        }
        if (TypeKind::BOOL==(*this).kind) {
            return false;
        }
        if (TypeKind::ARRAY==(*this).kind) {
            return false;
        }
        if (TypeKind::VECTOR==(*this).kind) {
            return false;
        }
        if (TypeKind::STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            return false;
        }
        if (TypeKind::ENUM==(*this).kind) {
            return false;
        }
        if (TypeKind::VARIANT==(*this).kind) {
            return false;
        }
        if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            return false;
        }
        if (TypeKind::OPTIONAL==(*this).kind) {
            return false;
        }
        if (TypeKind::PTR==(*this).kind) {
            return false;
        }
        if (TypeKind::RANGE==(*this).kind) {
            return false;
        }
        if (TypeKind::FUNCTION==(*this).kind) {
            if(!std::holds_alternative<union_struct_100>(union_variant_85)) {
                union_variant_85 = union_struct_100();
            }
            std::get<15>((*this).union_variant_85).return_type = std::move(v);
            return true;
        }
        return false;
    }
    const std::uint8_t* TypeBody::size() const {
        if (TypeKind::INT==(*this).kind) {
        if(!std::holds_alternative<union_struct_86>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<1>((*this).union_variant_85).size);
        }
        if (TypeKind::UINT==(*this).kind) {
        if(!std::holds_alternative<union_struct_87>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<2>((*this).union_variant_85).size);
        }
        if (TypeKind::FLOAT==(*this).kind) {
        if(!std::holds_alternative<union_struct_88>(union_variant_85)) {
            return nullptr;
        }
        return std::addressof(std::get<3>((*this).union_variant_85).size);
        }
        return nullptr;
    }
    std::uint8_t* TypeBody::size() {
        return const_cast<std::uint8_t*>(std::as_const(*this).size());
    }
    bool TypeBody::size(const std::uint8_t& v) {
        if (TypeKind::INT==(*this).kind) {
            if(!std::holds_alternative<union_struct_86>(union_variant_85)) {
                union_variant_85 = union_struct_86();
            }
            std::get<1>((*this).union_variant_85).size = v;
            return true;
        }
        if (TypeKind::UINT==(*this).kind) {
            if(!std::holds_alternative<union_struct_87>(union_variant_85)) {
                union_variant_85 = union_struct_87();
            }
            std::get<2>((*this).union_variant_85).size = v;
            return true;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            if(!std::holds_alternative<union_struct_88>(union_variant_85)) {
                union_variant_85 = union_struct_88();
            }
            std::get<3>((*this).union_variant_85).size = v;
            return true;
        }
        return false;
    }
    bool TypeBody::size(std::uint8_t&& v) {
        if (TypeKind::INT==(*this).kind) {
            if(!std::holds_alternative<union_struct_86>(union_variant_85)) {
                union_variant_85 = union_struct_86();
            }
            std::get<1>((*this).union_variant_85).size = std::move(v);
            return true;
        }
        if (TypeKind::UINT==(*this).kind) {
            if(!std::holds_alternative<union_struct_87>(union_variant_85)) {
                union_variant_85 = union_struct_87();
            }
            std::get<2>((*this).union_variant_85).size = std::move(v);
            return true;
        }
        if (TypeKind::FLOAT==(*this).kind) {
            if(!std::holds_alternative<union_struct_88>(union_variant_85)) {
                union_variant_85 = union_struct_88();
            }
            std::get<3>((*this).union_variant_85).size = std::move(v);
            return true;
        }
        return false;
    }
    ::futils::error::Error<> Varint::encode(::futils::binary::writer& w) const {
        if((*this).prefix()==0) {
            std::uint8_t tmp101 = 0;
            tmp101 = (*this).value();
            tmp101 |= std::uint8_t(0)<<6;
            if (!::futils::binary::write_num(w,tmp101,true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed",::futils::error::Category::lib);
            }
        }
        else 
        if((*this).prefix()==1) {
            std::uint16_t tmp101 = 0;
            tmp101 = (*this).value();
            tmp101 |= std::uint16_t(1)<<14;
            if (!::futils::binary::write_num(w,tmp101,true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed",::futils::error::Category::lib);
            }
        }
        else 
        if((*this).prefix()==2) {
            std::uint32_t tmp101 = 0;
            tmp101 = (*this).value();
            tmp101 |= std::uint32_t(2)<<30;
            if (!::futils::binary::write_num(w,tmp101,true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed",::futils::error::Category::lib);
            }
        }
        else 
        if((*this).prefix()==3) {
            std::uint64_t tmp101 = 0;
            tmp101 = (*this).value();
            tmp101 |= std::uint64_t(3)<<62;
            if (!::futils::binary::write_num(w,tmp101,true)) {
                return ::futils::error::Error<>("encode: Varint::value: write bit field failed",::futils::error::Category::lib);
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Varint::decode(::futils::binary::reader& r) {
        if(!r.load_stream(1)) {
            return ::futils::error::Error<>("decode: Varint::value: read bit field failed",::futils::error::Category::lib);
        }
        std::uint8_t tmp102 = (r.top() >> 6 ) & 0x3;
        (*this).prefix(tmp102);
        if((*this).prefix()==0) {
            std::uint8_t tmp103 = 0;
            if(!::futils::binary::read_num(r,tmp103,true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed",::futils::error::Category::lib);
            }
            tmp103 &= ~(std::uint8_t(0x3)<<6);
            (*this).value(tmp103);
        }
        else 
        if((*this).prefix()==1) {
            std::uint16_t tmp104 = 0;
            if(!::futils::binary::read_num(r,tmp104,true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed",::futils::error::Category::lib);
            }
            tmp104 &= ~(std::uint16_t(0x3)<<14);
            (*this).value(tmp104);
        }
        else 
        if((*this).prefix()==2) {
            std::uint32_t tmp105 = 0;
            if(!::futils::binary::read_num(r,tmp105,true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed",::futils::error::Category::lib);
            }
            tmp105 &= ~(std::uint32_t(0x3)<<30);
            (*this).value(tmp105);
        }
        else 
        if((*this).prefix()==3) {
            std::uint64_t tmp106 = 0;
            if(!::futils::binary::read_num(r,tmp106,true)) {
                return ::futils::error::Error<>("decode: Varint::value: read bit field failed",::futils::error::Category::lib);
            }
            tmp106 &= ~(std::uint64_t(0x3)<<62);
            (*this).value(tmp106);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StatementRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StatementRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IOAttribute::encode(::futils::binary::writer& w) const {
        if (!::futils::binary::write_num(w,flags_2_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: IOAttribute::reserved: write bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).dynamic_ref.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IOAttribute::decode(::futils::binary::reader& r) {
        if (!::futils::binary::read_num(r,flags_2_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: IOAttribute::reserved: read bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).dynamic_ref.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> String::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).length.encode(w)) {
            return err;
        }
        auto tmp_107_ = (*this).length.value();
        if (tmp_107_!=(*this).data.size()) {
            return ::futils::error::Error<>("encode: String::data: dynamic length is not compatible with its length; tmp_107_!=(*this).data.size()",::futils::error::Category::lib);
        }
        if (!w.write((*this).data)) {
            return ::futils::error::Error<>("encode: String::data: write array failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> String::decode(::futils::binary::reader& r) {
        if (auto err = (*this).length.decode(r)) {
            return err;
        }
        auto tmp_108_ = (*this).length.value();
        if (!r.read((*this).data, tmp_108_)) {
            return ::futils::error::Error<>("decode: String::data: read byte array failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IdentifierRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IdentifierRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> TypeRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> TypeRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExpressionRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExpressionRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StringRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StringRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredStatementRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredStatementRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredExpressionRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredExpressionRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredStatement::encode(::futils::binary::writer& w) const {
        auto tmp_109_ = static_cast<std::uint8_t>((*this).lowering_type);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_109_) ,true)) {
            return ::futils::error::Error<>("encode: LoweredStatement::lowering_type: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).statement.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredStatement::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_110_ = 0;
        if (!::futils::binary::read_num(r,tmp_110_ ,true)) {
            return ::futils::error::Error<>("decode: LoweredStatement::lowering_type: read int failed",::futils::error::Category::lib);
        }
        (*this).lowering_type = static_cast<LoweringType>(tmp_110_);
        if (auto err = (*this).statement.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredExpression::encode(::futils::binary::writer& w) const {
        auto tmp_111_ = static_cast<std::uint8_t>((*this).lowering_type);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_111_) ,true)) {
            return ::futils::error::Error<>("encode: LoweredExpression::lowering_type: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).expression.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredExpression::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_112_ = 0;
        if (!::futils::binary::read_num(r,tmp_112_ ,true)) {
            return ::futils::error::Error<>("decode: LoweredExpression::lowering_type: read int failed",::futils::error::Category::lib);
        }
        (*this).lowering_type = static_cast<LoweringType>(tmp_112_);
        if (auto err = (*this).expression.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoopFlowControl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).related_statement.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoopFlowControl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).related_statement.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> AnyRef::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> AnyRef::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> RefAlias::encode(::futils::binary::writer& w) const {
        auto tmp_113_ = static_cast<std::uint8_t>((*this).hint);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_113_) ,true)) {
            return ::futils::error::Error<>("encode: RefAlias::hint: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).from.encode(w)) {
            return err;
        }
        if (auto err = (*this).to.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> RefAlias::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_114_ = 0;
        if (!::futils::binary::read_num(r,tmp_114_ ,true)) {
            return ::futils::error::Error<>("decode: RefAlias::hint: read int failed",::futils::error::Category::lib);
        }
        (*this).hint = static_cast<AliasHint>(tmp_114_);
        if (auto err = (*this).from.decode(r)) {
            return err;
        }
        if (auto err = (*this).to.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Expressions::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len.encode(w)) {
            return err;
        }
        auto tmp_115_ = (*this).len.value();
        if (tmp_115_!=(*this).container.size()) {
            return ::futils::error::Error<>("encode: Expressions::container: dynamic length is not compatible with its length; tmp_115_!=(*this).container.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_116_ : (*this).container) {
            if (auto err = tmp_116_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Expressions::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len.decode(r)) {
            return err;
        }
        auto tmp_117_ = (*this).len.value();
        (*this).container.clear();
        for (size_t  tmp_119_= 0; tmp_119_<tmp_117_; ++tmp_119_ ) {
            ExpressionRef tmp_118_;
            if (auto err = tmp_118_.decode(r)) {
                return err;
            }
            (*this).container.push_back(std::move(tmp_118_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> CallDesc::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).callee.encode(w)) {
            return err;
        }
        if (auto err = (*this).arguments.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> CallDesc::decode(::futils::binary::reader& r) {
        if (auto err = (*this).callee.decode(r)) {
            return err;
        }
        if (auto err = (*this).arguments.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Size::encode(::futils::binary::writer& w) const {
        auto tmp_120_ = static_cast<std::uint8_t>((*this).unit);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_120_) ,true)) {
            return ::futils::error::Error<>("encode: Size::unit: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (SizeUnit::UNKNOWN==(*this).unit) {
        }
        else if (SizeUnit::BIT_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_6>(union_variant_4)) {
                return ::futils::error::Error<>("encode: Size: union_variant_4 variant alternative union_struct_6 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<2>((*this).union_variant_4).size.encode(w)) {
                return err;
            }
        }
        else if (SizeUnit::BYTE_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_7>(union_variant_4)) {
                return ::futils::error::Error<>("encode: Size: union_variant_4 variant alternative union_struct_7 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<3>((*this).union_variant_4).size.encode(w)) {
                return err;
            }
        }
        else if (SizeUnit::ELEMENT_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_8>(union_variant_4)) {
                return ::futils::error::Error<>("encode: Size: union_variant_4 variant alternative union_struct_8 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<4>((*this).union_variant_4).size.encode(w)) {
                return err;
            }
        }
        else if (SizeUnit::BIT_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_9>(union_variant_4)) {
                return ::futils::error::Error<>("encode: Size: union_variant_4 variant alternative union_struct_9 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<5>((*this).union_variant_4).ref.encode(w)) {
                return err;
            }
        }
        else if (SizeUnit::BYTE_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_10>(union_variant_4)) {
                return ::futils::error::Error<>("encode: Size: union_variant_4 variant alternative union_struct_10 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<6>((*this).union_variant_4).ref.encode(w)) {
                return err;
            }
        }
        else if (SizeUnit::ELEMENT_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_11>(union_variant_4)) {
                return ::futils::error::Error<>("encode: Size: union_variant_4 variant alternative union_struct_11 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<7>((*this).union_variant_4).ref.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Size::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_121_ = 0;
        if (!::futils::binary::read_num(r,tmp_121_ ,true)) {
            return ::futils::error::Error<>("decode: Size::unit: read int failed",::futils::error::Category::lib);
        }
        (*this).unit = static_cast<SizeUnit>(tmp_121_);
        if (SizeUnit::UNKNOWN==(*this).unit) {
            if(!std::holds_alternative<union_struct_5>(union_variant_4)) {
                union_variant_4 = union_struct_5();
            }
        }
        else if (SizeUnit::BIT_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_6>(union_variant_4)) {
                union_variant_4 = union_struct_6();
            }
            if (auto err = std::get<2>((*this).union_variant_4).size.decode(r)) {
                return err;
            }
        }
        else if (SizeUnit::BYTE_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_7>(union_variant_4)) {
                union_variant_4 = union_struct_7();
            }
            if (auto err = std::get<3>((*this).union_variant_4).size.decode(r)) {
                return err;
            }
        }
        else if (SizeUnit::ELEMENT_FIXED==(*this).unit) {
            if(!std::holds_alternative<union_struct_8>(union_variant_4)) {
                union_variant_4 = union_struct_8();
            }
            if (auto err = std::get<4>((*this).union_variant_4).size.decode(r)) {
                return err;
            }
        }
        else if (SizeUnit::BIT_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_9>(union_variant_4)) {
                union_variant_4 = union_struct_9();
            }
            if (auto err = std::get<5>((*this).union_variant_4).ref.decode(r)) {
                return err;
            }
        }
        else if (SizeUnit::BYTE_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_10>(union_variant_4)) {
                union_variant_4 = union_struct_10();
            }
            if (auto err = std::get<6>((*this).union_variant_4).ref.decode(r)) {
                return err;
            }
        }
        else if (SizeUnit::ELEMENT_DYNAMIC==(*this).unit) {
            if(!std::holds_alternative<union_struct_11>(union_variant_4)) {
                union_variant_4 = union_struct_11();
            }
            if (auto err = std::get<7>((*this).union_variant_4).ref.decode(r)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExpressionBody::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).type.encode(w)) {
            return err;
        }
        auto tmp_122_ = static_cast<std::uint8_t>((*this).kind);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_122_) ,true)) {
            return ::futils::error::Error<>("encode: ExpressionBody::kind: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            if(!std::holds_alternative<union_struct_14>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_14 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<1>((*this).union_variant_13).int_value.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            if(!std::holds_alternative<union_struct_15>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_15 is not set",::futils::error::Category::lib);
            }
            if (!::futils::binary::write_num(w,static_cast<std::uint64_t>(std::get<2>((*this).union_variant_13).int64_value) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::int64_value: write std::uint64_t failed",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            if(!std::holds_alternative<union_struct_16>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_16 is not set",::futils::error::Category::lib);
            }
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(std::get<3>((*this).union_variant_13).bool_value) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::bool_value: write std::uint8_t failed",::futils::error::Category::lib);
            }
            if (!((std::get<3>((*this).union_variant_13).bool_value == 0) || (std::get<3>((*this).union_variant_13).bool_value == 1))) {
                return ::futils::error::Error<>("encode: ExpressionBody: assertion failed; (std::get<3>((*this).union_variant_13).bool_value == 0) || (std::get<3>((*this).union_variant_13).bool_value == 1)",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            if(!std::holds_alternative<union_struct_17>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_17 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<4>((*this).union_variant_13).string_value.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            if(!std::holds_alternative<union_struct_18>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_18 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<5>((*this).union_variant_13).type_ref.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            if(!std::holds_alternative<union_struct_19>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_19 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<6>((*this).union_variant_13).char_value.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::IDENTIFIER==(*this).kind) {
            if(!std::holds_alternative<union_struct_20>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_20 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<7>((*this).union_variant_13).id.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::BINARY_OP==(*this).kind) {
            if(!std::holds_alternative<union_struct_21>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_21 is not set",::futils::error::Category::lib);
            }
            auto tmp_123_ = static_cast<std::uint8_t>(std::get<8>((*this).union_variant_13).bop);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_123_) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::bop: write std::uint8_t failed",::futils::error::Category::lib);
            }
            if (auto err = std::get<8>((*this).union_variant_13).left.encode(w)) {
                return err;
            }
            if (auto err = std::get<8>((*this).union_variant_13).right.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::UNARY_OP==(*this).kind) {
            if(!std::holds_alternative<union_struct_22>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_22 is not set",::futils::error::Category::lib);
            }
            auto tmp_124_ = static_cast<std::uint8_t>(std::get<9>((*this).union_variant_13).uop);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_124_) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::uop: write std::uint8_t failed",::futils::error::Category::lib);
            }
            if (auto err = std::get<9>((*this).union_variant_13).operand.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::CALL==(*this).kind) {
            if(!std::holds_alternative<union_struct_23>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_23 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<10>((*this).union_variant_13).call_desc.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            if(!std::holds_alternative<union_struct_24>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_24 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<11>((*this).union_variant_13).base.encode(w)) {
                return err;
            }
            if (auto err = std::get<11>((*this).union_variant_13).index.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            if(!std::holds_alternative<union_struct_25>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_25 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<12>((*this).union_variant_13).base.encode(w)) {
                return err;
            }
            if (auto err = std::get<12>((*this).union_variant_13).member.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::TYPE_CAST==(*this).kind) {
            if(!std::holds_alternative<union_struct_26>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_26 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<13>((*this).union_variant_13).from_type.encode(w)) {
                return err;
            }
            if (auto err = std::get<13>((*this).union_variant_13).source_expr.encode(w)) {
                return err;
            }
            auto tmp_125_ = static_cast<std::uint8_t>(std::get<13>((*this).union_variant_13).cast_kind);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_125_) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::cast_kind: write std::uint8_t failed",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_27>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_27 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<14>((*this).union_variant_13).start.encode(w)) {
                return err;
            }
            if (auto err = std::get<14>((*this).union_variant_13).end.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            if(!std::holds_alternative<union_struct_28>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_28 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<15>((*this).union_variant_13).endian_expr.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            if(!std::holds_alternative<union_struct_29>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_29 is not set",::futils::error::Category::lib);
            }
            auto tmp_126_ = static_cast<std::uint8_t>(std::get<16>((*this).union_variant_13).stream_type);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_126_) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::stream_type: write std::uint8_t failed",::futils::error::Category::lib);
            }
            auto tmp_127_ = static_cast<std::uint8_t>(std::get<16>((*this).union_variant_13).unit);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_127_) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::unit: write std::uint8_t failed",::futils::error::Category::lib);
            }
            if (!((std::get<16>((*this).union_variant_13).unit == SizeUnit::BIT_FIXED) || (std::get<16>((*this).union_variant_13).unit == SizeUnit::BYTE_FIXED))) {
                return ::futils::error::Error<>("encode: ExpressionBody: assertion failed; (std::get<16>((*this).union_variant_13).unit == SizeUnit::BIT_FIXED) || (std::get<16>((*this).union_variant_13).unit == SizeUnit::BYTE_FIXED)",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            if(!std::holds_alternative<union_struct_30>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_30 is not set",::futils::error::Category::lib);
            }
            auto tmp_128_ = static_cast<std::uint8_t>(std::get<17>((*this).union_variant_13).stream_type);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_128_) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::stream_type: write std::uint8_t failed",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            if(!std::holds_alternative<union_struct_31>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_31 is not set",::futils::error::Category::lib);
            }
            auto tmp_129_ = static_cast<std::uint8_t>(std::get<18>((*this).union_variant_13).stream_type);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_129_) ,true)) {
                return ::futils::error::Error<>("encode: ExpressionBody::stream_type: write std::uint8_t failed",::futils::error::Category::lib);
            }
            if (auto err = std::get<18>((*this).union_variant_13).num_bytes.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            if(!std::holds_alternative<union_struct_32>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_32 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<19>((*this).union_variant_13).array_expr.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::IS_ERROR==(*this).kind) {
            if(!std::holds_alternative<union_struct_33>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_33 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<20>((*this).union_variant_13).target_expr.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::MAX_VALUE==(*this).kind) {
            if(!std::holds_alternative<union_struct_34>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_34 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<21>((*this).union_variant_13).lowered_expr.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::READ_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_35 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<22>((*this).union_variant_13).target_stmt.encode(w)) {
                return err;
            }
            if (auto err = std::get<22>((*this).union_variant_13).io_statement.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::WRITE_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_36>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_36 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<23>((*this).union_variant_13).target_expr.encode(w)) {
                return err;
            }
            if (auto err = std::get<23>((*this).union_variant_13).io_statement.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_37>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_37 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<24>((*this).union_variant_13).target_stmt.encode(w)) {
                return err;
            }
            if (auto err = std::get<24>((*this).union_variant_13).conditional_stmt.encode(w)) {
                return err;
            }
        }
        else if (ExpressionOp::CONDITIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_38>(union_variant_13)) {
                return ::futils::error::Error<>("encode: ExpressionBody: union_variant_13 variant alternative union_struct_38 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<25>((*this).union_variant_13).condition.encode(w)) {
                return err;
            }
            if (auto err = std::get<25>((*this).union_variant_13).then.encode(w)) {
                return err;
            }
            if (auto err = std::get<25>((*this).union_variant_13).else_.encode(w)) {
                return err;
            }
            if (auto err = std::get<25>((*this).union_variant_13).lowered_expr.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExpressionBody::decode(::futils::binary::reader& r) {
        if (auto err = (*this).type.decode(r)) {
            return err;
        }
        std::uint8_t tmp_130_ = 0;
        if (!::futils::binary::read_num(r,tmp_130_ ,true)) {
            return ::futils::error::Error<>("decode: ExpressionBody::kind: read int failed",::futils::error::Category::lib);
        }
        (*this).kind = static_cast<ExpressionOp>(tmp_130_);
        if (ExpressionOp::LITERAL_INT==(*this).kind) {
            if(!std::holds_alternative<union_struct_14>(union_variant_13)) {
                union_variant_13 = union_struct_14();
            }
            if (auto err = std::get<1>((*this).union_variant_13).int_value.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::LITERAL_INT64==(*this).kind) {
            if(!std::holds_alternative<union_struct_15>(union_variant_13)) {
                union_variant_13 = union_struct_15();
            }
            if (!::futils::binary::read_num(r,std::get<2>((*this).union_variant_13).int64_value ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::int64_value: read int failed",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::LITERAL_BOOL==(*this).kind) {
            if(!std::holds_alternative<union_struct_16>(union_variant_13)) {
                union_variant_13 = union_struct_16();
            }
            if (!::futils::binary::read_num(r,std::get<3>((*this).union_variant_13).bool_value ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::bool_value: read int failed",::futils::error::Category::lib);
            }
            if (!((std::get<3>((*this).union_variant_13).bool_value == 0) || (std::get<3>((*this).union_variant_13).bool_value == 1))) {
                return ::futils::error::Error<>("decode: ExpressionBody: assertion failed; (std::get<3>((*this).union_variant_13).bool_value == 0) || (std::get<3>((*this).union_variant_13).bool_value == 1)",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::LITERAL_STRING==(*this).kind) {
            if(!std::holds_alternative<union_struct_17>(union_variant_13)) {
                union_variant_13 = union_struct_17();
            }
            if (auto err = std::get<4>((*this).union_variant_13).string_value.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::LITERAL_TYPE==(*this).kind) {
            if(!std::holds_alternative<union_struct_18>(union_variant_13)) {
                union_variant_13 = union_struct_18();
            }
            if (auto err = std::get<5>((*this).union_variant_13).type_ref.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::LITERAL_CHAR==(*this).kind) {
            if(!std::holds_alternative<union_struct_19>(union_variant_13)) {
                union_variant_13 = union_struct_19();
            }
            if (auto err = std::get<6>((*this).union_variant_13).char_value.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::IDENTIFIER==(*this).kind) {
            if(!std::holds_alternative<union_struct_20>(union_variant_13)) {
                union_variant_13 = union_struct_20();
            }
            if (auto err = std::get<7>((*this).union_variant_13).id.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::BINARY_OP==(*this).kind) {
            if(!std::holds_alternative<union_struct_21>(union_variant_13)) {
                union_variant_13 = union_struct_21();
            }
            std::uint8_t tmp_131_ = 0;
            if (!::futils::binary::read_num(r,tmp_131_ ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::bop: read int failed",::futils::error::Category::lib);
            }
            std::get<8>((*this).union_variant_13).bop = static_cast<BinaryOp>(tmp_131_);
            if (auto err = std::get<8>((*this).union_variant_13).left.decode(r)) {
                return err;
            }
            if (auto err = std::get<8>((*this).union_variant_13).right.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::UNARY_OP==(*this).kind) {
            if(!std::holds_alternative<union_struct_22>(union_variant_13)) {
                union_variant_13 = union_struct_22();
            }
            std::uint8_t tmp_132_ = 0;
            if (!::futils::binary::read_num(r,tmp_132_ ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::uop: read int failed",::futils::error::Category::lib);
            }
            std::get<9>((*this).union_variant_13).uop = static_cast<UnaryOp>(tmp_132_);
            if (auto err = std::get<9>((*this).union_variant_13).operand.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::CALL==(*this).kind) {
            if(!std::holds_alternative<union_struct_23>(union_variant_13)) {
                union_variant_13 = union_struct_23();
            }
            if (auto err = std::get<10>((*this).union_variant_13).call_desc.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::INDEX_ACCESS==(*this).kind) {
            if(!std::holds_alternative<union_struct_24>(union_variant_13)) {
                union_variant_13 = union_struct_24();
            }
            if (auto err = std::get<11>((*this).union_variant_13).base.decode(r)) {
                return err;
            }
            if (auto err = std::get<11>((*this).union_variant_13).index.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::MEMBER_ACCESS==(*this).kind) {
            if(!std::holds_alternative<union_struct_25>(union_variant_13)) {
                union_variant_13 = union_struct_25();
            }
            if (auto err = std::get<12>((*this).union_variant_13).base.decode(r)) {
                return err;
            }
            if (auto err = std::get<12>((*this).union_variant_13).member.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::TYPE_CAST==(*this).kind) {
            if(!std::holds_alternative<union_struct_26>(union_variant_13)) {
                union_variant_13 = union_struct_26();
            }
            if (auto err = std::get<13>((*this).union_variant_13).from_type.decode(r)) {
                return err;
            }
            if (auto err = std::get<13>((*this).union_variant_13).source_expr.decode(r)) {
                return err;
            }
            std::uint8_t tmp_133_ = 0;
            if (!::futils::binary::read_num(r,tmp_133_ ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::cast_kind: read int failed",::futils::error::Category::lib);
            }
            std::get<13>((*this).union_variant_13).cast_kind = static_cast<CastType>(tmp_133_);
        }
        else if (ExpressionOp::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_27>(union_variant_13)) {
                union_variant_13 = union_struct_27();
            }
            if (auto err = std::get<14>((*this).union_variant_13).start.decode(r)) {
                return err;
            }
            if (auto err = std::get<14>((*this).union_variant_13).end.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::IS_LITTLE_ENDIAN==(*this).kind) {
            if(!std::holds_alternative<union_struct_28>(union_variant_13)) {
                union_variant_13 = union_struct_28();
            }
            if (auto err = std::get<15>((*this).union_variant_13).endian_expr.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::GET_STREAM_OFFSET==(*this).kind) {
            if(!std::holds_alternative<union_struct_29>(union_variant_13)) {
                union_variant_13 = union_struct_29();
            }
            std::uint8_t tmp_134_ = 0;
            if (!::futils::binary::read_num(r,tmp_134_ ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::stream_type: read int failed",::futils::error::Category::lib);
            }
            std::get<16>((*this).union_variant_13).stream_type = static_cast<StreamType>(tmp_134_);
            std::uint8_t tmp_135_ = 0;
            if (!::futils::binary::read_num(r,tmp_135_ ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::unit: read int failed",::futils::error::Category::lib);
            }
            std::get<16>((*this).union_variant_13).unit = static_cast<SizeUnit>(tmp_135_);
            if (!((std::get<16>((*this).union_variant_13).unit == SizeUnit::BIT_FIXED) || (std::get<16>((*this).union_variant_13).unit == SizeUnit::BYTE_FIXED))) {
                return ::futils::error::Error<>("decode: ExpressionBody: assertion failed; (std::get<16>((*this).union_variant_13).unit == SizeUnit::BIT_FIXED) || (std::get<16>((*this).union_variant_13).unit == SizeUnit::BYTE_FIXED)",::futils::error::Category::lib);
            }
        }
        else if (ExpressionOp::GET_REMAINING_BYTES==(*this).kind) {
            if(!std::holds_alternative<union_struct_30>(union_variant_13)) {
                union_variant_13 = union_struct_30();
            }
            std::uint8_t tmp_136_ = 0;
            if (!::futils::binary::read_num(r,tmp_136_ ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::stream_type: read int failed",::futils::error::Category::lib);
            }
            std::get<17>((*this).union_variant_13).stream_type = static_cast<StreamType>(tmp_136_);
        }
        else if (ExpressionOp::CAN_READ_STREAM==(*this).kind) {
            if(!std::holds_alternative<union_struct_31>(union_variant_13)) {
                union_variant_13 = union_struct_31();
            }
            std::uint8_t tmp_137_ = 0;
            if (!::futils::binary::read_num(r,tmp_137_ ,true)) {
                return ::futils::error::Error<>("decode: ExpressionBody::stream_type: read int failed",::futils::error::Category::lib);
            }
            std::get<18>((*this).union_variant_13).stream_type = static_cast<StreamType>(tmp_137_);
            if (auto err = std::get<18>((*this).union_variant_13).num_bytes.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::ARRAY_SIZE==(*this).kind) {
            if(!std::holds_alternative<union_struct_32>(union_variant_13)) {
                union_variant_13 = union_struct_32();
            }
            if (auto err = std::get<19>((*this).union_variant_13).array_expr.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::IS_ERROR==(*this).kind) {
            if(!std::holds_alternative<union_struct_33>(union_variant_13)) {
                union_variant_13 = union_struct_33();
            }
            if (auto err = std::get<20>((*this).union_variant_13).target_expr.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::MAX_VALUE==(*this).kind) {
            if(!std::holds_alternative<union_struct_34>(union_variant_13)) {
                union_variant_13 = union_struct_34();
            }
            if (auto err = std::get<21>((*this).union_variant_13).lowered_expr.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::READ_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_35>(union_variant_13)) {
                union_variant_13 = union_struct_35();
            }
            if (auto err = std::get<22>((*this).union_variant_13).target_stmt.decode(r)) {
                return err;
            }
            if (auto err = std::get<22>((*this).union_variant_13).io_statement.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::WRITE_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_36>(union_variant_13)) {
                union_variant_13 = union_struct_36();
            }
            if (auto err = std::get<23>((*this).union_variant_13).target_expr.decode(r)) {
                return err;
            }
            if (auto err = std::get<23>((*this).union_variant_13).io_statement.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::CONDITIONAL_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_37>(union_variant_13)) {
                union_variant_13 = union_struct_37();
            }
            if (auto err = std::get<24>((*this).union_variant_13).target_stmt.decode(r)) {
                return err;
            }
            if (auto err = std::get<24>((*this).union_variant_13).conditional_stmt.decode(r)) {
                return err;
            }
        }
        else if (ExpressionOp::CONDITIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_38>(union_variant_13)) {
                union_variant_13 = union_struct_38();
            }
            if (auto err = std::get<25>((*this).union_variant_13).condition.decode(r)) {
                return err;
            }
            if (auto err = std::get<25>((*this).union_variant_13).then.decode(r)) {
                return err;
            }
            if (auto err = std::get<25>((*this).union_variant_13).else_.decode(r)) {
                return err;
            }
            if (auto err = std::get<25>((*this).union_variant_13).lowered_expr.decode(r)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Expression::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Expression::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Condition::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).flattened_statement.encode(w)) {
            return err;
        }
        if (auto err = (*this).cond.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Condition::decode(::futils::binary::reader& r) {
        if (auto err = (*this).flattened_statement.decode(r)) {
            return err;
        }
        if (auto err = (*this).cond.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IfStatement::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).condition.encode(w)) {
            return err;
        }
        if (auto err = (*this).then_block.encode(w)) {
            return err;
        }
        if (auto err = (*this).else_block.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IfStatement::decode(::futils::binary::reader& r) {
        if (auto err = (*this).condition.decode(r)) {
            return err;
        }
        if (auto err = (*this).then_block.decode(r)) {
            return err;
        }
        if (auto err = (*this).else_block.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Metadata::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).values.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Metadata::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).values.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredStatements::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len.encode(w)) {
            return err;
        }
        auto tmp_138_ = (*this).len.value();
        if (tmp_138_!=(*this).container.size()) {
            return ::futils::error::Error<>("encode: LoweredStatements::container: dynamic length is not compatible with its length; tmp_138_!=(*this).container.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_139_ : (*this).container) {
            if (auto err = tmp_139_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredStatements::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len.decode(r)) {
            return err;
        }
        auto tmp_140_ = (*this).len.value();
        (*this).container.clear();
        for (size_t  tmp_142_= 0; tmp_142_<tmp_140_; ++tmp_142_ ) {
            LoweredStatement tmp_141_;
            if (auto err = tmp_141_.decode(r)) {
                return err;
            }
            (*this).container.push_back(std::move(tmp_141_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredExpressions::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len.encode(w)) {
            return err;
        }
        auto tmp_143_ = (*this).len.value();
        if (tmp_143_!=(*this).container.size()) {
            return ::futils::error::Error<>("encode: LoweredExpressions::container: dynamic length is not compatible with its length; tmp_143_!=(*this).container.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_144_ : (*this).container) {
            if (auto err = tmp_144_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoweredExpressions::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len.decode(r)) {
            return err;
        }
        auto tmp_145_ = (*this).len.value();
        (*this).container.clear();
        for (size_t  tmp_147_= 0; tmp_147_<tmp_145_; ++tmp_147_ ) {
            LoweredExpression tmp_146_;
            if (auto err = tmp_146_.decode(r)) {
                return err;
            }
            (*this).container.push_back(std::move(tmp_146_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Block::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len.encode(w)) {
            return err;
        }
        auto tmp_148_ = (*this).len.value();
        if (tmp_148_!=(*this).container.size()) {
            return ::futils::error::Error<>("encode: Block::container: dynamic length is not compatible with its length; tmp_148_!=(*this).container.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_149_ : (*this).container) {
            if (auto err = tmp_149_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Block::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len.decode(r)) {
            return err;
        }
        auto tmp_150_ = (*this).len.value();
        (*this).container.clear();
        for (size_t  tmp_152_= 0; tmp_152_<tmp_150_; ++tmp_152_ ) {
            StatementRef tmp_151_;
            if (auto err = tmp_151_.decode(r)) {
                return err;
            }
            (*this).container.push_back(std::move(tmp_151_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> AssertDesc::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).condition.encode(w)) {
            return err;
        }
        if (auto err = (*this).lowered_statement.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> AssertDesc::decode(::futils::binary::reader& r) {
        if (auto err = (*this).condition.decode(r)) {
            return err;
        }
        if (auto err = (*this).lowered_statement.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IOData::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).io_ref.encode(w)) {
            return err;
        }
        if (auto err = (*this).target.encode(w)) {
            return err;
        }
        if (auto err = (*this).data_type.encode(w)) {
            return err;
        }
        if (auto err = (*this).attribute.encode(w)) {
            return err;
        }
        if (auto err = (*this).size.encode(w)) {
            return err;
        }
        if (auto err = (*this).lowered_statement.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> IOData::decode(::futils::binary::reader& r) {
        if (auto err = (*this).io_ref.decode(r)) {
            return err;
        }
        if (auto err = (*this).target.decode(r)) {
            return err;
        }
        if (auto err = (*this).data_type.decode(r)) {
            return err;
        }
        if (auto err = (*this).attribute.decode(r)) {
            return err;
        }
        if (auto err = (*this).size.decode(r)) {
            return err;
        }
        if (auto err = (*this).lowered_statement.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoopStatement::encode(::futils::binary::writer& w) const {
        auto tmp_153_ = static_cast<std::uint8_t>((*this).loop_type);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_153_) ,true)) {
            return ::futils::error::Error<>("encode: LoopStatement::loop_type: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (LoopType::INFINITE==(*this).loop_type) {
        }
        else if (LoopType::WHILE==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_42>(union_variant_40)) {
                return ::futils::error::Error<>("encode: LoopStatement: union_variant_40 variant alternative union_struct_42 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<2>((*this).union_variant_40).condition.encode(w)) {
                return err;
            }
        }
        else if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_43>(union_variant_40)) {
                return ::futils::error::Error<>("encode: LoopStatement: union_variant_40 variant alternative union_struct_43 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<3>((*this).union_variant_40).item_var.encode(w)) {
                return err;
            }
            if (auto err = std::get<3>((*this).union_variant_40).collection.encode(w)) {
                return err;
            }
        }
        else if (LoopType::FOR==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_44>(union_variant_40)) {
                return ::futils::error::Error<>("encode: LoopStatement: union_variant_40 variant alternative union_struct_44 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<4>((*this).union_variant_40).init.encode(w)) {
                return err;
            }
            if (auto err = std::get<4>((*this).union_variant_40).condition.encode(w)) {
                return err;
            }
            if (auto err = std::get<4>((*this).union_variant_40).increment.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        if (auto err = (*this).lowered_statement.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> LoopStatement::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_154_ = 0;
        if (!::futils::binary::read_num(r,tmp_154_ ,true)) {
            return ::futils::error::Error<>("decode: LoopStatement::loop_type: read int failed",::futils::error::Category::lib);
        }
        (*this).loop_type = static_cast<LoopType>(tmp_154_);
        if (LoopType::INFINITE==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_41>(union_variant_40)) {
                union_variant_40 = union_struct_41();
            }
        }
        else if (LoopType::WHILE==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_42>(union_variant_40)) {
                union_variant_40 = union_struct_42();
            }
            if (auto err = std::get<2>((*this).union_variant_40).condition.decode(r)) {
                return err;
            }
        }
        else if (LoopType::FOR_EACH==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_43>(union_variant_40)) {
                union_variant_40 = union_struct_43();
            }
            if (auto err = std::get<3>((*this).union_variant_40).item_var.decode(r)) {
                return err;
            }
            if (auto err = std::get<3>((*this).union_variant_40).collection.decode(r)) {
                return err;
            }
        }
        else if (LoopType::FOR==(*this).loop_type) {
            if(!std::holds_alternative<union_struct_44>(union_variant_40)) {
                union_variant_40 = union_struct_44();
            }
            if (auto err = std::get<4>((*this).union_variant_40).init.decode(r)) {
                return err;
            }
            if (auto err = std::get<4>((*this).union_variant_40).condition.decode(r)) {
                return err;
            }
            if (auto err = std::get<4>((*this).union_variant_40).increment.decode(r)) {
                return err;
            }
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        if (auto err = (*this).lowered_statement.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> MatchStatement::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).target.encode(w)) {
            return err;
        }
        if (!::futils::binary::write_num(w,flags_45_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: MatchStatement::reserved: write bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).branches.encode(w)) {
            return err;
        }
        if (auto err = (*this).lowered_if_statement.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> MatchStatement::decode(::futils::binary::reader& r) {
        if (auto err = (*this).target.decode(r)) {
            return err;
        }
        if (!::futils::binary::read_num(r,flags_45_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: MatchStatement::reserved: read bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).branches.decode(r)) {
            return err;
        }
        if (auto err = (*this).lowered_if_statement.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> MatchBranch::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).condition.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> MatchBranch::decode(::futils::binary::reader& r) {
        if (auto err = (*this).condition.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FunctionDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).return_type.encode(w)) {
            return err;
        }
        if (auto err = (*this).params.encode(w)) {
            return err;
        }
        if (auto err = (*this).parent_format.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FunctionDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).return_type.decode(r)) {
            return err;
        }
        if (auto err = (*this).params.decode(r)) {
            return err;
        }
        if (auto err = (*this).parent_format.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> VariableDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).var_type.encode(w)) {
            return err;
        }
        if (auto err = (*this).initial_value.encode(w)) {
            return err;
        }
        if (!::futils::binary::write_num(w,flags_46_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: VariableDecl::reserved: write bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> VariableDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).var_type.decode(r)) {
            return err;
        }
        if (auto err = (*this).initial_value.decode(r)) {
            return err;
        }
        if (!::futils::binary::read_num(r,flags_46_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: VariableDecl::reserved: read bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FieldDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).field_type.encode(w)) {
            return err;
        }
        if (auto err = (*this).parent_struct.encode(w)) {
            return err;
        }
        if (!::futils::binary::write_num(w,flags_47_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: FieldDecl::reserved: write bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> FieldDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).field_type.decode(r)) {
            return err;
        }
        if (auto err = (*this).parent_struct.decode(r)) {
            return err;
        }
        if (!::futils::binary::read_num(r,flags_47_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: FieldDecl::reserved: read bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> EnumDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).base_type.encode(w)) {
            return err;
        }
        if (auto err = (*this).members.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> EnumDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).base_type.decode(r)) {
            return err;
        }
        if (auto err = (*this).members.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> EnumMemberDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).value.encode(w)) {
            return err;
        }
        if (auto err = (*this).string_repr.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> EnumMemberDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).value.decode(r)) {
            return err;
        }
        if (auto err = (*this).string_repr.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StructDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).fields.encode(w)) {
            return err;
        }
        if (auto err = (*this).encode_fn.encode(w)) {
            return err;
        }
        if (auto err = (*this).decode_fn.encode(w)) {
            return err;
        }
        if (!::futils::binary::write_num(w,flags_48_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: StructDecl::reserved: write bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StructDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).fields.decode(r)) {
            return err;
        }
        if (auto err = (*this).encode_fn.decode(r)) {
            return err;
        }
        if (auto err = (*this).decode_fn.decode(r)) {
            return err;
        }
        if (!::futils::binary::read_num(r,flags_48_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: StructDecl::reserved: read bit field failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> UnionDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).parent_field.encode(w)) {
            return err;
        }
        if (auto err = (*this).members.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> UnionDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).parent_field.decode(r)) {
            return err;
        }
        if (auto err = (*this).members.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> UnionMemberDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).field_type.encode(w)) {
            return err;
        }
        if (!::futils::binary::write_num(w,flags_49_.as_value() ,true)) {
            return ::futils::error::Error<>("encode: UnionMemberDecl::reserved: write bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).parent_union.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> UnionMemberDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).field_type.decode(r)) {
            return err;
        }
        if (!::futils::binary::read_num(r,flags_49_.as_value() ,true)) {
            return ::futils::error::Error<>("decode: UnionMemberDecl::reserved: read bit field failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).parent_union.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> PropertyDecl::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).name.encode(w)) {
            return err;
        }
        if (auto err = (*this).parent_format.encode(w)) {
            return err;
        }
        if (auto err = (*this).property_type.encode(w)) {
            return err;
        }
        auto tmp_155_ = static_cast<std::uint8_t>((*this).merge_mode);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_155_) ,true)) {
            return ::futils::error::Error<>("encode: PropertyDecl::merge_mode: write std::uint8_t failed",::futils::error::Category::lib);
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> PropertyDecl::decode(::futils::binary::reader& r) {
        if (auto err = (*this).name.decode(r)) {
            return err;
        }
        if (auto err = (*this).parent_format.decode(r)) {
            return err;
        }
        if (auto err = (*this).property_type.decode(r)) {
            return err;
        }
        std::uint8_t tmp_156_ = 0;
        if (!::futils::binary::read_num(r,tmp_156_ ,true)) {
            return ::futils::error::Error<>("decode: PropertyDecl::merge_mode: read int failed",::futils::error::Category::lib);
        }
        (*this).merge_mode = static_cast<MergeMode>(tmp_156_);
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> PhiParam::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).condition.encode(w)) {
            return err;
        }
        if (auto err = (*this).value.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> PhiParam::decode(::futils::binary::reader& r) {
        if (auto err = (*this).condition.decode(r)) {
            return err;
        }
        if (auto err = (*this).value.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ErrorReport::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).message.encode(w)) {
            return err;
        }
        if (auto err = (*this).arguments.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ErrorReport::decode(::futils::binary::reader& r) {
        if (auto err = (*this).message.decode(r)) {
            return err;
        }
        if (auto err = (*this).arguments.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StatementBody::encode(::futils::binary::writer& w) const {
        auto tmp_157_ = static_cast<std::uint8_t>((*this).kind);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_157_) ,true)) {
            return ::futils::error::Error<>("encode: StatementBody::kind: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (StatementOp::BLOCK==(*this).kind) {
            if(!std::holds_alternative<union_struct_52>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_52 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<1>((*this).union_variant_51).block.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::ASSIGNMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_53>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_53 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<2>((*this).union_variant_51).target.encode(w)) {
                return err;
            }
            if (auto err = std::get<2>((*this).union_variant_51).value.encode(w)) {
                return err;
            }
            if (auto err = std::get<2>((*this).union_variant_51).previous_assignment.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::YIELD==(*this).kind) {
            if(!std::holds_alternative<union_struct_54>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_54 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<3>((*this).union_variant_51).target.encode(w)) {
                return err;
            }
            if (auto err = std::get<3>((*this).union_variant_51).value.encode(w)) {
                return err;
            }
            if (auto err = std::get<3>((*this).union_variant_51).previous_assignment.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::APPEND==(*this).kind) {
            if(!std::holds_alternative<union_struct_55>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_55 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<4>((*this).union_variant_51).target.encode(w)) {
                return err;
            }
            if (auto err = std::get<4>((*this).union_variant_51).value.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_56>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_56 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<5>((*this).union_variant_51).value.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::ERROR_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_57>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_57 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<6>((*this).union_variant_51).value.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::ASSERT==(*this).kind) {
            if(!std::holds_alternative<union_struct_58>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_58 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<7>((*this).union_variant_51).assert_desc.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::READ_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_59>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_59 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<8>((*this).union_variant_51).read_data.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::WRITE_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_60>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_60 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<9>((*this).union_variant_51).write_data.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::SEEK_STREAM==(*this).kind) {
            if(!std::holds_alternative<union_struct_61>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_61 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<10>((*this).union_variant_51).offset.encode(w)) {
                return err;
            }
            auto tmp_158_ = static_cast<std::uint8_t>(std::get<10>((*this).union_variant_51).stream_type);
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_158_) ,true)) {
                return ::futils::error::Error<>("encode: StatementBody::stream_type: write std::uint8_t failed",::futils::error::Category::lib);
            }
        }
        else if (StatementOp::IF_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_62>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_62 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<11>((*this).union_variant_51).if_statement.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_63>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_63 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<12>((*this).union_variant_51).loop.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_64>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_64 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<13>((*this).union_variant_51).match_statement.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::MATCH_BRANCH==(*this).kind) {
            if(!std::holds_alternative<union_struct_65>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_65 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<14>((*this).union_variant_51).match_branch.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::BREAK==(*this).kind) {
            if(!std::holds_alternative<union_struct_66>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_66 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<15>((*this).union_variant_51).break_.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::CONTINUE==(*this).kind) {
            if(!std::holds_alternative<union_struct_67>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_67 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<16>((*this).union_variant_51).continue_.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::FUNCTION_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_68>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_68 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<17>((*this).union_variant_51).func_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::VARIABLE_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_69>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_69 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<18>((*this).union_variant_51).var_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::FIELD_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_70>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_70 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<19>((*this).union_variant_51).field_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::ENUM_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_71>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_71 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<20>((*this).union_variant_51).enum_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_72>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_72 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<21>((*this).union_variant_51).enum_member_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::STRUCT_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_73>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_73 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<22>((*this).union_variant_51).struct_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::UNION_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_74>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_74 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<23>((*this).union_variant_51).union_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_75>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_75 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<24>((*this).union_variant_51).union_member_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::PROGRAM_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_76>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_76 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<25>((*this).union_variant_51).block.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::PROPERTY_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_77>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_77 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<26>((*this).union_variant_51).property_decl.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::METADATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_78>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_78 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<27>((*this).union_variant_51).metadata.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::IMPORT_MODULE==(*this).kind) {
            if(!std::holds_alternative<union_struct_79>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_79 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<28>((*this).union_variant_51).module_name.encode(w)) {
                return err;
            }
            if (auto err = std::get<28>((*this).union_variant_51).alias.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::PHI_NODE==(*this).kind) {
            if(!std::holds_alternative<union_struct_80>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_80 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<29>((*this).union_variant_51).target_var.encode(w)) {
                return err;
            }
            if (auto err = std::get<29>((*this).union_variant_51).params_len.encode(w)) {
                return err;
            }
            auto tmp_159_ = std::get<29>((*this).union_variant_51).params_len.value();
            if (tmp_159_!=std::get<29>((*this).union_variant_51).params.size()) {
                return ::futils::error::Error<>("encode: StatementBody::params: dynamic length is not compatible with its length; tmp_159_!=std::get<29>((*this).union_variant_51).params.size()",::futils::error::Category::lib);
            }
            for (auto& tmp_160_ : std::get<29>((*this).union_variant_51).params) {
                if (auto err = tmp_160_.encode(w)) {
                    return err;
                }
            }
        }
        else if (StatementOp::ERROR_REPORT==(*this).kind) {
            if(!std::holds_alternative<union_struct_81>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_81 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<30>((*this).union_variant_51).error_report.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::EXPRESSION==(*this).kind) {
            if(!std::holds_alternative<union_struct_82>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_82 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<31>((*this).union_variant_51).expression.encode(w)) {
                return err;
            }
        }
        else if (StatementOp::LOWERED_STATEMENTS==(*this).kind) {
            if(!std::holds_alternative<union_struct_83>(union_variant_51)) {
                return ::futils::error::Error<>("encode: StatementBody: union_variant_51 variant alternative union_struct_83 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<32>((*this).union_variant_51).lowered_statements.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StatementBody::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_161_ = 0;
        if (!::futils::binary::read_num(r,tmp_161_ ,true)) {
            return ::futils::error::Error<>("decode: StatementBody::kind: read int failed",::futils::error::Category::lib);
        }
        (*this).kind = static_cast<StatementOp>(tmp_161_);
        if (StatementOp::BLOCK==(*this).kind) {
            if(!std::holds_alternative<union_struct_52>(union_variant_51)) {
                union_variant_51 = union_struct_52();
            }
            if (auto err = std::get<1>((*this).union_variant_51).block.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::ASSIGNMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_53>(union_variant_51)) {
                union_variant_51 = union_struct_53();
            }
            if (auto err = std::get<2>((*this).union_variant_51).target.decode(r)) {
                return err;
            }
            if (auto err = std::get<2>((*this).union_variant_51).value.decode(r)) {
                return err;
            }
            if (auto err = std::get<2>((*this).union_variant_51).previous_assignment.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::YIELD==(*this).kind) {
            if(!std::holds_alternative<union_struct_54>(union_variant_51)) {
                union_variant_51 = union_struct_54();
            }
            if (auto err = std::get<3>((*this).union_variant_51).target.decode(r)) {
                return err;
            }
            if (auto err = std::get<3>((*this).union_variant_51).value.decode(r)) {
                return err;
            }
            if (auto err = std::get<3>((*this).union_variant_51).previous_assignment.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::APPEND==(*this).kind) {
            if(!std::holds_alternative<union_struct_55>(union_variant_51)) {
                union_variant_51 = union_struct_55();
            }
            if (auto err = std::get<4>((*this).union_variant_51).target.decode(r)) {
                return err;
            }
            if (auto err = std::get<4>((*this).union_variant_51).value.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_56>(union_variant_51)) {
                union_variant_51 = union_struct_56();
            }
            if (auto err = std::get<5>((*this).union_variant_51).value.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::ERROR_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_57>(union_variant_51)) {
                union_variant_51 = union_struct_57();
            }
            if (auto err = std::get<6>((*this).union_variant_51).value.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::ASSERT==(*this).kind) {
            if(!std::holds_alternative<union_struct_58>(union_variant_51)) {
                union_variant_51 = union_struct_58();
            }
            if (auto err = std::get<7>((*this).union_variant_51).assert_desc.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::READ_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_59>(union_variant_51)) {
                union_variant_51 = union_struct_59();
            }
            if (auto err = std::get<8>((*this).union_variant_51).read_data.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::WRITE_DATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_60>(union_variant_51)) {
                union_variant_51 = union_struct_60();
            }
            if (auto err = std::get<9>((*this).union_variant_51).write_data.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::SEEK_STREAM==(*this).kind) {
            if(!std::holds_alternative<union_struct_61>(union_variant_51)) {
                union_variant_51 = union_struct_61();
            }
            if (auto err = std::get<10>((*this).union_variant_51).offset.decode(r)) {
                return err;
            }
            std::uint8_t tmp_162_ = 0;
            if (!::futils::binary::read_num(r,tmp_162_ ,true)) {
                return ::futils::error::Error<>("decode: StatementBody::stream_type: read int failed",::futils::error::Category::lib);
            }
            std::get<10>((*this).union_variant_51).stream_type = static_cast<StreamType>(tmp_162_);
        }
        else if (StatementOp::IF_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_62>(union_variant_51)) {
                union_variant_51 = union_struct_62();
            }
            if (auto err = std::get<11>((*this).union_variant_51).if_statement.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::LOOP_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_63>(union_variant_51)) {
                union_variant_51 = union_struct_63();
            }
            if (auto err = std::get<12>((*this).union_variant_51).loop.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::MATCH_STATEMENT==(*this).kind) {
            if(!std::holds_alternative<union_struct_64>(union_variant_51)) {
                union_variant_51 = union_struct_64();
            }
            if (auto err = std::get<13>((*this).union_variant_51).match_statement.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::MATCH_BRANCH==(*this).kind) {
            if(!std::holds_alternative<union_struct_65>(union_variant_51)) {
                union_variant_51 = union_struct_65();
            }
            if (auto err = std::get<14>((*this).union_variant_51).match_branch.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::BREAK==(*this).kind) {
            if(!std::holds_alternative<union_struct_66>(union_variant_51)) {
                union_variant_51 = union_struct_66();
            }
            if (auto err = std::get<15>((*this).union_variant_51).break_.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::CONTINUE==(*this).kind) {
            if(!std::holds_alternative<union_struct_67>(union_variant_51)) {
                union_variant_51 = union_struct_67();
            }
            if (auto err = std::get<16>((*this).union_variant_51).continue_.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::FUNCTION_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_68>(union_variant_51)) {
                union_variant_51 = union_struct_68();
            }
            if (auto err = std::get<17>((*this).union_variant_51).func_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::VARIABLE_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_69>(union_variant_51)) {
                union_variant_51 = union_struct_69();
            }
            if (auto err = std::get<18>((*this).union_variant_51).var_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::FIELD_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_70>(union_variant_51)) {
                union_variant_51 = union_struct_70();
            }
            if (auto err = std::get<19>((*this).union_variant_51).field_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::ENUM_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_71>(union_variant_51)) {
                union_variant_51 = union_struct_71();
            }
            if (auto err = std::get<20>((*this).union_variant_51).enum_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::ENUM_MEMBER_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_72>(union_variant_51)) {
                union_variant_51 = union_struct_72();
            }
            if (auto err = std::get<21>((*this).union_variant_51).enum_member_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::STRUCT_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_73>(union_variant_51)) {
                union_variant_51 = union_struct_73();
            }
            if (auto err = std::get<22>((*this).union_variant_51).struct_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::UNION_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_74>(union_variant_51)) {
                union_variant_51 = union_struct_74();
            }
            if (auto err = std::get<23>((*this).union_variant_51).union_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::UNION_MEMBER_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_75>(union_variant_51)) {
                union_variant_51 = union_struct_75();
            }
            if (auto err = std::get<24>((*this).union_variant_51).union_member_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::PROGRAM_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_76>(union_variant_51)) {
                union_variant_51 = union_struct_76();
            }
            if (auto err = std::get<25>((*this).union_variant_51).block.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::PROPERTY_DECL==(*this).kind) {
            if(!std::holds_alternative<union_struct_77>(union_variant_51)) {
                union_variant_51 = union_struct_77();
            }
            if (auto err = std::get<26>((*this).union_variant_51).property_decl.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::METADATA==(*this).kind) {
            if(!std::holds_alternative<union_struct_78>(union_variant_51)) {
                union_variant_51 = union_struct_78();
            }
            if (auto err = std::get<27>((*this).union_variant_51).metadata.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::IMPORT_MODULE==(*this).kind) {
            if(!std::holds_alternative<union_struct_79>(union_variant_51)) {
                union_variant_51 = union_struct_79();
            }
            if (auto err = std::get<28>((*this).union_variant_51).module_name.decode(r)) {
                return err;
            }
            if (auto err = std::get<28>((*this).union_variant_51).alias.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::PHI_NODE==(*this).kind) {
            if(!std::holds_alternative<union_struct_80>(union_variant_51)) {
                union_variant_51 = union_struct_80();
            }
            if (auto err = std::get<29>((*this).union_variant_51).target_var.decode(r)) {
                return err;
            }
            if (auto err = std::get<29>((*this).union_variant_51).params_len.decode(r)) {
                return err;
            }
            auto tmp_163_ = std::get<29>((*this).union_variant_51).params_len.value();
            std::get<29>((*this).union_variant_51).params.clear();
            for (size_t  tmp_165_= 0; tmp_165_<tmp_163_; ++tmp_165_ ) {
                PhiParam tmp_164_;
                if (auto err = tmp_164_.decode(r)) {
                    return err;
                }
                std::get<29>((*this).union_variant_51).params.push_back(std::move(tmp_164_));
            }
        }
        else if (StatementOp::ERROR_REPORT==(*this).kind) {
            if(!std::holds_alternative<union_struct_81>(union_variant_51)) {
                union_variant_51 = union_struct_81();
            }
            if (auto err = std::get<30>((*this).union_variant_51).error_report.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::EXPRESSION==(*this).kind) {
            if(!std::holds_alternative<union_struct_82>(union_variant_51)) {
                union_variant_51 = union_struct_82();
            }
            if (auto err = std::get<31>((*this).union_variant_51).expression.decode(r)) {
                return err;
            }
        }
        else if (StatementOp::LOWERED_STATEMENTS==(*this).kind) {
            if(!std::holds_alternative<union_struct_83>(union_variant_51)) {
                union_variant_51 = union_struct_83();
            }
            if (auto err = std::get<32>((*this).union_variant_51).lowered_statements.decode(r)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Statement::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Statement::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Types::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len.encode(w)) {
            return err;
        }
        auto tmp_166_ = (*this).len.value();
        if (tmp_166_!=(*this).container.size()) {
            return ::futils::error::Error<>("encode: Types::container: dynamic length is not compatible with its length; tmp_166_!=(*this).container.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_167_ : (*this).container) {
            if (auto err = tmp_167_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Types::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len.decode(r)) {
            return err;
        }
        auto tmp_168_ = (*this).len.value();
        (*this).container.clear();
        for (size_t  tmp_170_= 0; tmp_170_<tmp_168_; ++tmp_170_ ) {
            TypeRef tmp_169_;
            if (auto err = tmp_169_.decode(r)) {
                return err;
            }
            (*this).container.push_back(std::move(tmp_169_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> TypeBody::encode(::futils::binary::writer& w) const {
        auto tmp_171_ = static_cast<std::uint8_t>((*this).kind);
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(tmp_171_) ,true)) {
            return ::futils::error::Error<>("encode: TypeBody::kind: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (TypeKind::INT==(*this).kind) {
            if(!std::holds_alternative<union_struct_86>(union_variant_85)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_85 variant alternative union_struct_86 is not set",::futils::error::Category::lib);
            }
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(std::get<1>((*this).union_variant_85).size) ,true)) {
                return ::futils::error::Error<>("encode: TypeBody::size: write std::uint8_t failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::UINT==(*this).kind) {
            if(!std::holds_alternative<union_struct_87>(union_variant_85)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_85 variant alternative union_struct_87 is not set",::futils::error::Category::lib);
            }
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(std::get<2>((*this).union_variant_85).size) ,true)) {
                return ::futils::error::Error<>("encode: TypeBody::size: write std::uint8_t failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::FLOAT==(*this).kind) {
            if(!std::holds_alternative<union_struct_88>(union_variant_85)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_85 variant alternative union_struct_88 is not set",::futils::error::Category::lib);
            }
            if (!::futils::binary::write_num(w,static_cast<std::uint8_t>(std::get<3>((*this).union_variant_85).size) ,true)) {
                return ::futils::error::Error<>("encode: TypeBody::size: write std::uint8_t failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::BOOL==(*this).kind) {
        }
        else if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_90>(union_variant_85)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_85 variant alternative union_struct_90 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<5>((*this).union_variant_85).element_type.encode(w)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_85).length.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::VECTOR==(*this).kind) {
            if(!std::holds_alternative<union_struct_91>(union_variant_85)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_85 variant alternative union_struct_91 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<6>((*this).union_variant_85).element_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_92>(union_variant_85)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_85 variant alternative union_struct_92 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<7>((*this).union_variant_85).id.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_93>(union_variant_85)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_85 variant alternative union_struct_93 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<8>((*this).union_variant_85).id.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_94>(union_variant_85)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_85 variant alternative union_struct_94 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<9>((*this).union_variant_85).id.encode(w)) {
                return err;
            }
            if (auto err = std::get<9>((*this).union_variant_85).base_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_95>(union_variant_85)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_85 variant alternative union_struct_95 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<10>((*this).union_variant_85).common_type.encode(w)) {
                return err;
            }
            if (auto err = std::get<10>((*this).union_variant_85).members.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_96>(union_variant_85)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_85 variant alternative union_struct_96 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<11>((*this).union_variant_85).property_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::OPTIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_97>(union_variant_85)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_85 variant alternative union_struct_97 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<12>((*this).union_variant_85).inner_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::PTR==(*this).kind) {
            if(!std::holds_alternative<union_struct_98>(union_variant_85)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_85 variant alternative union_struct_98 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<13>((*this).union_variant_85).pointee_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_99>(union_variant_85)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_85 variant alternative union_struct_99 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<14>((*this).union_variant_85).base_type.encode(w)) {
                return err;
            }
        }
        else if (TypeKind::FUNCTION==(*this).kind) {
            if(!std::holds_alternative<union_struct_100>(union_variant_85)) {
                return ::futils::error::Error<>("encode: TypeBody: union_variant_85 variant alternative union_struct_100 is not set",::futils::error::Category::lib);
            }
            if (auto err = std::get<15>((*this).union_variant_85).return_type.encode(w)) {
                return err;
            }
            if (auto err = std::get<15>((*this).union_variant_85).params.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> TypeBody::decode(::futils::binary::reader& r) {
        std::uint8_t tmp_172_ = 0;
        if (!::futils::binary::read_num(r,tmp_172_ ,true)) {
            return ::futils::error::Error<>("decode: TypeBody::kind: read int failed",::futils::error::Category::lib);
        }
        (*this).kind = static_cast<TypeKind>(tmp_172_);
        if (TypeKind::INT==(*this).kind) {
            if(!std::holds_alternative<union_struct_86>(union_variant_85)) {
                union_variant_85 = union_struct_86();
            }
            if (!::futils::binary::read_num(r,std::get<1>((*this).union_variant_85).size ,true)) {
                return ::futils::error::Error<>("decode: TypeBody::size: read int failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::UINT==(*this).kind) {
            if(!std::holds_alternative<union_struct_87>(union_variant_85)) {
                union_variant_85 = union_struct_87();
            }
            if (!::futils::binary::read_num(r,std::get<2>((*this).union_variant_85).size ,true)) {
                return ::futils::error::Error<>("decode: TypeBody::size: read int failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::FLOAT==(*this).kind) {
            if(!std::holds_alternative<union_struct_88>(union_variant_85)) {
                union_variant_85 = union_struct_88();
            }
            if (!::futils::binary::read_num(r,std::get<3>((*this).union_variant_85).size ,true)) {
                return ::futils::error::Error<>("decode: TypeBody::size: read int failed",::futils::error::Category::lib);
            }
        }
        else if (TypeKind::BOOL==(*this).kind) {
            if(!std::holds_alternative<union_struct_89>(union_variant_85)) {
                union_variant_85 = union_struct_89();
            }
        }
        else if (TypeKind::ARRAY==(*this).kind) {
            if(!std::holds_alternative<union_struct_90>(union_variant_85)) {
                union_variant_85 = union_struct_90();
            }
            if (auto err = std::get<5>((*this).union_variant_85).element_type.decode(r)) {
                return err;
            }
            if (auto err = std::get<5>((*this).union_variant_85).length.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::VECTOR==(*this).kind) {
            if(!std::holds_alternative<union_struct_91>(union_variant_85)) {
                union_variant_85 = union_struct_91();
            }
            if (auto err = std::get<6>((*this).union_variant_85).element_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_92>(union_variant_85)) {
                union_variant_85 = union_struct_92();
            }
            if (auto err = std::get<7>((*this).union_variant_85).id.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::RECURSIVE_STRUCT==(*this).kind) {
            if(!std::holds_alternative<union_struct_93>(union_variant_85)) {
                union_variant_85 = union_struct_93();
            }
            if (auto err = std::get<8>((*this).union_variant_85).id.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::ENUM==(*this).kind) {
            if(!std::holds_alternative<union_struct_94>(union_variant_85)) {
                union_variant_85 = union_struct_94();
            }
            if (auto err = std::get<9>((*this).union_variant_85).id.decode(r)) {
                return err;
            }
            if (auto err = std::get<9>((*this).union_variant_85).base_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::VARIANT==(*this).kind) {
            if(!std::holds_alternative<union_struct_95>(union_variant_85)) {
                union_variant_85 = union_struct_95();
            }
            if (auto err = std::get<10>((*this).union_variant_85).common_type.decode(r)) {
                return err;
            }
            if (auto err = std::get<10>((*this).union_variant_85).members.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::PROPERTY_SETTER_RETURN==(*this).kind) {
            if(!std::holds_alternative<union_struct_96>(union_variant_85)) {
                union_variant_85 = union_struct_96();
            }
            if (auto err = std::get<11>((*this).union_variant_85).property_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::OPTIONAL==(*this).kind) {
            if(!std::holds_alternative<union_struct_97>(union_variant_85)) {
                union_variant_85 = union_struct_97();
            }
            if (auto err = std::get<12>((*this).union_variant_85).inner_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::PTR==(*this).kind) {
            if(!std::holds_alternative<union_struct_98>(union_variant_85)) {
                union_variant_85 = union_struct_98();
            }
            if (auto err = std::get<13>((*this).union_variant_85).pointee_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::RANGE==(*this).kind) {
            if(!std::holds_alternative<union_struct_99>(union_variant_85)) {
                union_variant_85 = union_struct_99();
            }
            if (auto err = std::get<14>((*this).union_variant_85).base_type.decode(r)) {
                return err;
            }
        }
        else if (TypeKind::FUNCTION==(*this).kind) {
            if(!std::holds_alternative<union_struct_100>(union_variant_85)) {
                union_variant_85 = union_struct_100();
            }
            if (auto err = std::get<15>((*this).union_variant_85).return_type.decode(r)) {
                return err;
            }
            if (auto err = std::get<15>((*this).union_variant_85).params.decode(r)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Type::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Type::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Loc::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).ident.encode(w)) {
            return err;
        }
        if (auto err = (*this).file_id.encode(w)) {
            return err;
        }
        if (auto err = (*this).line.encode(w)) {
            return err;
        }
        if (auto err = (*this).column.encode(w)) {
            return err;
        }
        if (auto err = (*this).start.encode(w)) {
            return err;
        }
        if (auto err = (*this).end.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Loc::decode(::futils::binary::reader& r) {
        if (auto err = (*this).ident.decode(r)) {
            return err;
        }
        if (auto err = (*this).file_id.decode(r)) {
            return err;
        }
        if (auto err = (*this).line.decode(r)) {
            return err;
        }
        if (auto err = (*this).column.decode(r)) {
            return err;
        }
        if (auto err = (*this).start.decode(r)) {
            return err;
        }
        if (auto err = (*this).end.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Identifier::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> Identifier::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StringLiteral::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).id.encode(w)) {
            return err;
        }
        if (auto err = (*this).body.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> StringLiteral::decode(::futils::binary::reader& r) {
        if (auto err = (*this).id.decode(r)) {
            return err;
        }
        if (auto err = (*this).body.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> DebugInfo::encode(::futils::binary::writer& w) const {
        if (auto err = (*this).len_files.encode(w)) {
            return err;
        }
        auto tmp_173_ = (*this).len_files.value();
        if (tmp_173_!=(*this).files.size()) {
            return ::futils::error::Error<>("encode: DebugInfo::files: dynamic length is not compatible with its length; tmp_173_!=(*this).files.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_174_ : (*this).files) {
            if (auto err = tmp_174_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).len_locs.encode(w)) {
            return err;
        }
        auto tmp_175_ = (*this).len_locs.value();
        if (tmp_175_!=(*this).locs.size()) {
            return ::futils::error::Error<>("encode: DebugInfo::locs: dynamic length is not compatible with its length; tmp_175_!=(*this).locs.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_176_ : (*this).locs) {
            if (auto err = tmp_176_.encode(w)) {
                return err;
            }
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> DebugInfo::decode(::futils::binary::reader& r) {
        if (auto err = (*this).len_files.decode(r)) {
            return err;
        }
        auto tmp_177_ = (*this).len_files.value();
        (*this).files.clear();
        for (size_t  tmp_179_= 0; tmp_179_<tmp_177_; ++tmp_179_ ) {
            String tmp_178_;
            if (auto err = tmp_178_.decode(r)) {
                return err;
            }
            (*this).files.push_back(std::move(tmp_178_));
        }
        if (auto err = (*this).len_locs.decode(r)) {
            return err;
        }
        auto tmp_180_ = (*this).len_locs.value();
        (*this).locs.clear();
        for (size_t  tmp_182_= 0; tmp_182_<tmp_180_; ++tmp_182_ ) {
            Loc tmp_181_;
            if (auto err = tmp_181_.decode(r)) {
                return err;
            }
            (*this).locs.push_back(std::move(tmp_181_));
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExtendedBinaryModule::encode(::futils::binary::writer& w) const {
        if (!w.write(::futils::view::rvec("EBMG", 4))) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::magic: write string failed; \"EBMG\"",::futils::error::Category::lib);
        }
        if (!::futils::binary::write_num(w,static_cast<std::uint8_t>((*this).version) ,true)) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::version: write std::uint8_t failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).max_id.encode(w)) {
            return err;
        }
        if (auto err = (*this).identifiers_len.encode(w)) {
            return err;
        }
        auto tmp_183_ = (*this).identifiers_len.value();
        if (tmp_183_!=(*this).identifiers.size()) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::identifiers: dynamic length is not compatible with its length; tmp_183_!=(*this).identifiers.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_184_ : (*this).identifiers) {
            if (auto err = tmp_184_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).strings_len.encode(w)) {
            return err;
        }
        auto tmp_185_ = (*this).strings_len.value();
        if (tmp_185_!=(*this).strings.size()) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::strings: dynamic length is not compatible with its length; tmp_185_!=(*this).strings.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_186_ : (*this).strings) {
            if (auto err = tmp_186_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).types_len.encode(w)) {
            return err;
        }
        auto tmp_187_ = (*this).types_len.value();
        if (tmp_187_!=(*this).types.size()) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::types: dynamic length is not compatible with its length; tmp_187_!=(*this).types.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_188_ : (*this).types) {
            if (auto err = tmp_188_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).statements_len.encode(w)) {
            return err;
        }
        auto tmp_189_ = (*this).statements_len.value();
        if (tmp_189_!=(*this).statements.size()) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::statements: dynamic length is not compatible with its length; tmp_189_!=(*this).statements.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_190_ : (*this).statements) {
            if (auto err = tmp_190_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).expressions_len.encode(w)) {
            return err;
        }
        auto tmp_191_ = (*this).expressions_len.value();
        if (tmp_191_!=(*this).expressions.size()) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::expressions: dynamic length is not compatible with its length; tmp_191_!=(*this).expressions.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_192_ : (*this).expressions) {
            if (auto err = tmp_192_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).aliases_len.encode(w)) {
            return err;
        }
        auto tmp_193_ = (*this).aliases_len.value();
        if (tmp_193_!=(*this).aliases.size()) {
            return ::futils::error::Error<>("encode: ExtendedBinaryModule::aliases: dynamic length is not compatible with its length; tmp_193_!=(*this).aliases.size()",::futils::error::Category::lib);
        }
        for (auto& tmp_194_ : (*this).aliases) {
            if (auto err = tmp_194_.encode(w)) {
                return err;
            }
        }
        if (auto err = (*this).debug_info.encode(w)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
    ::futils::error::Error<> ExtendedBinaryModule::decode(::futils::binary::reader& r) {
        ::futils::view::rvec tmp_195_ = {};
        if (!r.read_direct(tmp_195_, 4)) {
            return ::futils::error::Error<>("decode: ExtendedBinaryModule::magic: read string failed",::futils::error::Category::lib);
        }
        if (tmp_195_ != ::futils::view::rvec("EBMG",4)) {
            return ::futils::error::Error<>("decode: ExtendedBinaryModule::magic: read string failed; not match to \"EBMG\"",::futils::error::Category::lib);
        }
        if (!::futils::binary::read_num(r,(*this).version ,true)) {
            return ::futils::error::Error<>("decode: ExtendedBinaryModule::version: read int failed",::futils::error::Category::lib);
        }
        if (auto err = (*this).max_id.decode(r)) {
            return err;
        }
        if (auto err = (*this).identifiers_len.decode(r)) {
            return err;
        }
        auto tmp_196_ = (*this).identifiers_len.value();
        (*this).identifiers.clear();
        for (size_t  tmp_198_= 0; tmp_198_<tmp_196_; ++tmp_198_ ) {
            Identifier tmp_197_;
            if (auto err = tmp_197_.decode(r)) {
                return err;
            }
            (*this).identifiers.push_back(std::move(tmp_197_));
        }
        if (auto err = (*this).strings_len.decode(r)) {
            return err;
        }
        auto tmp_199_ = (*this).strings_len.value();
        (*this).strings.clear();
        for (size_t  tmp_201_= 0; tmp_201_<tmp_199_; ++tmp_201_ ) {
            StringLiteral tmp_200_;
            if (auto err = tmp_200_.decode(r)) {
                return err;
            }
            (*this).strings.push_back(std::move(tmp_200_));
        }
        if (auto err = (*this).types_len.decode(r)) {
            return err;
        }
        auto tmp_202_ = (*this).types_len.value();
        (*this).types.clear();
        for (size_t  tmp_204_= 0; tmp_204_<tmp_202_; ++tmp_204_ ) {
            Type tmp_203_;
            if (auto err = tmp_203_.decode(r)) {
                return err;
            }
            (*this).types.push_back(std::move(tmp_203_));
        }
        if (auto err = (*this).statements_len.decode(r)) {
            return err;
        }
        auto tmp_205_ = (*this).statements_len.value();
        (*this).statements.clear();
        for (size_t  tmp_207_= 0; tmp_207_<tmp_205_; ++tmp_207_ ) {
            Statement tmp_206_;
            if (auto err = tmp_206_.decode(r)) {
                return err;
            }
            (*this).statements.push_back(std::move(tmp_206_));
        }
        if (auto err = (*this).expressions_len.decode(r)) {
            return err;
        }
        auto tmp_208_ = (*this).expressions_len.value();
        (*this).expressions.clear();
        for (size_t  tmp_210_= 0; tmp_210_<tmp_208_; ++tmp_210_ ) {
            Expression tmp_209_;
            if (auto err = tmp_209_.decode(r)) {
                return err;
            }
            (*this).expressions.push_back(std::move(tmp_209_));
        }
        if (auto err = (*this).aliases_len.decode(r)) {
            return err;
        }
        auto tmp_211_ = (*this).aliases_len.value();
        (*this).aliases.clear();
        for (size_t  tmp_213_= 0; tmp_213_<tmp_211_; ++tmp_213_ ) {
            RefAlias tmp_212_;
            if (auto err = tmp_212_.decode(r)) {
                return err;
            }
            (*this).aliases.push_back(std::move(tmp_212_));
        }
        if (auto err = (*this).debug_info.decode(r)) {
            return err;
        }
        return ::futils::error::Error<>();
    }
} // namespace ebm

