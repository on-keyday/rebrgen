/*DO NOT EDIT BELOW SECTION MANUALLY*/
/*license*/
// Template generated by ebmcodegen at https://github.com/on-keyday/rebrgen
/*
  Name: Statement_LOOP_STATEMENT
  Available variables:
    *this: Visitor
    module_: MappingTable
    item_id: StatementRef
    kind: StatementKind
    loop: LoopStatement
      loop_type: LoopType
      collection: *ExpressionRef
      condition: *Condition
        cond: ExpressionRef
      increment: *StatementRef
      init: *StatementRef
      item_var: *StatementRef
      body: StatementRef
      lowered_statement: LoweredStatementRef
      next_lowered_loop: LoweredStatementRef
*/
/*DO NOT EDIT ABOVE SECTION MANUALLY*/
/*license*/
if (!is_nil(loop.lowered_statement.id)) {
    return visit_Statement(*this, loop.lowered_statement.id);
}
CodeWriter w;
if (auto init = loop.init(); init && init->id.value() != 0) {
    MAYBE(init_s, visit_Statement(*this, *init));
    merge_result(*this, w, init_s);
}
std::string cond;
CodeWriter condition_related;
if (auto c = loop.condition()) {
    auto added = add_writer();
    MAYBE(expr, visit_Expression(*this, c->cond));
    cond = std::move(expr.to_string());
    MAYBE(got, get_writer());
    condition_related = std::move(got);
    w.write(condition_related);
}
else {
    MAYBE(true_, get_bool_literal(*this, true));
    cond = std::move(true_);
}

if (use_brace_for_condition) {
    w.writeln("while (", tidy_condition_brace(std::move(cond)), ") ", begin_block);
}
else {
    w.writeln("while ", tidy_condition_brace(std::move(cond)), " ", begin_block);
}
{
    auto body_indent = w.indent_scope();
    MAYBE(body, visit_Statement(*this, loop.body));
    merge_result(*this, w, body);
    if (auto iter = loop.increment()) {
        MAYBE(step, visit_Statement(*this, *iter));
        merge_result(*this, w, step);
    }
    w.write(condition_related);
}
w.writeln(end_block);

return w;