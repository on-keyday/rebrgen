/*license*/
// Code generated by ebmcodegen at https://github.com/on-keyday/rebrgen
#include <ebm/extended_binary_module.hpp>
#include <json/convert_json.h>
#include <json/json.h>
namespace ebm {
    bool from_json(AnyRef& obj, const futils::json::JSON& j) {
        std::uint64_t id;
        if(!futils::json::convert_from_json(j, id)) {
            return false;
        }
        obj = AnyRef{id};
        return true;
    }
    
    bool from_json(AssertDesc& obj, const futils::json::JSON& j) {
        if (auto got = j.at("condition")) {
            if(!futils::json::convert_from_json(*got, obj.condition)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("lowered_statement")) {
            if(!futils::json::convert_from_json(*got, obj.lowered_statement)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(Block& obj, const futils::json::JSON& j) {
        if (auto got = j.at("len")) {
            if(!futils::json::convert_from_json(*got, obj.len)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("container")) {
            if(!futils::json::convert_from_json(*got, obj.container)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(CallDesc& obj, const futils::json::JSON& j) {
        if (auto got = j.at("callee")) {
            if(!futils::json::convert_from_json(*got, obj.callee)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("arguments")) {
            if(!futils::json::convert_from_json(*got, obj.arguments)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(CompositeFieldDecl& obj, const futils::json::JSON& j) {
        if (auto got = j.at("fields")) {
            if(!futils::json::convert_from_json(*got, obj.fields)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("composite_type")) {
            if(!futils::json::convert_from_json(*got, obj.composite_type)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(Condition& obj, const futils::json::JSON& j) {
        if (auto got = j.at("cond")) {
            if(!futils::json::convert_from_json(*got, obj.cond)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(DebugInfo& obj, const futils::json::JSON& j) {
        if (auto got = j.at("len_files")) {
            if(!futils::json::convert_from_json(*got, obj.len_files)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("files")) {
            if(!futils::json::convert_from_json(*got, obj.files)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("len_locs")) {
            if(!futils::json::convert_from_json(*got, obj.len_locs)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("locs")) {
            if(!futils::json::convert_from_json(*got, obj.locs)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(EndianVariable& obj, const futils::json::JSON& j) {
        if (auto got = j.at("endian")) {
            Endian tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.endian(std::move(tmp))) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("reserved")) {
            std::uint8_t tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.reserved(std::move(tmp))) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("dynamic_expr")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.dynamic_expr(std::move(tmp))) {
                return false;
            }
        }
        return true;
    }
    
    bool from_json(EnumDecl& obj, const futils::json::JSON& j) {
        if (auto got = j.at("name")) {
            if(!futils::json::convert_from_json(*got, obj.name)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("base_type")) {
            if(!futils::json::convert_from_json(*got, obj.base_type)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("members")) {
            if(!futils::json::convert_from_json(*got, obj.members)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(EnumMemberDecl& obj, const futils::json::JSON& j) {
        if (auto got = j.at("name")) {
            if(!futils::json::convert_from_json(*got, obj.name)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("value")) {
            if(!futils::json::convert_from_json(*got, obj.value)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("string_repr")) {
            if(!futils::json::convert_from_json(*got, obj.string_repr)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(ErrorReport& obj, const futils::json::JSON& j) {
        if (auto got = j.at("message")) {
            if(!futils::json::convert_from_json(*got, obj.message)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("arguments")) {
            if(!futils::json::convert_from_json(*got, obj.arguments)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(Expression& obj, const futils::json::JSON& j) {
        if (auto got = j.at("id")) {
            if(!futils::json::convert_from_json(*got, obj.id)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("body")) {
            if(!futils::json::convert_from_json(*got, obj.body)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(ExpressionBody& obj, const futils::json::JSON& j) {
        if (auto got = j.at("type")) {
            if(!futils::json::convert_from_json(*got, obj.type)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("kind")) {
            if(!futils::json::convert_from_json(*got, obj.kind)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("array_expr")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.array_expr(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("base")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.base(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("bool_value")) {
            std::uint8_t tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.bool_value(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("bop")) {
            BinaryOp tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.bop(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("call_desc")) {
            CallDesc tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.call_desc(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("cast_kind")) {
            CastType tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.cast_kind(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("char_value")) {
            Varint tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.char_value(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("condition")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.condition(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("conditional_stmt")) {
            StatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.conditional_stmt(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("else_")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.else_(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("end")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.end(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("endian_expr")) {
            StatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.endian_expr(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("enum_decl")) {
            StatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.enum_decl(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("from_type")) {
            TypeRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.from_type(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("id")) {
            StatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.id(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("index")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.index(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("int64_value")) {
            std::uint64_t tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.int64_value(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("int_value")) {
            Varint tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.int_value(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("io_ref")) {
            StatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.io_ref(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("io_statement")) {
            StatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.io_statement(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("left")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.left(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("lowered_expr")) {
            LoweredExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.lowered_expr(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("member")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.member(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("num_bytes")) {
            Size tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.num_bytes(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("operand")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.operand(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("or_cond")) {
            Expressions tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.or_cond(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("right")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.right(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("setter_status")) {
            SetterStatus tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.setter_status(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("source_expr")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.source_expr(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("start")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.start(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("stream_type")) {
            StreamType tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.stream_type(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("string_value")) {
            StringRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.string_value(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("sub_range")) {
            StatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.sub_range(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("target_expr")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.target_expr(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("target_stmt")) {
            StatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.target_stmt(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("then")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.then(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("type_ref")) {
            TypeRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.type_ref(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("unit")) {
            SizeUnit tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.unit(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("uop")) {
            UnaryOp tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.uop(std::move(tmp))) {
                return false;
            }
        }
        return true;
    }
    
    bool from_json(ExpressionRef& obj, const futils::json::JSON& j) {
        std::uint64_t id;
        if(!futils::json::convert_from_json(j, id)) {
            return false;
        }
        obj = ExpressionRef{id};
        return true;
    }
    
    bool from_json(Expressions& obj, const futils::json::JSON& j) {
        if (auto got = j.at("len")) {
            if(!futils::json::convert_from_json(*got, obj.len)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("container")) {
            if(!futils::json::convert_from_json(*got, obj.container)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(ExtendedBinaryModule& obj, const futils::json::JSON& j) {
        if (auto got = j.at("version")) {
            if(!futils::json::convert_from_json(*got, obj.version)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("max_id")) {
            if(!futils::json::convert_from_json(*got, obj.max_id)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("identifiers_len")) {
            if(!futils::json::convert_from_json(*got, obj.identifiers_len)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("identifiers")) {
            if(!futils::json::convert_from_json(*got, obj.identifiers)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("strings_len")) {
            if(!futils::json::convert_from_json(*got, obj.strings_len)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("strings")) {
            if(!futils::json::convert_from_json(*got, obj.strings)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("types_len")) {
            if(!futils::json::convert_from_json(*got, obj.types_len)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("types")) {
            if(!futils::json::convert_from_json(*got, obj.types)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("statements_len")) {
            if(!futils::json::convert_from_json(*got, obj.statements_len)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("statements")) {
            if(!futils::json::convert_from_json(*got, obj.statements)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("expressions_len")) {
            if(!futils::json::convert_from_json(*got, obj.expressions_len)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("expressions")) {
            if(!futils::json::convert_from_json(*got, obj.expressions)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("aliases_len")) {
            if(!futils::json::convert_from_json(*got, obj.aliases_len)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("aliases")) {
            if(!futils::json::convert_from_json(*got, obj.aliases)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("debug_info")) {
            if(!futils::json::convert_from_json(*got, obj.debug_info)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(FieldDecl& obj, const futils::json::JSON& j) {
        if (auto got = j.at("name")) {
            if(!futils::json::convert_from_json(*got, obj.name)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("field_type")) {
            if(!futils::json::convert_from_json(*got, obj.field_type)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("parent_struct")) {
            if(!futils::json::convert_from_json(*got, obj.parent_struct)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("is_state_variable")) {
            bool tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            obj.is_state_variable(std::move(tmp));
        }
        else {
            return false;
        }
        if (auto got = j.at("inner_composite")) {
            bool tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            obj.inner_composite(std::move(tmp));
        }
        else {
            return false;
        }
        if (auto got = j.at("reserved")) {
            std::uint8_t tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.reserved(std::move(tmp))) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("composite_field")) {
            StatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.composite_field(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("composite_getter")) {
            LoweredStatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.composite_getter(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("composite_setter")) {
            LoweredStatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.composite_setter(std::move(tmp))) {
                return false;
            }
        }
        return true;
    }
    
    bool from_json(FunctionDecl& obj, const futils::json::JSON& j) {
        if (auto got = j.at("name")) {
            if(!futils::json::convert_from_json(*got, obj.name)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("return_type")) {
            if(!futils::json::convert_from_json(*got, obj.return_type)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("params")) {
            if(!futils::json::convert_from_json(*got, obj.params)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("parent_format")) {
            if(!futils::json::convert_from_json(*got, obj.parent_format)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("kind")) {
            if(!futils::json::convert_from_json(*got, obj.kind)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("body")) {
            if(!futils::json::convert_from_json(*got, obj.body)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(IOAttribute& obj, const futils::json::JSON& j) {
        if (auto got = j.at("endian")) {
            Endian tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.endian(std::move(tmp))) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("sign")) {
            bool tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            obj.sign(std::move(tmp));
        }
        else {
            return false;
        }
        if (auto got = j.at("is_peek")) {
            bool tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            obj.is_peek(std::move(tmp));
        }
        else {
            return false;
        }
        if (auto got = j.at("has_lowered_statement")) {
            bool tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            obj.has_lowered_statement(std::move(tmp));
        }
        else {
            return false;
        }
        if (auto got = j.at("reserved")) {
            std::uint8_t tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.reserved(std::move(tmp))) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("dynamic_ref")) {
            StatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.dynamic_ref(std::move(tmp))) {
                return false;
            }
        }
        return true;
    }
    
    bool from_json(IOData& obj, const futils::json::JSON& j) {
        if (auto got = j.at("io_ref")) {
            if(!futils::json::convert_from_json(*got, obj.io_ref)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("target")) {
            if(!futils::json::convert_from_json(*got, obj.target)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("data_type")) {
            if(!futils::json::convert_from_json(*got, obj.data_type)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("attribute")) {
            if(!futils::json::convert_from_json(*got, obj.attribute)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("size")) {
            if(!futils::json::convert_from_json(*got, obj.size)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("lowered_statement")) {
            LoweredIOStatement tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.lowered_statement(std::move(tmp))) {
                return false;
            }
        }
        return true;
    }
    
    bool from_json(Identifier& obj, const futils::json::JSON& j) {
        if (auto got = j.at("id")) {
            if(!futils::json::convert_from_json(*got, obj.id)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("body")) {
            if(!futils::json::convert_from_json(*got, obj.body)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(IdentifierRef& obj, const futils::json::JSON& j) {
        std::uint64_t id;
        if(!futils::json::convert_from_json(j, id)) {
            return false;
        }
        obj = IdentifierRef{id};
        return true;
    }
    
    bool from_json(IfStatement& obj, const futils::json::JSON& j) {
        if (auto got = j.at("condition")) {
            if(!futils::json::convert_from_json(*got, obj.condition)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("then_block")) {
            if(!futils::json::convert_from_json(*got, obj.then_block)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("else_block")) {
            if(!futils::json::convert_from_json(*got, obj.else_block)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(ImportDecl& obj, const futils::json::JSON& j) {
        if (auto got = j.at("name")) {
            if(!futils::json::convert_from_json(*got, obj.name)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("path")) {
            if(!futils::json::convert_from_json(*got, obj.path)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("program")) {
            if(!futils::json::convert_from_json(*got, obj.program)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(InitCheck& obj, const futils::json::JSON& j) {
        if (auto got = j.at("init_check_type")) {
            if(!futils::json::convert_from_json(*got, obj.init_check_type)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("target_field")) {
            if(!futils::json::convert_from_json(*got, obj.target_field)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("expect_value")) {
            if(!futils::json::convert_from_json(*got, obj.expect_value)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(Loc& obj, const futils::json::JSON& j) {
        if (auto got = j.at("ident")) {
            if(!futils::json::convert_from_json(*got, obj.ident)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("file_id")) {
            if(!futils::json::convert_from_json(*got, obj.file_id)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("line")) {
            if(!futils::json::convert_from_json(*got, obj.line)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("column")) {
            if(!futils::json::convert_from_json(*got, obj.column)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("start")) {
            if(!futils::json::convert_from_json(*got, obj.start)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("end")) {
            if(!futils::json::convert_from_json(*got, obj.end)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(LoopFlowControl& obj, const futils::json::JSON& j) {
        if (auto got = j.at("related_statement")) {
            if(!futils::json::convert_from_json(*got, obj.related_statement)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(LoopStatement& obj, const futils::json::JSON& j) {
        if (auto got = j.at("loop_type")) {
            if(!futils::json::convert_from_json(*got, obj.loop_type)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("collection")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.collection(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("condition")) {
            Condition tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.condition(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("increment")) {
            StatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.increment(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("init")) {
            StatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.init(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("item_var")) {
            StatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.item_var(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("body")) {
            if(!futils::json::convert_from_json(*got, obj.body)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("lowered_statement")) {
            if(!futils::json::convert_from_json(*got, obj.lowered_statement)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("next_lowered_loop")) {
            if(!futils::json::convert_from_json(*got, obj.next_lowered_loop)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(LoweredExpressionRef& obj, const futils::json::JSON& j) {
        if (auto got = j.at("id")) {
            if(!futils::json::convert_from_json(*got, obj.id)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(LoweredIOStatement& obj, const futils::json::JSON& j) {
        if (auto got = j.at("lowering_type")) {
            if(!futils::json::convert_from_json(*got, obj.lowering_type)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("io_statement")) {
            if(!futils::json::convert_from_json(*got, obj.io_statement)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(LoweredIOStatements& obj, const futils::json::JSON& j) {
        if (auto got = j.at("len")) {
            if(!futils::json::convert_from_json(*got, obj.len)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("container")) {
            if(!futils::json::convert_from_json(*got, obj.container)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(LoweredStatementRef& obj, const futils::json::JSON& j) {
        if (auto got = j.at("id")) {
            if(!futils::json::convert_from_json(*got, obj.id)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(MatchBranch& obj, const futils::json::JSON& j) {
        if (auto got = j.at("condition")) {
            if(!futils::json::convert_from_json(*got, obj.condition)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("body")) {
            if(!futils::json::convert_from_json(*got, obj.body)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(MatchStatement& obj, const futils::json::JSON& j) {
        if (auto got = j.at("target")) {
            if(!futils::json::convert_from_json(*got, obj.target)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("is_exhaustive")) {
            bool tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            obj.is_exhaustive(std::move(tmp));
        }
        else {
            return false;
        }
        if (auto got = j.at("reserved")) {
            std::uint8_t tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.reserved(std::move(tmp))) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("branches")) {
            if(!futils::json::convert_from_json(*got, obj.branches)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("lowered_if_statement")) {
            if(!futils::json::convert_from_json(*got, obj.lowered_if_statement)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(Metadata& obj, const futils::json::JSON& j) {
        if (auto got = j.at("name")) {
            if(!futils::json::convert_from_json(*got, obj.name)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("values")) {
            if(!futils::json::convert_from_json(*got, obj.values)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(ParameterDecl& obj, const futils::json::JSON& j) {
        if (auto got = j.at("name")) {
            if(!futils::json::convert_from_json(*got, obj.name)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("param_type")) {
            if(!futils::json::convert_from_json(*got, obj.param_type)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("is_state_variable")) {
            bool tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            obj.is_state_variable(std::move(tmp));
        }
        else {
            return false;
        }
        if (auto got = j.at("reserved")) {
            std::uint8_t tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.reserved(std::move(tmp))) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(PropertyDecl& obj, const futils::json::JSON& j) {
        if (auto got = j.at("name")) {
            if(!futils::json::convert_from_json(*got, obj.name)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("parent_format")) {
            if(!futils::json::convert_from_json(*got, obj.parent_format)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("property_type")) {
            if(!futils::json::convert_from_json(*got, obj.property_type)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("merge_mode")) {
            if(!futils::json::convert_from_json(*got, obj.merge_mode)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("cond")) {
            if(!futils::json::convert_from_json(*got, obj.cond)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("members")) {
            if(!futils::json::convert_from_json(*got, obj.members)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("setter_function")) {
            if(!futils::json::convert_from_json(*got, obj.setter_function)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("getter_function")) {
            if(!futils::json::convert_from_json(*got, obj.getter_function)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("derived_from")) {
            Block tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.derived_from(std::move(tmp))) {
                return false;
            }
        }
        return true;
    }
    
    bool from_json(PropertyMemberDecl& obj, const futils::json::JSON& j) {
        if (auto got = j.at("condition")) {
            if(!futils::json::convert_from_json(*got, obj.condition)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("field")) {
            if(!futils::json::convert_from_json(*got, obj.field)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(RefAlias& obj, const futils::json::JSON& j) {
        if (auto got = j.at("hint")) {
            if(!futils::json::convert_from_json(*got, obj.hint)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("from")) {
            if(!futils::json::convert_from_json(*got, obj.from)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("to")) {
            if(!futils::json::convert_from_json(*got, obj.to)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(Size& obj, const futils::json::JSON& j) {
        if (auto got = j.at("unit")) {
            if(!futils::json::convert_from_json(*got, obj.unit)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("ref")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.ref(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("size")) {
            Varint tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.size(std::move(tmp))) {
                return false;
            }
        }
        return true;
    }
    
    bool from_json(Statement& obj, const futils::json::JSON& j) {
        if (auto got = j.at("id")) {
            if(!futils::json::convert_from_json(*got, obj.id)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("body")) {
            if(!futils::json::convert_from_json(*got, obj.body)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(StatementBody& obj, const futils::json::JSON& j) {
        if (auto got = j.at("kind")) {
            if(!futils::json::convert_from_json(*got, obj.kind)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("assert_desc")) {
            AssertDesc tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.assert_desc(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("block")) {
            Block tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.block(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("break_")) {
            LoopFlowControl tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.break_(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("composite_field_decl")) {
            CompositeFieldDecl tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.composite_field_decl(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("continue_")) {
            LoopFlowControl tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.continue_(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("endian_variable")) {
            EndianVariable tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.endian_variable(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("enum_decl")) {
            EnumDecl tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.enum_decl(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("enum_member_decl")) {
            EnumMemberDecl tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.enum_member_decl(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("error_report")) {
            ErrorReport tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.error_report(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("expression")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.expression(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("field_decl")) {
            FieldDecl tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.field_decl(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("func_decl")) {
            FunctionDecl tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.func_decl(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("if_statement")) {
            IfStatement tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.if_statement(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("import_decl")) {
            ImportDecl tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.import_decl(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("init_check")) {
            InitCheck tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.init_check(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("loop")) {
            LoopStatement tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.loop(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("lowered_io_statements")) {
            LoweredIOStatements tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.lowered_io_statements(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("match_branch")) {
            MatchBranch tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.match_branch(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("match_statement")) {
            MatchStatement tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.match_statement(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("metadata")) {
            Metadata tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.metadata(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("param_decl")) {
            ParameterDecl tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.param_decl(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("previous_assignment")) {
            StatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.previous_assignment(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("property_decl")) {
            PropertyDecl tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.property_decl(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("property_member_decl")) {
            PropertyMemberDecl tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.property_member_decl(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("read_data")) {
            IOData tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.read_data(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("struct_decl")) {
            StructDecl tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.struct_decl(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("sub_byte_range")) {
            SubByteRange tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.sub_byte_range(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("target")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.target(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("value")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.value(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("var_decl")) {
            VariableDecl tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.var_decl(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("write_data")) {
            IOData tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.write_data(std::move(tmp))) {
                return false;
            }
        }
        return true;
    }
    
    bool from_json(StatementRef& obj, const futils::json::JSON& j) {
        std::uint64_t id;
        if(!futils::json::convert_from_json(j, id)) {
            return false;
        }
        obj = StatementRef{id};
        return true;
    }
    
    bool from_json(String& obj, const futils::json::JSON& j) {
        if (auto got = j.at("length")) {
            if(!futils::json::convert_from_json(*got, obj.length)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("data")) {
            if(!futils::json::convert_from_json(*got, obj.data)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(StringLiteral& obj, const futils::json::JSON& j) {
        if (auto got = j.at("id")) {
            if(!futils::json::convert_from_json(*got, obj.id)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("body")) {
            if(!futils::json::convert_from_json(*got, obj.body)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(StringRef& obj, const futils::json::JSON& j) {
        std::uint64_t id;
        if(!futils::json::convert_from_json(j, id)) {
            return false;
        }
        obj = StringRef{id};
        return true;
    }
    
    bool from_json(StructDecl& obj, const futils::json::JSON& j) {
        if (auto got = j.at("name")) {
            if(!futils::json::convert_from_json(*got, obj.name)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("fields")) {
            if(!futils::json::convert_from_json(*got, obj.fields)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("encode_fn")) {
            if(!futils::json::convert_from_json(*got, obj.encode_fn)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("decode_fn")) {
            if(!futils::json::convert_from_json(*got, obj.decode_fn)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("is_recursive")) {
            bool tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            obj.is_recursive(std::move(tmp));
        }
        else {
            return false;
        }
        if (auto got = j.at("is_fixed_size")) {
            bool tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            obj.is_fixed_size(std::move(tmp));
        }
        else {
            return false;
        }
        if (auto got = j.at("has_related_variant")) {
            bool tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            obj.has_related_variant(std::move(tmp));
        }
        else {
            return false;
        }
        if (auto got = j.at("reserved")) {
            std::uint8_t tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.reserved(std::move(tmp))) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("related_variant")) {
            TypeRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.related_variant(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("size")) {
            Size tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.size(std::move(tmp))) {
                return false;
            }
        }
        return true;
    }
    
    bool from_json(SubByteRange& obj, const futils::json::JSON& j) {
        if (auto got = j.at("stream_type")) {
            if(!futils::json::convert_from_json(*got, obj.stream_type)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("range_type")) {
            if(!futils::json::convert_from_json(*got, obj.range_type)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("expression")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.expression(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("length")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.length(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("offset")) {
            ExpressionRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.offset(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("io_ref")) {
            if(!futils::json::convert_from_json(*got, obj.io_ref)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("parent_io_ref")) {
            if(!futils::json::convert_from_json(*got, obj.parent_io_ref)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("io_statement")) {
            if(!futils::json::convert_from_json(*got, obj.io_statement)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(Type& obj, const futils::json::JSON& j) {
        if (auto got = j.at("id")) {
            if(!futils::json::convert_from_json(*got, obj.id)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("body")) {
            if(!futils::json::convert_from_json(*got, obj.body)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(TypeBody& obj, const futils::json::JSON& j) {
        if (auto got = j.at("kind")) {
            if(!futils::json::convert_from_json(*got, obj.kind)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("base_type")) {
            TypeRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.base_type(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("common_type")) {
            TypeRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.common_type(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("element_type")) {
            TypeRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.element_type(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("id")) {
            StatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.id(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("inner_type")) {
            TypeRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.inner_type(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("length")) {
            Varint tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.length(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("members")) {
            Types tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.members(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("params")) {
            Types tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.params(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("pointee_type")) {
            TypeRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.pointee_type(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("related_field")) {
            StatementRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.related_field(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("return_type")) {
            TypeRef tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.return_type(std::move(tmp))) {
                return false;
            }
        }
        if (auto got = j.at("size")) {
            Varint tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.size(std::move(tmp))) {
                return false;
            }
        }
        return true;
    }
    
    bool from_json(TypeRef& obj, const futils::json::JSON& j) {
        std::uint64_t id;
        if(!futils::json::convert_from_json(j, id)) {
            return false;
        }
        obj = TypeRef{id};
        return true;
    }
    
    bool from_json(Types& obj, const futils::json::JSON& j) {
        if (auto got = j.at("len")) {
            if(!futils::json::convert_from_json(*got, obj.len)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("container")) {
            if(!futils::json::convert_from_json(*got, obj.container)) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(VariableDecl& obj, const futils::json::JSON& j) {
        if (auto got = j.at("name")) {
            if(!futils::json::convert_from_json(*got, obj.name)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("var_type")) {
            if(!futils::json::convert_from_json(*got, obj.var_type)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("initial_value")) {
            if(!futils::json::convert_from_json(*got, obj.initial_value)) {
                return false;
            }
        }
        else {
            return false;
        }
        if (auto got = j.at("is_constant")) {
            bool tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            obj.is_constant(std::move(tmp));
        }
        else {
            return false;
        }
        if (auto got = j.at("is_reference")) {
            bool tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            obj.is_reference(std::move(tmp));
        }
        else {
            return false;
        }
        if (auto got = j.at("reserved")) {
            std::uint8_t tmp;
            if(!futils::json::convert_from_json(*got, tmp)) {
                return false;
            }
            if(!obj.reserved(std::move(tmp))) {
                return false;
            }
        }
        else {
            return false;
        }
        return true;
    }
    
    bool from_json(Varint& obj, const futils::json::JSON& j) {
        std::uint64_t id;
        if(!futils::json::convert_from_json(j, id)) {
            return false;
        }
        obj = Varint{id};
        return true;
    }
    
    bool from_json(AliasHint& obj, const futils::json::JSON& j) {
        if (auto got = j.get_holder().as_str()) {
            auto& s = *got;
            if (s == "IDENTIFIER") {
                obj = AliasHint::IDENTIFIER;
                return true;
            }
            if (s == "STRING") {
                obj = AliasHint::STRING;
                return true;
            }
            if (s == "TYPE") {
                obj = AliasHint::TYPE;
                return true;
            }
            if (s == "EXPRESSION") {
                obj = AliasHint::EXPRESSION;
                return true;
            }
            if (s == "STATEMENT") {
                obj = AliasHint::STATEMENT;
                return true;
            }
            if (s == "ALIAS") {
                obj = AliasHint::ALIAS;
                return true;
            }
            return false;
        }
        return false;
    }
    
    bool from_json(BinaryOp& obj, const futils::json::JSON& j) {
        if (auto got = j.get_holder().as_str()) {
            auto& s = *got;
            if (s == "mul") {
                obj = BinaryOp::mul;
                return true;
            }
            if (s == "div") {
                obj = BinaryOp::div;
                return true;
            }
            if (s == "mod") {
                obj = BinaryOp::mod;
                return true;
            }
            if (s == "left_shift") {
                obj = BinaryOp::left_shift;
                return true;
            }
            if (s == "right_shift") {
                obj = BinaryOp::right_shift;
                return true;
            }
            if (s == "bit_and") {
                obj = BinaryOp::bit_and;
                return true;
            }
            if (s == "add") {
                obj = BinaryOp::add;
                return true;
            }
            if (s == "sub") {
                obj = BinaryOp::sub;
                return true;
            }
            if (s == "bit_or") {
                obj = BinaryOp::bit_or;
                return true;
            }
            if (s == "bit_xor") {
                obj = BinaryOp::bit_xor;
                return true;
            }
            if (s == "equal") {
                obj = BinaryOp::equal;
                return true;
            }
            if (s == "not_equal") {
                obj = BinaryOp::not_equal;
                return true;
            }
            if (s == "less") {
                obj = BinaryOp::less;
                return true;
            }
            if (s == "less_or_eq") {
                obj = BinaryOp::less_or_eq;
                return true;
            }
            if (s == "greater") {
                obj = BinaryOp::greater;
                return true;
            }
            if (s == "greater_or_eq") {
                obj = BinaryOp::greater_or_eq;
                return true;
            }
            if (s == "logical_and") {
                obj = BinaryOp::logical_and;
                return true;
            }
            if (s == "logical_or") {
                obj = BinaryOp::logical_or;
                return true;
            }
            return false;
        }
        return false;
    }
    
    bool from_json(CastType& obj, const futils::json::JSON& j) {
        if (auto got = j.get_holder().as_str()) {
            auto& s = *got;
            if (s == "ENUM_TO_INT") {
                obj = CastType::ENUM_TO_INT;
                return true;
            }
            if (s == "INT_TO_ENUM") {
                obj = CastType::INT_TO_ENUM;
                return true;
            }
            if (s == "FLOAT_TO_INT_BIT") {
                obj = CastType::FLOAT_TO_INT_BIT;
                return true;
            }
            if (s == "INT_TO_FLOAT_BIT") {
                obj = CastType::INT_TO_FLOAT_BIT;
                return true;
            }
            if (s == "VECTOR_TO_ARRAY") {
                obj = CastType::VECTOR_TO_ARRAY;
                return true;
            }
            if (s == "ARRAY_TO_VECTOR") {
                obj = CastType::ARRAY_TO_VECTOR;
                return true;
            }
            if (s == "INT_TO_VECTOR") {
                obj = CastType::INT_TO_VECTOR;
                return true;
            }
            if (s == "INT_TO_ARRAY") {
                obj = CastType::INT_TO_ARRAY;
                return true;
            }
            if (s == "SMALL_INT_TO_LARGE_INT") {
                obj = CastType::SMALL_INT_TO_LARGE_INT;
                return true;
            }
            if (s == "LARGE_INT_TO_SMALL_INT") {
                obj = CastType::LARGE_INT_TO_SMALL_INT;
                return true;
            }
            if (s == "SIGNED_TO_UNSIGNED") {
                obj = CastType::SIGNED_TO_UNSIGNED;
                return true;
            }
            if (s == "UNSIGNED_TO_SIGNED") {
                obj = CastType::UNSIGNED_TO_SIGNED;
                return true;
            }
            if (s == "BOOL_TO_INT") {
                obj = CastType::BOOL_TO_INT;
                return true;
            }
            if (s == "INT_TO_BOOL") {
                obj = CastType::INT_TO_BOOL;
                return true;
            }
            if (s == "STRUCT_TO_RECURSIVE_STRUCT") {
                obj = CastType::STRUCT_TO_RECURSIVE_STRUCT;
                return true;
            }
            if (s == "RECURSIVE_STRUCT_TO_STRUCT") {
                obj = CastType::RECURSIVE_STRUCT_TO_STRUCT;
                return true;
            }
            if (s == "OTHER") {
                obj = CastType::OTHER;
                return true;
            }
            return false;
        }
        return false;
    }
    
    bool from_json(Endian& obj, const futils::json::JSON& j) {
        if (auto got = j.get_holder().as_str()) {
            auto& s = *got;
            if (s == "unspec") {
                obj = Endian::unspec;
                return true;
            }
            if (s == "big") {
                obj = Endian::big;
                return true;
            }
            if (s == "little") {
                obj = Endian::little;
                return true;
            }
            if (s == "dynamic") {
                obj = Endian::dynamic;
                return true;
            }
            if (s == "native") {
                obj = Endian::native;
                return true;
            }
            return false;
        }
        return false;
    }
    
    bool from_json(ExpressionKind& obj, const futils::json::JSON& j) {
        if (auto got = j.get_holder().as_str()) {
            auto& s = *got;
            if (s == "LITERAL_INT") {
                obj = ExpressionKind::LITERAL_INT;
                return true;
            }
            if (s == "LITERAL_INT64") {
                obj = ExpressionKind::LITERAL_INT64;
                return true;
            }
            if (s == "LITERAL_BOOL") {
                obj = ExpressionKind::LITERAL_BOOL;
                return true;
            }
            if (s == "LITERAL_STRING") {
                obj = ExpressionKind::LITERAL_STRING;
                return true;
            }
            if (s == "LITERAL_TYPE") {
                obj = ExpressionKind::LITERAL_TYPE;
                return true;
            }
            if (s == "LITERAL_CHAR") {
                obj = ExpressionKind::LITERAL_CHAR;
                return true;
            }
            if (s == "IDENTIFIER") {
                obj = ExpressionKind::IDENTIFIER;
                return true;
            }
            if (s == "BINARY_OP") {
                obj = ExpressionKind::BINARY_OP;
                return true;
            }
            if (s == "UNARY_OP") {
                obj = ExpressionKind::UNARY_OP;
                return true;
            }
            if (s == "CALL") {
                obj = ExpressionKind::CALL;
                return true;
            }
            if (s == "INDEX_ACCESS") {
                obj = ExpressionKind::INDEX_ACCESS;
                return true;
            }
            if (s == "MEMBER_ACCESS") {
                obj = ExpressionKind::MEMBER_ACCESS;
                return true;
            }
            if (s == "ENUM_MEMBER") {
                obj = ExpressionKind::ENUM_MEMBER;
                return true;
            }
            if (s == "TYPE_CAST") {
                obj = ExpressionKind::TYPE_CAST;
                return true;
            }
            if (s == "RANGE") {
                obj = ExpressionKind::RANGE;
                return true;
            }
            if (s == "DEFAULT_VALUE") {
                obj = ExpressionKind::DEFAULT_VALUE;
                return true;
            }
            if (s == "IS_LITTLE_ENDIAN") {
                obj = ExpressionKind::IS_LITTLE_ENDIAN;
                return true;
            }
            if (s == "GET_STREAM_OFFSET") {
                obj = ExpressionKind::GET_STREAM_OFFSET;
                return true;
            }
            if (s == "GET_REMAINING_BYTES") {
                obj = ExpressionKind::GET_REMAINING_BYTES;
                return true;
            }
            if (s == "CAN_READ_STREAM") {
                obj = ExpressionKind::CAN_READ_STREAM;
                return true;
            }
            if (s == "ARRAY_SIZE") {
                obj = ExpressionKind::ARRAY_SIZE;
                return true;
            }
            if (s == "ENUM_IS_DEFINED") {
                obj = ExpressionKind::ENUM_IS_DEFINED;
                return true;
            }
            if (s == "IS_ERROR") {
                obj = ExpressionKind::IS_ERROR;
                return true;
            }
            if (s == "MAX_VALUE") {
                obj = ExpressionKind::MAX_VALUE;
                return true;
            }
            if (s == "READ_DATA") {
                obj = ExpressionKind::READ_DATA;
                return true;
            }
            if (s == "WRITE_DATA") {
                obj = ExpressionKind::WRITE_DATA;
                return true;
            }
            if (s == "CONDITIONAL_STATEMENT") {
                obj = ExpressionKind::CONDITIONAL_STATEMENT;
                return true;
            }
            if (s == "CONDITIONAL") {
                obj = ExpressionKind::CONDITIONAL;
                return true;
            }
            if (s == "AVAILABLE") {
                obj = ExpressionKind::AVAILABLE;
                return true;
            }
            if (s == "SIZEOF") {
                obj = ExpressionKind::SIZEOF;
                return true;
            }
            if (s == "SUB_RANGE_INIT") {
                obj = ExpressionKind::SUB_RANGE_INIT;
                return true;
            }
            if (s == "OR_COND") {
                obj = ExpressionKind::OR_COND;
                return true;
            }
            if (s == "ADDRESS_OF") {
                obj = ExpressionKind::ADDRESS_OF;
                return true;
            }
            if (s == "OPTIONAL_OF") {
                obj = ExpressionKind::OPTIONAL_OF;
                return true;
            }
            if (s == "SETTER_STATUS") {
                obj = ExpressionKind::SETTER_STATUS;
                return true;
            }
            if (s == "SELF") {
                obj = ExpressionKind::SELF;
                return true;
            }
            return false;
        }
        return false;
    }
    
    bool from_json(FunctionKind& obj, const futils::json::JSON& j) {
        if (auto got = j.get_holder().as_str()) {
            auto& s = *got;
            if (s == "NORMAL") {
                obj = FunctionKind::NORMAL;
                return true;
            }
            if (s == "METHOD") {
                obj = FunctionKind::METHOD;
                return true;
            }
            if (s == "ENCODE") {
                obj = FunctionKind::ENCODE;
                return true;
            }
            if (s == "DECODE") {
                obj = FunctionKind::DECODE;
                return true;
            }
            if (s == "PROPERTY_GETTER") {
                obj = FunctionKind::PROPERTY_GETTER;
                return true;
            }
            if (s == "PROPERTY_SETTER") {
                obj = FunctionKind::PROPERTY_SETTER;
                return true;
            }
            return false;
        }
        return false;
    }
    
    bool from_json(InitCheckType& obj, const futils::json::JSON& j) {
        if (auto got = j.get_holder().as_str()) {
            auto& s = *got;
            if (s == "encode") {
                obj = InitCheckType::encode;
                return true;
            }
            if (s == "decode") {
                obj = InitCheckType::decode;
                return true;
            }
            if (s == "union_get") {
                obj = InitCheckType::union_get;
                return true;
            }
            if (s == "union_set") {
                obj = InitCheckType::union_set;
                return true;
            }
            return false;
        }
        return false;
    }
    
    bool from_json(LoopType& obj, const futils::json::JSON& j) {
        if (auto got = j.get_holder().as_str()) {
            auto& s = *got;
            if (s == "INFINITE") {
                obj = LoopType::INFINITE;
                return true;
            }
            if (s == "WHILE") {
                obj = LoopType::WHILE;
                return true;
            }
            if (s == "FOR_EACH") {
                obj = LoopType::FOR_EACH;
                return true;
            }
            if (s == "FOR") {
                obj = LoopType::FOR;
                return true;
            }
            return false;
        }
        return false;
    }
    
    bool from_json(LoweringIOType& obj, const futils::json::JSON& j) {
        if (auto got = j.get_holder().as_str()) {
            auto& s = *got;
            if (s == "ENUM_UNDERLYING_TO_INT") {
                obj = LoweringIOType::ENUM_UNDERLYING_TO_INT;
                return true;
            }
            if (s == "ARRAY_FOR_EACH") {
                obj = LoweringIOType::ARRAY_FOR_EACH;
                return true;
            }
            if (s == "STRING_FOR_EACH") {
                obj = LoweringIOType::STRING_FOR_EACH;
                return true;
            }
            if (s == "FLOAT_TO_BYTE_ARRAY") {
                obj = LoweringIOType::FLOAT_TO_BYTE_ARRAY;
                return true;
            }
            if (s == "INT_TO_BYTE_ARRAY") {
                obj = LoweringIOType::INT_TO_BYTE_ARRAY;
                return true;
            }
            if (s == "STRUCT_CALL") {
                obj = LoweringIOType::STRUCT_CALL;
                return true;
            }
            if (s == "BIT_FIELD_TO_BIT_SHIFT") {
                obj = LoweringIOType::BIT_FIELD_TO_BIT_SHIFT;
                return true;
            }
            if (s == "MULTI_REPRESENTATION") {
                obj = LoweringIOType::MULTI_REPRESENTATION;
                return true;
            }
            if (s == "VECTORIZED_IO") {
                obj = LoweringIOType::VECTORIZED_IO;
                return true;
            }
            return false;
        }
        return false;
    }
    
    bool from_json(MergeMode& obj, const futils::json::JSON& j) {
        if (auto got = j.get_holder().as_str()) {
            auto& s = *got;
            if (s == "UNCOMMON_TYPE") {
                obj = MergeMode::UNCOMMON_TYPE;
                return true;
            }
            if (s == "COMMON_TYPE") {
                obj = MergeMode::COMMON_TYPE;
                return true;
            }
            if (s == "STRICT_TYPE") {
                obj = MergeMode::STRICT_TYPE;
                return true;
            }
            return false;
        }
        return false;
    }
    
    bool from_json(SetterStatus& obj, const futils::json::JSON& j) {
        if (auto got = j.get_holder().as_str()) {
            auto& s = *got;
            if (s == "SUCCESS") {
                obj = SetterStatus::SUCCESS;
                return true;
            }
            if (s == "FAILED") {
                obj = SetterStatus::FAILED;
                return true;
            }
            return false;
        }
        return false;
    }
    
    bool from_json(SizeUnit& obj, const futils::json::JSON& j) {
        if (auto got = j.get_holder().as_str()) {
            auto& s = *got;
            if (s == "UNKNOWN") {
                obj = SizeUnit::UNKNOWN;
                return true;
            }
            if (s == "BIT_FIXED") {
                obj = SizeUnit::BIT_FIXED;
                return true;
            }
            if (s == "BYTE_FIXED") {
                obj = SizeUnit::BYTE_FIXED;
                return true;
            }
            if (s == "ELEMENT_FIXED") {
                obj = SizeUnit::ELEMENT_FIXED;
                return true;
            }
            if (s == "BIT_DYNAMIC") {
                obj = SizeUnit::BIT_DYNAMIC;
                return true;
            }
            if (s == "BYTE_DYNAMIC") {
                obj = SizeUnit::BYTE_DYNAMIC;
                return true;
            }
            if (s == "ELEMENT_DYNAMIC") {
                obj = SizeUnit::ELEMENT_DYNAMIC;
                return true;
            }
            if (s == "DYNAMIC") {
                obj = SizeUnit::DYNAMIC;
                return true;
            }
            return false;
        }
        return false;
    }
    
    bool from_json(StatementKind& obj, const futils::json::JSON& j) {
        if (auto got = j.get_holder().as_str()) {
            auto& s = *got;
            if (s == "BLOCK") {
                obj = StatementKind::BLOCK;
                return true;
            }
            if (s == "ASSIGNMENT") {
                obj = StatementKind::ASSIGNMENT;
                return true;
            }
            if (s == "YIELD") {
                obj = StatementKind::YIELD;
                return true;
            }
            if (s == "APPEND") {
                obj = StatementKind::APPEND;
                return true;
            }
            if (s == "RETURN") {
                obj = StatementKind::RETURN;
                return true;
            }
            if (s == "ERROR_RETURN") {
                obj = StatementKind::ERROR_RETURN;
                return true;
            }
            if (s == "ASSERT") {
                obj = StatementKind::ASSERT;
                return true;
            }
            if (s == "READ_DATA") {
                obj = StatementKind::READ_DATA;
                return true;
            }
            if (s == "WRITE_DATA") {
                obj = StatementKind::WRITE_DATA;
                return true;
            }
            if (s == "SEEK_STREAM") {
                obj = StatementKind::SEEK_STREAM;
                return true;
            }
            if (s == "IF_STATEMENT") {
                obj = StatementKind::IF_STATEMENT;
                return true;
            }
            if (s == "LOOP_STATEMENT") {
                obj = StatementKind::LOOP_STATEMENT;
                return true;
            }
            if (s == "MATCH_STATEMENT") {
                obj = StatementKind::MATCH_STATEMENT;
                return true;
            }
            if (s == "MATCH_BRANCH") {
                obj = StatementKind::MATCH_BRANCH;
                return true;
            }
            if (s == "BREAK") {
                obj = StatementKind::BREAK;
                return true;
            }
            if (s == "CONTINUE") {
                obj = StatementKind::CONTINUE;
                return true;
            }
            if (s == "FUNCTION_DECL") {
                obj = StatementKind::FUNCTION_DECL;
                return true;
            }
            if (s == "VARIABLE_DECL") {
                obj = StatementKind::VARIABLE_DECL;
                return true;
            }
            if (s == "PARAMETER_DECL") {
                obj = StatementKind::PARAMETER_DECL;
                return true;
            }
            if (s == "FIELD_DECL") {
                obj = StatementKind::FIELD_DECL;
                return true;
            }
            if (s == "COMPOSITE_FIELD_DECL") {
                obj = StatementKind::COMPOSITE_FIELD_DECL;
                return true;
            }
            if (s == "ENUM_DECL") {
                obj = StatementKind::ENUM_DECL;
                return true;
            }
            if (s == "ENUM_MEMBER_DECL") {
                obj = StatementKind::ENUM_MEMBER_DECL;
                return true;
            }
            if (s == "STRUCT_DECL") {
                obj = StatementKind::STRUCT_DECL;
                return true;
            }
            if (s == "UNION_DECL") {
                obj = StatementKind::UNION_DECL;
                return true;
            }
            if (s == "UNION_MEMBER_DECL") {
                obj = StatementKind::UNION_MEMBER_DECL;
                return true;
            }
            if (s == "PROGRAM_DECL") {
                obj = StatementKind::PROGRAM_DECL;
                return true;
            }
            if (s == "PROPERTY_DECL") {
                obj = StatementKind::PROPERTY_DECL;
                return true;
            }
            if (s == "PROPERTY_MEMBER_DECL") {
                obj = StatementKind::PROPERTY_MEMBER_DECL;
                return true;
            }
            if (s == "METADATA") {
                obj = StatementKind::METADATA;
                return true;
            }
            if (s == "IMPORT_MODULE") {
                obj = StatementKind::IMPORT_MODULE;
                return true;
            }
            if (s == "EXPRESSION") {
                obj = StatementKind::EXPRESSION;
                return true;
            }
            if (s == "ERROR_REPORT") {
                obj = StatementKind::ERROR_REPORT;
                return true;
            }
            if (s == "LOWERED_IO_STATEMENTS") {
                obj = StatementKind::LOWERED_IO_STATEMENTS;
                return true;
            }
            if (s == "SUB_BYTE_RANGE") {
                obj = StatementKind::SUB_BYTE_RANGE;
                return true;
            }
            if (s == "INIT_CHECK") {
                obj = StatementKind::INIT_CHECK;
                return true;
            }
            if (s == "ENDIAN_VARIABLE") {
                obj = StatementKind::ENDIAN_VARIABLE;
                return true;
            }
            return false;
        }
        return false;
    }
    
    bool from_json(StreamType& obj, const futils::json::JSON& j) {
        if (auto got = j.get_holder().as_str()) {
            auto& s = *got;
            if (s == "INPUT") {
                obj = StreamType::INPUT;
                return true;
            }
            if (s == "OUTPUT") {
                obj = StreamType::OUTPUT;
                return true;
            }
            return false;
        }
        return false;
    }
    
    bool from_json(SubByteRangeType& obj, const futils::json::JSON& j) {
        if (auto got = j.get_holder().as_str()) {
            auto& s = *got;
            if (s == "bytes") {
                obj = SubByteRangeType::bytes;
                return true;
            }
            if (s == "seek_bytes") {
                obj = SubByteRangeType::seek_bytes;
                return true;
            }
            if (s == "expression") {
                obj = SubByteRangeType::expression;
                return true;
            }
            return false;
        }
        return false;
    }
    
    bool from_json(TypeKind& obj, const futils::json::JSON& j) {
        if (auto got = j.get_holder().as_str()) {
            auto& s = *got;
            if (s == "INT") {
                obj = TypeKind::INT;
                return true;
            }
            if (s == "UINT") {
                obj = TypeKind::UINT;
                return true;
            }
            if (s == "FLOAT") {
                obj = TypeKind::FLOAT;
                return true;
            }
            if (s == "STRUCT") {
                obj = TypeKind::STRUCT;
                return true;
            }
            if (s == "RECURSIVE_STRUCT") {
                obj = TypeKind::RECURSIVE_STRUCT;
                return true;
            }
            if (s == "BOOL") {
                obj = TypeKind::BOOL;
                return true;
            }
            if (s == "VOID") {
                obj = TypeKind::VOID;
                return true;
            }
            if (s == "META") {
                obj = TypeKind::META;
                return true;
            }
            if (s == "ENUM") {
                obj = TypeKind::ENUM;
                return true;
            }
            if (s == "ARRAY") {
                obj = TypeKind::ARRAY;
                return true;
            }
            if (s == "VECTOR") {
                obj = TypeKind::VECTOR;
                return true;
            }
            if (s == "VARIANT") {
                obj = TypeKind::VARIANT;
                return true;
            }
            if (s == "RANGE") {
                obj = TypeKind::RANGE;
                return true;
            }
            if (s == "ENCODER_RETURN") {
                obj = TypeKind::ENCODER_RETURN;
                return true;
            }
            if (s == "DECODER_RETURN") {
                obj = TypeKind::DECODER_RETURN;
                return true;
            }
            if (s == "ENCODER_INPUT") {
                obj = TypeKind::ENCODER_INPUT;
                return true;
            }
            if (s == "DECODER_INPUT") {
                obj = TypeKind::DECODER_INPUT;
                return true;
            }
            if (s == "PROPERTY_SETTER_RETURN") {
                obj = TypeKind::PROPERTY_SETTER_RETURN;
                return true;
            }
            if (s == "OPTIONAL") {
                obj = TypeKind::OPTIONAL;
                return true;
            }
            if (s == "PTR") {
                obj = TypeKind::PTR;
                return true;
            }
            if (s == "FUNCTION") {
                obj = TypeKind::FUNCTION;
                return true;
            }
            return false;
        }
        return false;
    }
    
    bool from_json(UnaryOp& obj, const futils::json::JSON& j) {
        if (auto got = j.get_holder().as_str()) {
            auto& s = *got;
            if (s == "logical_not") {
                obj = UnaryOp::logical_not;
                return true;
            }
            if (s == "minus_sign") {
                obj = UnaryOp::minus_sign;
                return true;
            }
            if (s == "bit_not") {
                obj = UnaryOp::bit_not;
                return true;
            }
            return false;
        }
        return false;
    }
    
} // namespace ebm
