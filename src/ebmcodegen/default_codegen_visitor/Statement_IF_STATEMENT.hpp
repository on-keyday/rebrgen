/*DO NOT EDIT BELOW SECTION MANUALLY*/
/*license*/
// Template generated by ebmcodegen at https://github.com/on-keyday/rebrgen
/*
  Name: Statement_IF_STATEMENT
  Available variables:
    *this: Visitor
    module_: MappingTable
    item_id: StatementRef
    kind: StatementKind
    if_statement: IfStatement
      condition: Condition
        cond: ExpressionRef
      then_block: StatementRef
      else_block: StatementRef
*/
/*DO NOT EDIT ABOVE SECTION MANUALLY*/

MAYBE(condition, visit_Expression(*this, if_statement.condition.cond));
MAYBE(then_block, visit_Statement(*this, if_statement.then_block));
CodeWriter w;
if (use_brace_for_condition) {
    w.writeln("if (", tidy_condition_brace(std::move(condition.to_string())), ") ", begin_block);
}
else {
    w.writeln("if ", tidy_condition_brace(std::move(condition.to_string())), " ", begin_block);
}
auto then_scope = w.indent_scope();
if (then_block.to_string().empty()) {
    if (empty_block_marker.size()) {
        w.writeln(empty_block_marker);
    }
}
else {
    w.write_unformatted(std::move(then_block.to_string()));
}
then_scope.execute();
w.write(end_block);
auto els_block = if_statement.else_block;
auto if_word = use_elif ? "elif" : "if";
while (!is_nil(els_block)) {
    if (!use_elif) {
        w.write(" else ");
    }
    auto kind = module_.get_statement_kind(els_block);
    if (kind == ebm::StatementKind::IF_STATEMENT) {
        MAYBE(next_if_stmt, module_.get_statement(els_block));
        MAYBE(next_if, next_if_stmt.body.if_statement());
        MAYBE(condition, visit_Expression(*this, next_if.condition.cond));
        MAYBE(then_block, visit_Statement(*this, next_if.then_block));
        if (use_brace_for_condition) {
            w.writeln(if_word, " (", tidy_condition_brace(std::move(condition.to_string())), ") ", begin_block);
        }
        else {
            w.writeln(if_word, " ", tidy_condition_brace(std::move(condition.to_string())), " ", begin_block);
        }
        auto then_scope = w.indent_scope();
        if (then_block.to_string().empty()) {
            if (empty_block_marker.size()) {
                w.writeln(empty_block_marker);
            }
        }
        else {
            w.write_unformatted(then_block.to_string());
        }
        then_scope.execute();
        w.write(end_block);
        els_block = next_if.else_block;
    }
    else {
        if (use_elif) {
            w.write("else");
        }
        MAYBE(else_block, visit_Statement(*this, els_block));
        w.writeln(begin_block);
        auto else_scope = w.indent_scope();
        if (else_block.to_string().empty()) {
            if (empty_block_marker.size()) {
                w.writeln(empty_block_marker);
            }
        }
        else {
            w.write_unformatted(else_block.to_string());
        }
        else_scope.execute();
        w.write(end_block);
        els_block = {};
    }
}
w.writeln();
return w.out();
